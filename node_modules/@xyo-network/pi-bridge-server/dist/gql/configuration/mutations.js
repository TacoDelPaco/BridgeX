"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const withAuth_1 = __importDefault(require("../decorators/withAuth"));
exports.configurationMutation = () => ({
    setPaymentKey: withAuth_1.default((parent, { paymentKey }, { configuration }) => __awaiter(this, void 0, void 0, function* () {
        return configuration.setPaymentKey(paymentKey);
    })),
    setDefaultArchivist: withAuth_1.default((parent, { id }, { configuration }) => __awaiter(this, void 0, void 0, function* () {
        return configuration.setDefaultArchivist(id);
    })),
    attachArchivist: withAuth_1.default((parent, { dns, port }, { configuration }) => __awaiter(this, void 0, void 0, function* () {
        return configuration.attachArchivist(dns, port);
    })),
    detachArchivist: withAuth_1.default((parent, args, { configuration }) => __awaiter(this, void 0, void 0, function* () {
        return configuration.detachArchivist(args.id);
    })),
    updatePin: withAuth_1.default((parent, { oldPin, newPin }, { configuration }) => __awaiter(this, void 0, void 0, function* () {
        return configuration.updatePin(oldPin, newPin);
    })),
    forceUpdate: withAuth_1.default((parent, args, { configuration }) => __awaiter(this, void 0, void 0, function* () {
        return configuration.forceUpdate();
    })),
    lastResort: withAuth_1.default((parent, args, { configuration }) => __awaiter(this, void 0, void 0, function* () {
        return configuration.lastResort();
    })),
    checkForUpdates: withAuth_1.default((parent, args, { configuration }) => __awaiter(this, void 0, void 0, function* () {
        return configuration.checkForUpdates();
    })),
    factoryReset: withAuth_1.default((parent, args, { configuration }) => __awaiter(this, void 0, void 0, function* () {
        yield configuration.factoryReset();
        return true;
    }))
});
//# sourceMappingURL=mutations.js.map