import { IArchivist } from '@xyo-network/bridge-configuration';
declare const _default: () => {
    Query: {
        isConfigured: (parent: any, args: any, { configuration }: import("../..").IContext) => Promise<boolean>;
        getAuthToken: (parent: any, args: any, { configuration }: import("../..").IContext) => Promise<string>;
        publicKey: (parent: any, args: any, ctx: import("../..").IContext, info: any) => Promise<any>;
        paymentKey: (parent: any, args: any, ctx: import("../..").IContext, info: any) => Promise<any>;
        defaultArchivist: (parent: any, args: any, ctx: import("../..").IContext, info: any) => Promise<any>;
        archivists: (parent: any, args: any, ctx: import("../..").IContext, info: any) => Promise<any>;
        tailUnattendedUpgrade: (parent: any, args: any, ctx: import("../..").IContext, info: any) => Promise<any>;
        getAptPackageVersion: (parent: any, args: any, { configuration }: import("../..").IContext) => Promise<import("@xyo-network/bridge-configuration").Version>;
        getNpmPackageVersion: (parent: any, args: any, { configuration }: import("../..").IContext) => Promise<import("@xyo-network/bridge-configuration").Version>;
    };
    Mutation: {
        setPaymentKey: (parent: any, args: any, ctx: import("../..").IContext, info: any) => Promise<any>;
        setDefaultArchivist: (parent: any, args: any, ctx: import("../..").IContext, info: any) => Promise<any>;
        attachArchivist: (parent: any, args: any, ctx: import("../..").IContext, info: any) => Promise<any>;
        detachArchivist: (parent: any, args: any, ctx: import("../..").IContext, info: any) => Promise<any>;
        updatePin: (parent: any, args: any, ctx: import("../..").IContext, info: any) => Promise<any>;
        forceUpdate: (parent: any, args: any, ctx: import("../..").IContext, info: any) => Promise<any>;
        lastResort: (parent: any, args: any, ctx: import("../..").IContext, info: any) => Promise<any>;
        checkForUpdates: (parent: any, args: any, ctx: import("../..").IContext, info: any) => Promise<any>;
        factoryReset: (parent: any, args: any, ctx: import("../..").IContext, info: any) => Promise<any>;
    };
    Archivist: {
        id: (archivist: IArchivist) => string;
    };
};
export default _default;
//# sourceMappingURL=resolvers.d.ts.map