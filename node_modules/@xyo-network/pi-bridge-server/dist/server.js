"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BridgeServer = void 0;
const apollo_server_express_1 = require("apollo-server-express");
const express_1 = __importDefault(require("express"));
const graphql_tools_1 = require("graphql-tools");
const lodash_1 = require("lodash");
const express_2 = require("./express");
const gql_1 = require("./gql");
const token_1 = require("./token");
class BridgeServer {
    constructor(context, initializeRoutes = express_2.applyRoutes) {
        this.context = context;
        this.initializeRoutes = initializeRoutes;
        this.schema = (0, graphql_tools_1.makeExecutableSchema)({
            typeDefs: gql_1.typeDefs,
            resolvers: gql_1.resolvers
        });
        this.initContext = (req) => __awaiter(this, void 0, void 0, function* () {
            const token = (0, lodash_1.get)(req, 'req.headers.X-Auth-Token') || (0, lodash_1.get)(req, 'req.headers.x-auth-token');
            let authenticated = false;
            let authError = '';
            try {
                const pin = token && (0, token_1.verify)(token);
                authenticated = pin ? yield this.context.configuration.verifyPin(pin) : false;
            }
            catch (e) {
                if (e instanceof Error)
                    authError = e.message;
            }
            return Object.assign(Object.assign({}, this.context), { authenticated,
                authError });
        });
        this.app = (0, express_1.default)();
        this.config = {
            schema: this.schema,
            context: this.initContext
        };
    }
    start(cb) {
        const server = new apollo_server_express_1.ApolloServer(this.config);
        server.applyMiddleware({ app: this.app });
        this.initializeRoutes(this.app);
        this.app.listen({ port: this.context.port }, cb);
    }
}
exports.BridgeServer = BridgeServer;
//# sourceMappingURL=server.js.map