import { IContext, IIdArgs } from '../../@types'
import withAuth from '../decorators/withAuth'

export const configurationMutation = () => ({
  setPaymentKey: withAuth(async (_parent: unknown, { paymentKey }: { paymentKey: string }, { configuration }: IContext) => {
    return configuration.setPaymentKey(paymentKey)
  }),

  setDefaultArchivist: withAuth(async (_parent: unknown, { id }: IIdArgs, { configuration }: IContext) => {
    return configuration.setDefaultArchivist(id)
  }),

  attachArchivist: withAuth(async (
    _parent: unknown,
    { dns, port }: { dns: string, port: number },
    { configuration }: IContext
  ) => {
    return configuration.attachArchivist(dns, port)
  }),

  detachArchivist: withAuth(async (_parent: unknown, args: IIdArgs, { configuration }: IContext) => {
    return configuration.detachArchivist(args.id)
  }),

  updatePin: withAuth(async (
    _parent: unknown,
    { oldPin, newPin }: { oldPin: string, newPin: string },
    { configuration }: IContext
  ) => {
    return configuration.updatePin(oldPin, newPin)
  }),

  forceUpdate: withAuth(async (_parent: unknown, _args, { configuration }: IContext) => {
    return configuration.forceUpdate()
  }),

  lastResort: withAuth(async (_parent: unknown, _args, { configuration }: IContext) => {
    return configuration.lastResort()
  }),

  checkForUpdates: withAuth(async (_parent: unknown, _args, { configuration }: IContext) => {
    return configuration.checkForUpdates()
  }),

  factoryReset: withAuth(async (_parent: unknown, _args, { configuration }: IContext) => {
    await configuration.factoryReset()
    return true
  })
})
