import { IContext } from '../../@types'
import { sign } from '../../token'
import withAuth from '../decorators/withAuth'

export const configurationQuery = () => ({
  isConfigured: async (_parent: unknown, _args: unknown, { configuration }: IContext) => {
    return configuration.isConfigured()
  },

  getAuthToken: async (_parent: unknown, args: { pin: string }, { configuration }: IContext) => {
    const valid = await configuration.verifyPin(args.pin)
    if (!valid) throw new Error('Invalid')
    return sign(args.pin)
  },

  publicKey: withAuth(async (_parent: unknown, _args: unknown, { configuration }: IContext) => {
    return configuration.getPublicKey()
  }),

  paymentKey: withAuth(async (_parent: unknown, _args: unknown, { configuration }: IContext) => {
    return configuration.getPaymentKey()
  }),

  defaultArchivist: withAuth(async (_parent: unknown, _args: unknown, { configuration }: IContext) => {
    return configuration.getDefaultArchivist()
  }),

  archivists: withAuth(async (_parent: unknown, _args: unknown, { configuration }: IContext) => {
    return configuration.getAttachedArchivists()
  }),

  tailUnattendedUpgrade: withAuth(async (_parent: unknown, _args: unknown, { configuration }: IContext) => {
    return configuration.tailLog('/var/log/unattended-upgrades/unattended-upgrades-dpkg.log')
  }),

  getAptPackageVersion: async (_parent: unknown, _args: unknown, { configuration }: IContext) => {
    return configuration.getAptPackageVersion()
  },

  getNpmPackageVersion: async (_parent: unknown, _args: unknown, { configuration }: IContext) => {
    return configuration.getNpmPackageVersion()
  }
})
