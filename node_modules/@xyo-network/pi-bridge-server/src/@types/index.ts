import { IArchivist, IBridgeConfigurationManager } from '@xyo-network/bridge-configuration'
import { IStatus, IWifiManager } from '@xyo-network/pi-wifi-manager'
import { Express } from 'express'

export interface IContext {
  wifi: IWifiManager
  configuration: IBridgeConfigurationManager
  port: number
  authenticated?: boolean
  authError?: string
}

export type IExpressApplyRoutes = (app: Express) => void

export interface IIdArgs {
  id: string
}

export interface IConnectArgs {
  ssid: string
  password: string
  pin: string
}

export interface INetworkQuery {
  ip(parent: unknown, args: unknown, ctx: IContext): Promise<string | null>
  port(parent: unknown, args: unknown, ctx: IContext): Promise<number>
  url(parent: unknown, args: unknown, ctx: IContext): Promise<string | null>
  network(parent: unknown, args: unknown, ctx: IContext): Promise<IStatus | undefined>
  scan(parent: unknown, args: unknown, ctx: IContext): Promise<IStatus[]>
}

export interface INetworkMutation {
  connect(parent: unknown, args: IConnectArgs, ctx: IContext): Promise<boolean>
}

export interface IConfigurationQuery {
  publicKey(parent: unknown, args: unknown, ctx: IContext): Promise<string | null>
  defaultArchivist(parent: unknown, args: unknown, ctx: IContext): Promise<IArchivist | null>
  archivists(parent: unknown, args: unknown, ctx: IContext): Promise<IArchivist[]>
}

export interface IConfigurationMutation {
  setDefaultArchivist(parent: unknown, args: unknown, ctx: IContext): Promise<IArchivist | null>
  attachArchivist(parent: unknown, args: unknown, ctx: IContext): Promise<IArchivist | null>
  detachArchivist(parent: unknown, args: unknown, ctx: IContext): Promise<IArchivist | null>
}
