#!/usr/bin/env node

// tslint:disable

import { resolve } from 'path'
import { readdirSync, readFileSync } from 'fs'
import { prompt } from 'enquirer'
import { exec, rm } from 'shelljs'

var pidFolder = resolve(__dirname, '..', 'pids')

async function main(argv) {
  const optionalArg = argv.length >= 3 ? argv[2] : undefined

  try {
    console.log(pidFolder)
    var files = readdirSync(pidFolder)
    var pidFiles = files.filter((f) => {
      if (optionalArg) return `${optionalArg}.pid` === f
      return f !== 'keep'
    })

    if (pidFiles.length === 0) {
      if (optionalArg) {
        console.log(`No XyoNode process found named ${optionalArg}`)
      } else {
        console.log(`No Xyo Nodes to close`)
      }

      process.exit(0)
    }

    if (pidFiles.length === 1) {
      killProc(pidFiles[0], pidFolder)
      return
    }

    var { pidFile } = await enquirer.prompt({
      type: 'select',
      message: `There are ${pidFiles.length} xyo-node process running. Which do you want to kill?`,
      choices: pidFiles,
      name: 'pidFile'
    })

    killProc(pidFile, pidFolder)
  
  } catch (err) {
    console.error(`There was an error`, err)
  }
}

function killProc(pidFile, pidFolder) {
  const filePath = resolve(pidFolder, pidFile)
  const val = readFileSync(filePath, 'utf8')
  exec(`kill -2 ${val}`)
  rm(filePath)
}

export const killProcess = killProc
export const killAllProcesses = main

if (require.main === module) main(process.argv)

