"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.XyoCharacteristicHandle = void 0;
const base_1 = require("@xyo-network/base");
const logger_1 = require("@xyo-network/logger");
const xyo_input_stream_1 = require("./data/xyo-input-stream");
const xyo_output_stream_1 = require("./data/xyo-output-stream");
class XyoCharacteristicHandle {
    constructor(peer, initiationData, characteristic, onClose) {
        this.logger = new logger_1.XyoLogger(false, false);
        this.inputStream = new xyo_input_stream_1.XyoInputStream();
        this.onClose = onClose;
        this.networkHeuristics = [];
        this.peer = peer;
        this.initiationData = initiationData;
        this.characteristic = characteristic;
    }
    onWrite(value) {
        this.logger.info(`Handler received write: ${value.toString("hex")}`);
        this.inputStream.addChunk(value);
        const newPacket = this.inputStream.getOldestPacket();
        const callback = this.packetCompleteCallback;
        if (newPacket && callback) {
            callback(newPacket);
        }
    }
    delay(mills) {
        return new Promise((resolve) => {
            const onDone = () => {
                resolve();
            };
            base_1.XyoBase.timeout(onDone, mills);
        });
    }
    chunkSend(data) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.info(`Chunk send for server, entire: ${data.toString("hex")}`);
            // todo add timeout
            const sizeBuffer = Buffer.alloc(4);
            sizeBuffer.writeUInt32BE(data.length + 4, 0);
            const sizeEncodedBuffer = Buffer.concat([sizeBuffer, data]);
            // todo get MTU for chunking instead of fixed 20 bytes
            const chunksToSend = (0, xyo_output_stream_1.chunkBytes)(sizeEncodedBuffer, 20);
            for (const chunk of chunksToSend) {
                this.logger.info(`Sending chunk: ${chunk.toString("hex")}`);
                this.characteristic.value = chunk;
                yield this.delay(200);
                yield this.characteristic.notifyChanged();
            }
        });
    }
    waitForWrite() {
        return __awaiter(this, void 0, void 0, function* () {
            // todo add timeout
            this.logger.info(`Waiting for write`);
            return new Promise((resolve) => {
                let hasResumed = false;
                const onTimeout = () => {
                    if (!hasResumed) {
                        hasResumed = true;
                        this.packetCompleteCallback = undefined;
                        resolve(undefined);
                    }
                };
                base_1.XyoBase.timeout(onTimeout, 30000);
                this.packetCompleteCallback = (value) => {
                    if (!hasResumed) {
                        this.logger.info(`PacketCompleteCallback resolved`);
                        hasResumed = true;
                        this.packetCompleteCallback = undefined;
                        resolve(value);
                    }
                };
            });
        });
    }
    onPeerDisconnect(callback) {
        console.log(callback);
        return () => null;
    }
    send(data, awaitResponse) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.info(`Will chunk send`);
            yield this.chunkSend(data);
            this.logger.info(`Done chunk send`);
            if (awaitResponse != false) {
                this.logger.info(`Will receive`);
                return this.waitForWrite();
            }
            return undefined;
        });
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            const callback = this.onClose;
            if (callback) {
                // todo, find a wait to get await notifaction so we do not have this delay
                yield this.delay(500);
                // todo get id of device
                callback("0");
            }
        });
    }
}
exports.XyoCharacteristicHandle = XyoCharacteristicHandle;
//# sourceMappingURL=xyo-characteristic-handle.js.map