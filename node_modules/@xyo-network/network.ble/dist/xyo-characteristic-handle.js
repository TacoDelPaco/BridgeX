"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.XyoCharacteristicHandle = void 0;
const base_1 = require("@xyo-network/base");
const logger_1 = require("@xyo-network/logger");
const xyo_input_stream_1 = require("./data/xyo-input-stream");
const xyo_output_stream_1 = require("./data/xyo-output-stream");
class XyoCharacteristicHandle {
    constructor(peer, initiationData, characteristic, onClose) {
        this.logger = new logger_1.XyoLogger(false, false);
        this.packetCompleteCallback = undefined;
        this.inputStream = new xyo_input_stream_1.XyoInputStream();
        this.initiationData = undefined;
        this.onClose = onClose;
        this.networkHeuristics = [];
        this.peer = peer;
        this.initiationData = initiationData;
        this.characteristic = characteristic;
    }
    onWrite(value) {
        this.logger.info(`Handler received write: ${value.toString("hex")}`);
        this.inputStream.addChunk(value);
        const newPacket = this.inputStream.getOldestPacket();
        const callback = this.packetCompleteCallback;
        if (newPacket && callback) {
            callback(newPacket);
        }
    }
    delay(mills) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.info(`XyoCharacteristicHandle.delay()`);
            return new Promise((resolve) => {
                const onDone = () => {
                    resolve();
                };
                base_1.XyoBase.timeout(onDone, mills);
            });
        });
    }
    chunkSend(data) {
        var _a, e_1, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            // const timeout = new Promise<IXyoNetworkPipe>((_, reject) => {
            //     XyoBase.timeout(async () => {
            //         reject(`chunkSend().timeout()`) // Promise<null>; reject()
            //     }, 10_000)
            // })
            // // eslint-disable-next-line no-async-promise-executor
            // const promise = new Promise<IXyoNetworkPipe>(async (resolve) => {
            //     this.logger.info(`Chunk send for server, entire: ${ data.toString("hex") }`)
            //     // todo add timeout
            //     const sizeBuffer = Buffer.alloc(4)
            //     sizeBuffer.writeUInt32BE(data.length + 4, 0)
            //     const sizeEncodedBuffer = Buffer.concat([ sizeBuffer, data ])
            //     // todo get MTU for chunking instead of fixed 20 bytes
            //     const chunksToSend = chunkBytes(sizeEncodedBuffer, 20) 
            //     for (const chunk of chunksToSend) {
            //         this.logger.info(`Sending chunk: ${ chunk.toString("hex") }`)
            //         this.characteristic.value = chunk
            //         await this.delay(200)
            //         await this.characteristic.notifyChanged()
            //     }
            //     resolve(this)
            // })
            // return Promise.race([ promise, timeout ])
            this.logger.info(`Chunk send for server, entire: ${data.toString("hex")}`);
            // todo add timeout
            const sizeBuffer = Buffer.alloc(4);
            sizeBuffer.writeUInt32BE(data.length + 4, 0);
            const sizeEncodedBuffer = Buffer.concat([sizeBuffer, data]);
            // todo get MTU for chunking instead of fixed 20 bytes
            const chunksToSend = (0, xyo_output_stream_1.chunkBytes)(sizeEncodedBuffer, 20);
            try {
                for (var _d = true, chunksToSend_1 = __asyncValues(chunksToSend), chunksToSend_1_1; chunksToSend_1_1 = yield chunksToSend_1.next(), _a = chunksToSend_1_1.done, !_a; _d = true) {
                    _c = chunksToSend_1_1.value;
                    _d = false;
                    const chunk = _c;
                    this.logger.info(`Sending chunk: ${chunk.toString("hex")}`);
                    this.characteristic.value = chunk;
                    yield this.delay(200);
                    yield this.characteristic.notifyChanged();
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = chunksToSend_1.return)) yield _b.call(chunksToSend_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    waitForWrite() {
        return __awaiter(this, void 0, void 0, function* () {
            // todo add timeout
            this.logger.info(`Waiting for write`);
            // eslint-disable-next-line no-async-promise-executor
            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
                this.logger.info(`XyoCharacteristicHandle().waitForWrite()`);
                let hasResumed = false;
                const onTimeout = () => __awaiter(this, void 0, void 0, function* () {
                    this.logger.info(`XyoCharacteristicHandle().onTimeout`);
                    if (!hasResumed) {
                        hasResumed = true;
                        this.packetCompleteCallback = undefined;
                        resolve(undefined);
                    }
                });
                base_1.XyoBase.timeout(onTimeout, 30000);
                this.packetCompleteCallback = (value) => __awaiter(this, void 0, void 0, function* () {
                    if (!hasResumed) {
                        this.logger.info(`PacketCompleteCallback resolved`);
                        hasResumed = true;
                        this.packetCompleteCallback = undefined;
                        resolve(value);
                    }
                });
            }));
        });
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onPeerDisconnect(_callback) {
        return () => { this.logger.info(`onPeerDisconnect()`); };
    }
    send(data, awaitResponse) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.info(`Will chunk send`);
            yield this.chunkSend(data);
            this.logger.info(`Done chunk send`);
            if (awaitResponse != false) {
                this.logger.info(`Will receive`);
                return this.waitForWrite();
            }
            return undefined;
        });
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.info(`XyoCharacteristicHandle.close()`);
            const callback = this.onClose;
            if (callback) {
                // todo, find a wait to get await notifaction so we do not have this delay
                yield this.delay(500);
                // todo get id of device
                callback("0");
            }
        });
    }
}
exports.XyoCharacteristicHandle = XyoCharacteristicHandle;
//# sourceMappingURL=xyo-characteristic-handle.js.map