"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.XyoServerNetwork = void 0;
const base_1 = require("@xyo-network/base");
const logger_1 = require("@xyo-network/logger");
const xyo_advertisement_1 = require("./data/xyo-advertisement");
const xyo_characteristic_handle_1 = require("./xyo-characteristic-handle");
class XyoServerNetwork {
    getMinor() {
        return 0;
    }
    constructor(pipeCharacteristic, server) {
        this.isAdvertising = false;
        this.isPaused = false;
        this.currentDeviceId = "";
        this.logger = new logger_1.XyoLogger(false, false);
        this.advData = new xyo_advertisement_1.XyoAdvertisement(this.getMinor());
        this.deviceRouter = {};
        this.serverEndpoint = {
            onWrite: (value) => __awaiter(this, void 0, void 0, function* () {
                // todo get device id here
                if (this.isPaused) {
                    return false;
                }
                const deviceKey = "0";
                const handler = this.deviceRouter[deviceKey];
                if (handler) {
                    handler.onWrite(value);
                    return true;
                }
                const peer = {
                    getTemporaryPeerId: () => {
                        return Buffer.from(deviceKey);
                    }
                };
                const firstSend = this.phraseFirstSend(value);
                this.currentDeviceId = deviceKey;
                this.deviceRouter[deviceKey] = new xyo_characteristic_handle_1.XyoCharacteristicHandle(peer, firstSend, this.pipeCharacteristic, this.closeHandler);
                const callback = this.onNewPipe;
                if (callback) {
                    callback(this.deviceRouter[deviceKey]);
                }
                return true;
            }),
            onUnsubscribe: () => {
                delete this.deviceRouter[this.currentDeviceId];
                this.server.disconnect();
            }
        };
        this.serverListener = {
            onConnect: () => {
                // delete this.deviceRouter[this.currentDeviceId]
            },
            onDisconnect: () => {
                delete this.deviceRouter[this.currentDeviceId];
            }
        };
        this.closeHandler = (id) => {
            this.logger.info("Closing pipe");
            this.server.disconnect();
            delete this.deviceRouter[id];
        };
        this.pipeCharacteristic = pipeCharacteristic;
        this.server = server;
        pipeCharacteristic.addListener("server_xyo_main", this.serverEndpoint);
        this.server.addListener("server_xyo_main", this.serverListener);
    }
    pause() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.server.stopAdvertising();
            this.isAdvertising = false;
            this.isPaused = true;
        });
    }
    unPause() {
        this.isPaused = false;
        const callback = this.onResume;
        if (callback) {
            this.server.disconnect();
            callback();
        }
    }
    findWithTimeout(timeoutInMills) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => {
                let hasResumed = false;
                this.server.startAdvertising(this.advData.advertisementData(), this.advData.getScanResponse()).then(() => {
                    const onTimeout = () => __awaiter(this, void 0, void 0, function* () {
                        if (!hasResumed && !this.isPaused) {
                            this.logger.info("Timeout or resume for pipe");
                            hasResumed = true;
                            this.onNewPipe = undefined;
                            if (this.isAdvertising) {
                                yield this.server.stopAdvertising();
                                this.isAdvertising = false;
                            }
                            resolve(undefined);
                        }
                    });
                    base_1.XyoBase.timeout(onTimeout, timeoutInMills);
                    this.onResume = onTimeout;
                    this.isAdvertising = true;
                    this.logger.info("Find start for server");
                    this.logger.info("Waiting for pipe");
                    this.onNewPipe = (pipe) => __awaiter(this, void 0, void 0, function* () {
                        this.logger.info("Resuming with pipe");
                        hasResumed = true;
                        this.onNewPipe = undefined;
                        if (this.isAdvertising) {
                            yield this.server.stopAdvertising();
                            this.isAdvertising = false;
                        }
                        resolve(pipe);
                    });
                }).catch(() => {
                    resolve(undefined);
                });
            });
        });
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    find(_catalogue) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.info("Find start for server");
            // console.log(catalogue)
            yield this.server.startAdvertising(this.advData.advertisementData(), this.advData.getScanResponse());
            this.isAdvertising = true;
            const result = yield new Promise((resolve) => {
                this.logger.info("Waiting for pipe");
                this.onNewPipe = (pipe) => {
                    this.onNewPipe = undefined;
                    resolve(pipe);
                };
            });
            yield this.server.stopAdvertising();
            this.isAdvertising = false;
            this.logger.info("Returning pipe");
            return result;
        });
    }
    phraseFirstSend(buffer) {
        return buffer.subarray(4, buffer.length);
    }
    stopServer() {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.info("Stopping server");
            this.isAdvertising = false;
            yield this.server.stopAdvertising();
        });
    }
}
exports.XyoServerNetwork = XyoServerNetwork;
//# sourceMappingURL=xyo-server-ble-network.js.map