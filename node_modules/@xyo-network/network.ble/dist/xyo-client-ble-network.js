"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.XyoClientBluetoothNetwork = void 0;
const base_1 = require("@xyo-network/base");
const logger_1 = require("@xyo-network/logger");
const xyo_nearby_devices_1 = require("./devices/xyo-nearby-devices");
class XyoClientBluetoothNetwork {
    constructor(scanner) {
        this.nearby = new xyo_nearby_devices_1.XyoNearbyDevices();
        this.nearbyDevices = [];
        this.onClose = undefined;
        this.onPipe = undefined;
        this.scanInterval = undefined;
        this.tryingDevice = false;
        this.logger = new logger_1.XyoLogger(false, false);
        this.scanLambda = () => __awaiter(this, void 0, void 0, function* () {
            this.logger.info(`XyoClientBluetoothNetwork.scanLambda()`);
            const nearbyNow = this.scanner.getDevices();
            this.nearbyDevices = this.nearby.nearby(nearbyNow);
            if (!this.tryingDevice && this.nearbyDevices.length > 0) {
                const randomDevice = this.nearbyDevices[Math.floor(Math.random() * this.nearbyDevices.length)];
                this.tryingDevice = true;
                // Running twice? shutDown() gets called after
                this.logger.info(`XyoClientBluetoothNetwork.scanLambda(): stopScan()`);
                yield this.scanner.stopScan();
                randomDevice.tryCreatePipe().then((createdPipe) => __awaiter(this, void 0, void 0, function* () {
                    this.logger.info(`XyoClientBluetoothNetwork.scanLambda().randomDevice.tryCreatePipe()`);
                    if (this.scanInterval)
                        clearInterval(this.scanInterval);
                    if (createdPipe) {
                        this.resolveCallback(createdPipe); // default no await
                        this.logger.info(`XyoClientBluetoothNetwork.tryCreatePipe.resolveCallback()`);
                    }
                    else {
                        const callback = this.onClose;
                        if (callback) {
                            callback();
                            return;
                        }
                        this.logger.info(`XyoClientBluetoothNetwork.tryCreatePipe.else{ startScan() }`);
                        yield this.scanner.startScan();
                        this.tryingDevice = false;
                    }
                })).catch((error) => __awaiter(this, void 0, void 0, function* () {
                    const callback = this.onClose;
                    if (callback) {
                        callback();
                        return;
                    }
                    this.logger.error(`XyoClientBluetoothNetwork.tryCreatePipe.catch(): ${error}`);
                    yield this.scanner.startScan();
                    this.tryingDevice = false;
                }));
            }
        });
        this.scanner = scanner;
    }
    resolveCallback(pipe) {
        const callback = this.onPipe;
        this.logger.info(`XyoClientBluetoothNetwork.resolveCallback()`);
        if (callback)
            callback(pipe); // return pipe / callback(pipe)
    }
    shutDown() {
        return __awaiter(this, void 0, void 0, function* () {
            const interval = this.scanInterval;
            if (interval) {
                clearInterval(interval);
                this.scanInterval = undefined;
            }
            this.onPipe = undefined;
            this.onClose = undefined;
            this.logger.info(`XyoClientBluetoothNetwork().shutDown(): stopScan()`);
            yield this.scanner.stopScan(); // await breaks loop or timeout without
        });
    }
    // default no async/await
    waitForJobToFinish() {
        this.logger.info(`XyoClientBluetoothNetwork.waitForJobToFinish()`);
        // eslint-disable-next-line no-async-promise-executor
        return new Promise((resolve) => {
            this.onClose = () => {
                resolve(undefined);
            };
        });
    }
    findWithTimeout(timeoutInMills) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.info(`XyoClientBluetoothNetwork.findWithTimeout()`);
            this.tryingDevice = false;
            // eslint-disable-next-line no-async-promise-executor
            return new Promise((resolve, reject) => {
                this.logger.info(`XyoClientBluetoothNetwork.findWithTimeout() async`);
                // default no async/await
                this.scanner.startScan().then(() => {
                    this.logger.info(`XyoClientBluetoothNetwork.findWithTimeout().startScan()`);
                    let hasResumed = false;
                    // default async/await
                    const onTimeout = () => {
                        this.logger.info(`XyoClientBluetoothNetwork.findWithTimeout().startScan().onTimeout`);
                        if (!hasResumed) {
                            if (this.tryingDevice) {
                                this.logger.info(`XyoClientBluetoothNetwork.findWithTimeout().onTimeout: this.tryingDevice { this.waitForJobToFinish }`);
                                this.waitForJobToFinish();
                            }
                            this.logger.info(`XyoClientBluetoothNetwork.findWithTimeout().onTimeout: this.shutDown()`);
                            this.shutDown();
                            resolve(undefined);
                        }
                    };
                    base_1.XyoBase.timeout(onTimeout, timeoutInMills);
                    // this async breaks things, but without it a timeout occurs
                    this.onPipe = (pipe) => __awaiter(this, void 0, void 0, function* () {
                        hasResumed = true;
                        try {
                            this.logger.info(`XyoClientBluetoothNetwork.onPipe().shutDown()`);
                            yield this.shutDown();
                            resolve(pipe);
                        }
                        catch (e) {
                            this.logger.info(`XyoClientBluetoothNetwork.onPipe(): ${e}`);
                            reject(`XyoClientBluetoothNetwork.onPipe()`);
                        }
                    });
                    this.scanInterval = setInterval(this.scanLambda, 1000);
                }).catch((error) => __awaiter(this, void 0, void 0, function* () {
                    this.logger.info(`Error: ${error}`);
                    resolve(undefined);
                }));
            });
        });
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    find(_catalogue) {
        this.tryingDevice = false;
        // eslint-disable-next-line no-async-promise-executor
        return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
            yield this.scanner.startScan();
            this.logger.info(`XyoClientBluetoothNetwork.find()`);
            this.onPipe = (pipe) => {
                this.shutDown(); // default no async/await
                resolve(pipe);
            };
            this.scanInterval = setInterval(this.scanLambda, 1000);
        }));
    }
    stopServer() {
        this.logger.info(`XyoClientBluetoothNetwork.stopServer(): stopScan()`);
        return this.scanner.stopScan(); // default no async/await
    }
}
exports.XyoClientBluetoothNetwork = XyoClientBluetoothNetwork;
//# sourceMappingURL=xyo-client-ble-network.js.map