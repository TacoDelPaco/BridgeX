/// <reference types="node" />
import { IXyoBluetoothDevice, IXyoCharacteristic } from "@xyo-network/ble-central";
import { XyoLogger } from '@xyo-network/logger';
import { CatalogueItem, IXyoNetworkPeer, IXyoNetworkPipe } from '@xyo-network/network';
import { IXyoSerializableObject } from '@xyo-network/serialization';
export declare class XyoPipeClient implements IXyoNetworkPipe {
    networkHeuristics: IXyoSerializableObject[];
    logger: XyoLogger;
    peer: IXyoNetworkPeer;
    otherCatalogue: CatalogueItem[] | undefined;
    initiationData: Buffer | undefined;
    private sessionCharacteristic;
    private device;
    constructor(device: IXyoBluetoothDevice);
    onPeerDisconnect(_callback: (hasError: boolean) => void): () => void;
    tryCreatePipe(): Promise<IXyoNetworkPipe | void>;
    send(data: Buffer, awaitResponse?: boolean): Promise<Buffer | undefined>;
    close(): Promise<void>;
    read(characteristic: IXyoCharacteristic): Promise<Buffer>;
    chunkSend(data: Buffer, characteristic: IXyoCharacteristic): Promise<void>;
    private addBleSize;
}
//# sourceMappingURL=xyo-pipe-client.d.ts.map