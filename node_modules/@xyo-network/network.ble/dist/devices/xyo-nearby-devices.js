"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.XyoNearbyDevices = void 0;
const ble_central_1 = require("@xyo-network/ble-central");
const logger_1 = require("@xyo-network/logger");
const xyo_pipe_client_1 = require("./xyo-pipe-client");
class XyoNearbyDevices {
    constructor() {
        this.logger = new logger_1.XyoLogger(false, false);
    }
    nearby(allDevices) {
        const returnDevices = [];
        allDevices.forEach((device) => __awaiter(this, void 0, void 0, function* () {
            if (this.isXyoCompatible(device))
                returnDevices.push(new xyo_pipe_client_1.XyoPipeClient(device));
        }));
        this.logger.info(`${returnDevices.length} + XYO devices in range`);
        return returnDevices;
    }
    isXyoCompatible(device) {
        const asIBeacon = (0, ble_central_1.getIBeacon)(device.advertisement);
        if (asIBeacon == null)
            return false;
        return asIBeacon.uuid.toLocaleLowerCase() === "d684352edf36484ebc982d5398c5593e".toLocaleLowerCase();
    }
}
exports.XyoNearbyDevices = XyoNearbyDevices;
//# sourceMappingURL=xyo-nearby-devices.js.map