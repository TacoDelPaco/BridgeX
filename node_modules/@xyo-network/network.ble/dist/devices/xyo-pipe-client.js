"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.XyoPipeClient = void 0;
const base_1 = require("@xyo-network/base");
const heuristics_common_1 = require("@xyo-network/heuristics-common");
const logger_1 = require("@xyo-network/logger");
const xyo_output_stream_1 = require("../data/xyo-output-stream");
class XyoPipeClient {
    constructor(device) {
        this.networkHeuristics = [];
        this.logger = new logger_1.XyoLogger(false, false);
        this.device = device;
        this.peer = {
            getTemporaryPeerId() {
                return Buffer.from(device.id);
            }
        };
    }
    onPeerDisconnect(_callback) {
        return () => {
            this.logger.info(`onPeerDisconnect()`);
            console.log("disconnect");
        };
    }
    tryCreatePipe() {
        return __awaiter(this, void 0, void 0, function* () {
            const timeout = new Promise((_resolve, reject) => {
                base_1.XyoBase.timeout(() => {
                    this.device.disconnect();
                    reject("tryCreatePipe(): timeout()");
                }, 10000);
            });
            const promise = new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    if (this.device.state !== 'connected') {
                        yield this.device.connect();
                        this.logger.info(`tryCreatePipe(): connect()`);
                    }
                    const services = yield this.device.discoverServicesForUuids(["d684352edf36484ebc982d5398c5593e"]);
                    if (services.length === 1) {
                        const characteristics = yield services[0].discoverCharacteristics();
                        const xyoPipeChar = characteristics.filter((characteristic) => {
                            return characteristic.uuid === "727a36390eb44525b1bc7fa456490b2d";
                        });
                        if (xyoPipeChar.length === 1) {
                            this.sessionCharacteristic = xyoPipeChar[0];
                            yield xyoPipeChar[0].subscribe();
                            this.networkHeuristics = [heuristics_common_1.rssiSerializationProvider.newInstance(this.device.rssi)];
                            resolve(this);
                            return;
                        }
                        yield this.device.disconnect();
                        reject("No XYO pipe characteristic 1");
                        return;
                    }
                    yield this.device.disconnect();
                    reject("No XYO service");
                }
                catch (error) {
                    // timeout if here
                    this.logger.error(`Error: ${error}`);
                    yield this.device.disconnect();
                    reject("Timeout error caught");
                }
            }));
            return yield Promise.race([promise, timeout]);
        });
    }
    send(data, awaitResponse) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.sessionCharacteristic != null) {
                yield this.chunkSend(data, this.sessionCharacteristic);
                if (awaitResponse !== false) {
                    return this.read(this.sessionCharacteristic);
                }
                return undefined;
            }
            throw Error("No XYO pipe characteristic 2");
        });
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.info(`close(): Disconnect`);
            yield this.device.disconnect();
        });
    }
    read(characteristic) {
        const timeout = new Promise((_resolve, reject) => {
            base_1.XyoBase.timeout(() => {
                reject("read(): Timeout");
            }, 12000);
        });
        const action = new Promise((resolve, _reject) => {
            let buffer;
            let bytesReceived = 0;
            const onData = (data, _isNotification) => {
                if (bytesReceived === 0) {
                    bytesReceived = data.readUInt32BE(0);
                    buffer = data.subarray(4, data.length);
                    if (buffer.length === bytesReceived - 4) {
                        resolve(buffer);
                    }
                    return;
                }
                buffer = Buffer.concat([buffer, data]);
                if (buffer.length === bytesReceived - 4) {
                    resolve(buffer);
                }
            };
            characteristic.on("notification", onData);
        });
        return Promise.race([timeout, action]);
    }
    chunkSend(data, characteristic) {
        return __awaiter(this, void 0, void 0, function* () {
            const timeout = new Promise((_resolve, reject) => {
                base_1.XyoBase.timeout(() => {
                    reject("chunkSend(): Timeout");
                }, 10000);
            });
            const action = new Promise((resolve, _reject) => __awaiter(this, void 0, void 0, function* () {
                const chunksToSend = (0, xyo_output_stream_1.chunkBytes)(this.addBleSize(data), 20);
                this.logger.info(`Sending entire: ${data.toString('hex')}`);
                // tslint:disable-next-line:prefer-for-of
                for (let i = 0; i < chunksToSend.length; i++) {
                    yield characteristic.write(chunksToSend[i]);
                }
                resolve();
            }));
            yield Promise.race([timeout, action]);
        });
    }
    addBleSize(data) {
        const buffer = Buffer.alloc(4);
        buffer.writeUInt32BE(data.length + 4, 0);
        return Buffer.concat([buffer, data]);
    }
}
exports.XyoPipeClient = XyoPipeClient;
//# sourceMappingURL=xyo-pipe-client.js.map