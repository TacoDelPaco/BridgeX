"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.XyoFullBleNetwork = void 0;
const logger_1 = require("@xyo-network/logger");
const base_1 = require("@xyo-network/base");
class XyoFullBleNetwork {
    constructor(client, server, clientHandle, serverHandle) {
        this.logger = new logger_1.XyoLogger(false, false);
        this.resumedOnServer = true;
        this.clientHandle = clientHandle;
        this.serverHandle = serverHandle;
        this.server = server;
        this.client = client;
    }
    getRandomInterval() {
        return 30000 + (Math.random() * 30000);
    }
    find(catalogue) {
        return __awaiter(this, void 0, void 0, function* () {
            var found = false;
            this.clientHandle(false);
            this.serverHandle(false);
            while (!found) {
                yield this.delay(2500);
                this.serverHandle(true);
                yield this.delay(2500);
                const pipeFromServer = yield this.server.findWithTimeout(this.getRandomInterval());
                if (pipeFromServer) {
                    found = true;
                    this.resumedOnServer = true;
                    return pipeFromServer;
                }
                this.serverHandle(false);
                yield this.delay(2500);
                this.clientHandle(true);
                yield this.delay(2500);
                const pipeFromClient = yield this.client.findWithTimeout(this.getRandomInterval() / 2);
                if (pipeFromClient) {
                    found = true;
                    this.resumedOnServer = false;
                    return pipeFromClient;
                }
                this.clientHandle(false);
            }
            throw new Error("Invalid state");
        });
    }
    delay(mills) {
        return new Promise((resolve, reject) => {
            const onDone = () => {
                resolve();
            };
            base_1.XyoBase.timeout(onDone, mills);
        });
    }
    stopServer() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client.stopServer();
            yield this.server.stopServer();
        });
    }
}
exports.XyoFullBleNetwork = XyoFullBleNetwork;
//# sourceMappingURL=xyo-full-ble-network.js.map