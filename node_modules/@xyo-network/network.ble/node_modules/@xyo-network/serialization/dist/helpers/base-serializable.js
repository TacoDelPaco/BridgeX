"use strict";
/*
 * @Author: XY | The Findables Company <ryanxyo>
 * @Date:   Wednesday, 5th December 2018 10:30:22 am
 * @Email:  developer@xyfindables.com
 * @Filename: base-serializable.ts
 * @Last modified by: ryanxyo
 * @Last modified time: Friday, 14th December 2018 12:09:57 pm
 * @License: All Rights Reserved
 * @Copyright: Copyright XY | The Findables Company
 */
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = require("@xyo-network/base");
const resolveSerializablesToBuffer_1 = require("./resolveSerializablesToBuffer");
const serialize_1 = require("./serialize");
const findSchemaById_1 = require("./findSchemaById");
const readHeader_1 = require("./readHeader");
class XyoBaseSerializable extends base_1.XyoBase {
    constructor(schema, origin) {
        super();
        this.schema = schema;
        this.srcBuffer = null;
        this.origin = origin;
    }
    getReadableName() {
        return Object.keys(this.schema).find(k => this.schema[k].id === this.schemaObjectId) || String(this.schemaObjectId);
    }
    serialize() {
        if (this.origin) {
            return this.origin;
        }
        if (this.srcBuffer) {
            return this.srcBuffer;
        }
        const serialized = (() => {
            const result = this.getData();
            if (result instanceof Buffer) {
                return serialize_1.serialize(result, this.findSchemaById(this.schemaObjectId, this.schema));
            }
            if (Array.isArray(result)) {
                const serializationResult = this.serializablesToBuffer(result);
                return serialize_1.serialize(serializationResult, this.findSchemaById(this.schemaObjectId, this.schema));
            }
            return serialize_1.serialize(result.serialize(), this.findSchemaById(this.schemaObjectId, this.schema));
        })();
        this.srcBuffer = serialized;
        return serialized;
    }
    serializeHex() {
        return this.serialize().toString('hex');
    }
    isEqual(other) {
        return this.serialize().equals(other.serialize());
    }
    readSelfSchema() {
        if (this.origin) {
            return readHeader_1.readHeader(this.origin);
        }
        return undefined;
    }
    realSchema() {
        return this.findSchemaById(this.schemaObjectId, this.schema);
    }
    serializablesToBuffer(serializables) {
        if (this.origin) {
            return this.origin;
        }
        return resolveSerializablesToBuffer_1.resolveSerializablesToBuffer(this.findSchemaById(this.schemaObjectId, this.schema), this.schema, serializables);
    }
    findSchemaById(id, schema) {
        const selfSchema = this.readSelfSchema();
        if (selfSchema) {
            return selfSchema;
        }
        return findSchemaById_1.findSchemaById(id, schema);
    }
}
exports.XyoBaseSerializable = XyoBaseSerializable;
//# sourceMappingURL=base-serializable.js.map