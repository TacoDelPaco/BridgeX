import { XyoBase } from '@xyo-network/base'
import { IXyoScan } from "@xyo-network/ble-central"
import { XyoLogger } from '@xyo-network/logger'
import { IXyoNetworkPipe, IXyoNetworkProcedureCatalogue, IXyoNetworkProvider } from '@xyo-network/network'
import { XyoNearbyDevices } from './devices/xyo-nearby-devices'
import { XyoPipeClient } from './devices/xyo-pipe-client'

export class XyoClientBluetoothNetwork implements IXyoNetworkProvider {
  private nearby = new XyoNearbyDevices()
  private nearbyDevices: XyoPipeClient[] = []
  private onClose: (() => void) | undefined
  private onPipe: ((pipe: IXyoNetworkPipe) => void) | undefined
  private scanInterval: NodeJS.Timeout | undefined
  private scanner: IXyoScan
  private tryingDevice = false

  public logger: XyoLogger = new XyoLogger(false, false)

  constructor (scanner: IXyoScan) {
    this.scanner = scanner
  }

  private scanLambda = async () => {
    const nearbyNow = this.scanner.getDevices()
    this.nearbyDevices = this.nearby.nearby(nearbyNow)

    if (!this.tryingDevice && this.nearbyDevices.length > 0) {
      const randomDevice = this.nearbyDevices[ Math.floor(Math.random() * this.nearbyDevices.length) ]
      this.tryingDevice = true
      // Running twice? shutDown() gets called after
      this.logger.info(`XyoClientBluetoothNetwork.scanLambda(): stopScan()`)
      await this.scanner.stopScan()

      randomDevice.tryCreatePipe().then(async (createdPipe) => {
        if (this.scanInterval) clearInterval(this.scanInterval)

        if (createdPipe) {
          this.resolveCallback(createdPipe)
          this.logger.info(`tryCreatePipe.resolveCallback()`)
        } else {
          const callback = this.onClose
          if (callback) {
            callback()
            return
          }

          this.logger.info(`tryCreatePipe.else{ startScan() }`)
          await this.scanner.startScan()
          this.tryingDevice = false
        }
      }).catch(async (error) => {
        const callback = this.onClose
        if (callback) {
          callback()
          return
        }

        this.logger.error(`tryCreatePipe.catch(): ${ error }`)
        await this.scanner.startScan()
        this.tryingDevice = false
      })
    }
  }

  private resolveCallback(pipe: IXyoNetworkPipe) {
    const callback = this.onPipe
    this.logger.info(`resolveCallback()`)
    if (callback) callback(pipe) // return pipe / callback(pipe)
  }

  private async shutDown() {
    const interval = this.scanInterval

    if (interval) {
      clearInterval(interval)
      this.scanInterval = undefined
    }

    this.onPipe = undefined
    this.onClose = undefined
    this.logger.info(`XyoClientBluetoothNetwork().shutDown(): stopScan()`)
    await this.scanner.stopScan() // await breaks loop or timeout without
  }

  private async waitForJobToFinish() {
    // eslint-disable-next-line no-async-promise-executor
    return new Promise<void>((resolve) => {
      this.onClose = () => {
        resolve()
      }
    })
  }

  public findWithTimeout(timeoutInMills: number): Promise<IXyoNetworkPipe | void> {
    this.tryingDevice = false

    // eslint-disable-next-line no-async-promise-executor
    return new Promise(async (resolve, reject) => {
      this.logger.info(`XyoClientBluetoothNetwork.findWithTimeout()`)

      this.scanner.startScan().then(() => {
        let hasResumed = false

        const onTimeout = async () => {
          if (!hasResumed) {
            if (this.tryingDevice) {
              this.logger.info(`findWithTimeout().onTimeout: this.tryingDevice { this.waitForJobToFinish }`)
              await this.waitForJobToFinish()
            }

            this.logger.info(`findWithTimeout().onTimeout: this.shutDown()`)
            await this.shutDown()
            resolve(undefined)
          }
        }

        XyoBase.timeout(onTimeout, timeoutInMills)

        // this async breaks things, but without it a timeout occurs
        this.onPipe = async (pipe: IXyoNetworkPipe) => {
          hasResumed = true
          try {
            this.logger.info(`onPipe().shutDown()`)
            await this.shutDown()
            resolve(pipe)
          } catch (e) {
            this.logger.info(`onPipe(): ${ e }`)
            reject(`onPipe()`)
          }
        }

        this.scanInterval = setInterval(this.scanLambda, 1_000)

      }).catch((error) => {
        this.logger.info(`Error: ${ error }`)
        reject()
      })
    })
  }

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  public find(_catalogue: IXyoNetworkProcedureCatalogue): Promise<IXyoNetworkPipe> {
    this.tryingDevice = false

    // eslint-disable-next-line no-async-promise-executor
    return new Promise(async (resolve) => {
      await this.scanner.startScan()
      this.logger.info(`XyoClientBluetoothNetwork.find()`)

      this.onPipe = (pipe: IXyoNetworkPipe) => {
        this.shutDown() // await
        resolve(pipe)
      }

      this.scanInterval = setInterval(this.scanLambda, 1_000)
    })
  }

  public stopServer(): Promise<void> {
    this.logger.info(`XyoClientBluetoothNetwork.stopServer(): stopScan()`)
    return this.scanner.stopScan()
  }
}
