"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlenoServer = void 0;
const bleno_1 = __importDefault(require("@abandonware/bleno"));
const base_1 = require("@xyo-network/base");
const logger_1 = require("@xyo-network/logger");
class BlenoServer {
    constructor() {
        this.listeners = new Map();
        this.logger = new logger_1.XyoLogger(false, false);
        this.onConnect = () => {
            for (const [, value] of this.listeners) {
                const callback = value.onConnect;
                //
                if (callback)
                    callback();
            }
        };
        this.onDisconnect = () => {
            for (const [, value] of this.listeners) {
                const callback = value.onDisconnect;
                //
                if (callback)
                    callback();
            }
        };
        bleno_1.default.on('accept', this.onConnect);
        bleno_1.default.on('disconnect', this.onDisconnect);
    }
    addListener(key, listener) {
        this.listeners.set(key, listener);
    }
    removeListener(key) {
        this.listeners.delete(key);
    }
    // default no async
    startAdvertising(adv, scanResponse) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let hasResumed = false;
                this.logger.info(`Trying to start advertising, adv: ${adv.toString('hex')}, scanResponse: ${scanResponse.toString('hex')}`);
                base_1.XyoBase.timeout(() => {
                    if (!hasResumed) {
                        hasResumed = true;
                        resolve();
                    }
                }, 15000);
                if (bleno_1.default.state == "poweredOn") {
                    bleno_1.default.startAdvertisingWithEIRData(adv, scanResponse, (error) => {
                        if (error) {
                            this.logger.info(`Error trying to startAdvertising ${error}`);
                            reject(error);
                        }
                        else {
                            if (!hasResumed) {
                                hasResumed = true;
                                resolve();
                            }
                        }
                    });
                }
                else {
                    reject(`Invalid state: ${bleno_1.default.state}`);
                }
            }));
        });
    }
    disconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.info(`BlenoServer().disconnect()`);
            bleno_1.default.disconnect();
        });
    }
    // default no async
    stopAdvertising() {
        return __awaiter(this, void 0, void 0, function* () {
            // eslint-disable-next-line no-async-promise-executor
            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
                let hasResumed = false;
                this.logger.info("Trying to stop advertiser");
                base_1.XyoBase.timeout(() => {
                    if (!hasResumed) {
                        hasResumed = true;
                        resolve();
                    }
                }, 15000);
                bleno_1.default.stopAdvertising(() => {
                    this.logger.info("Stopped advertiser");
                    if (!hasResumed) {
                        hasResumed = true;
                        resolve();
                    }
                });
            }));
        });
    }
}
exports.BlenoServer = BlenoServer;
//# sourceMappingURL=bleno-server.js.map