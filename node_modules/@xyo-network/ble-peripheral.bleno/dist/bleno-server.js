"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlenoServer = void 0;
const bleno_1 = __importDefault(require("@abandonware/bleno"));
const base_1 = require("@xyo-network/base");
const logger_1 = require("@xyo-network/logger");
class BlenoServer {
    constructor() {
        this.listeners = new Map();
        this.logger = new logger_1.XyoLogger(false, false);
        this.onConnect = () => __awaiter(this, void 0, void 0, function* () {
            var _a, e_1, _b, _c;
            this.logger.info(`BlenoServer().onConnect`);
            try {
                for (var _d = true, _e = __asyncValues(this.listeners), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const [, value] = _c;
                    const callback = value.onConnect;
                    if (callback)
                        callback();
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
        this.onDisconnect = () => __awaiter(this, void 0, void 0, function* () {
            var _g, e_2, _h, _j;
            this.logger.info(`BlenoServer().onDisconnect`);
            try {
                for (var _k = true, _l = __asyncValues(this.listeners), _m; _m = yield _l.next(), _g = _m.done, !_g; _k = true) {
                    _j = _m.value;
                    _k = false;
                    const [, value] = _j;
                    const callback = value.onDisconnect;
                    if (callback)
                        callback();
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_k && !_g && (_h = _l.return)) yield _h.call(_l);
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
        bleno_1.default.on('accept', this.onConnect);
        bleno_1.default.on('disconnect', this.onDisconnect);
    }
    addListener(key, listener) {
        this.listeners.set(key, listener);
    }
    removeListener(key) {
        this.listeners.delete(key);
    }
    // default no async
    startAdvertising(adv, scanResponse) {
        return __awaiter(this, void 0, void 0, function* () {
            // eslint-disable-next-line no-async-promise-executor
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let hasResumed = false;
                this.logger.info(`Trying to start advertising, adv: ${adv.toString('hex')}, scanResponse: ${scanResponse.toString('hex')}`);
                base_1.XyoBase.timeout(() => __awaiter(this, void 0, void 0, function* () {
                    if (!hasResumed) {
                        hasResumed = true;
                        resolve();
                    }
                }), 15000);
                if (bleno_1.default.state == "poweredOn") {
                    bleno_1.default.startAdvertisingWithEIRData(adv, scanResponse, (error) => {
                        if (error) {
                            this.logger.info(`Error trying to startAdvertising ${error}`);
                            reject(error);
                        }
                        else {
                            if (!hasResumed) {
                                hasResumed = true;
                                resolve();
                            }
                        }
                    });
                }
                else {
                    reject(`Invalid state: ${bleno_1.default.state}`);
                }
            }));
        });
    }
    disconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.info(`BlenoServer().disconnect()`);
            bleno_1.default.disconnect();
        });
    }
    // default no async
    stopAdvertising() {
        return __awaiter(this, void 0, void 0, function* () {
            // eslint-disable-next-line no-async-promise-executor
            return new Promise((resolve) => {
                let hasResumed = false;
                this.logger.info("Trying to stop advertiser");
                base_1.XyoBase.timeout(() => {
                    this.logger.info(`BlenoServer().stopAdvertising().timeout()`);
                    if (!hasResumed) {
                        hasResumed = true;
                        resolve();
                    }
                }, 15000);
                bleno_1.default.stopAdvertising(() => {
                    this.logger.info("Stopped advertiser");
                    if (!hasResumed) {
                        hasResumed = true;
                        resolve();
                    }
                });
            });
        });
    }
}
exports.BlenoServer = BlenoServer;
//# sourceMappingURL=bleno-server.js.map