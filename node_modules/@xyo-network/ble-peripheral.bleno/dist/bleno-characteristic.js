"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlenoCharacteristic = void 0;
const bleno_1 = require("@abandonware/bleno");
const logger_1 = require("@xyo-network/logger");
const bleno_descriptor_1 = require("./bleno-descriptor");
// uuid: string;
//         properties?: ReadonlyArray<Property> | null;
//         secure?: ReadonlyArray<Property> | null;
//         value?: Buffer | null;
//         descriptors?: ReadonlyArray<Descriptor> | null;
//         onIndicate?: (() => void) | null;
//         onNotify?: (() => void) | null;
//         onReadRequest?: ((
//             offset: number,
//             callback: (result: number, data?: Buffer) => void
//         ) => void) | null;
//         onSubscribe?: ((maxValueSize: number, updateValueCallback: any) => void) | null;
//         onUnsubscribe?: (() => void) | null;
//         onWriteRequest?: ((
//             data: Buffer,
//             offset: number,
//             withoutResponse: boolean,
//             callback: (result: number) => void
//         ) => void) | null;
class BlenoCharacteristic {
    get uuid() {
        return this.characteristic.uuid;
    }
    get permissions() {
        // todo find way to get permissions
        return [];
    }
    // value: (Buffer | undefined) = Buffer.alloc(2)
    get value() {
        const value = this.characteristic.value;
        if (value) {
            return value;
        }
        return undefined;
    }
    set value(value) {
        if (value) {
            this.characteristic.value = value;
        }
        else {
            this.characteristic.value = null;
        }
    }
    get descriptors() {
        const descs = [];
        this.characteristic.descriptors.forEach((desc) => {
            descs.push(new bleno_descriptor_1.BlenoDescriptor(desc));
        });
        return descs;
    }
    constructor(uuid, properties) {
        this.logger = new logger_1.XyoLogger(false, false);
        this.listenersMap = new Map();
        this.onSubscribe = (_maxValueSize, updateValueCallback) => __awaiter(this, void 0, void 0, function* () {
            var _a, e_1, _b, _c;
            this.logger.info("onSubscribe");
            this.notifyChangedCallback = updateValueCallback;
            try {
                for (var _d = true, _e = __asyncValues(this.listenersMap), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const [, value] = _c;
                    const callback = value.onSubscribe;
                    if (callback)
                        callback();
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
        this.onUnsubscribe = () => __awaiter(this, void 0, void 0, function* () {
            var _g, e_2, _h, _j;
            this.logger.info("onUnsubscribe");
            this.notifyChangedCallback = undefined;
            try {
                for (var _k = true, _l = __asyncValues(this.listenersMap), _m; _m = yield _l.next(), _g = _m.done, !_g; _k = true) {
                    _j = _m.value;
                    _k = false;
                    const [, value] = _j;
                    const callback = value.onUnsubscribe;
                    if (callback)
                        callback();
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_k && !_g && (_h = _l.return)) yield _h.call(_l);
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
        this.onWriteRequest = (data, _offset, _withoutResponse, callback) => __awaiter(this, void 0, void 0, function* () {
            var _o, e_3, _p, _q;
            this.logger.info("onWriteRequest");
            try {
                for (var _r = true, _s = __asyncValues(this.listenersMap), _t; _t = yield _s.next(), _o = _t.done, !_o; _r = true) {
                    _q = _t.value;
                    _r = false;
                    const [, value] = _q;
                    const handle = value.onWrite;
                    if (handle) {
                        const canWrite = yield handle(data);
                        if (canWrite) {
                            this.characteristic.value = data;
                            callback(bleno_1.Characteristic.RESULT_SUCCESS);
                        }
                        else {
                            callback(bleno_1.Characteristic.RESULT_UNLIKELY_ERROR);
                        }
                        return;
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_r && !_o && (_p = _s.return)) yield _p.call(_s);
                }
                finally { if (e_3) throw e_3.error; }
            }
            callback(bleno_1.Characteristic.RESULT_UNLIKELY_ERROR);
        });
        this.onReadRequest = (_offset, callback) => __awaiter(this, void 0, void 0, function* () {
            var _u, e_4, _v, _w;
            this.logger.info("onReadRequest");
            try {
                for (var _x = true, _y = __asyncValues(this.listenersMap), _z; _z = yield _y.next(), _u = _z.done, !_u; _x = true) {
                    _w = _z.value;
                    _x = false;
                    const [, value] = _w;
                    const handle = value.onRead;
                    if (handle)
                        handle();
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (!_x && !_u && (_v = _y.return)) yield _v.call(_y);
                }
                finally { if (e_4) throw e_4.error; }
            }
            const value = this.characteristic.value;
            if (value) {
                callback(bleno_1.Characteristic.RESULT_SUCCESS, value);
                return;
            }
            callback(bleno_1.Characteristic.RESULT_SUCCESS);
        });
        const options = {
            uuid,
            properties: properties,
            onWriteRequest: this.onWriteRequest,
            onSubscribe: this.onSubscribe,
            onReadRequest: this.onReadRequest,
            onUnsubscribe: this.onUnsubscribe
        };
        this.characteristic = new bleno_1.Characteristic(options);
    }
    notifyChanged() {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.info("notifyChanged");
            const value = this.value;
            if (this.notifyChangedCallback && value) {
                this.notifyChangedCallback(value);
            }
        });
    }
    addListener(key, listener) {
        return __awaiter(this, void 0, void 0, function* () {
            this.listenersMap.set(key, listener);
        });
    }
    removeListener(key) {
        return __awaiter(this, void 0, void 0, function* () {
            this.listenersMap.delete(key);
        });
    }
}
exports.BlenoCharacteristic = BlenoCharacteristic;
//# sourceMappingURL=bleno-characteristic.js.map