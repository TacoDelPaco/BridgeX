"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlenoCharacteristic = void 0;
const bleno_1 = require("@abandonware/bleno");
const logger_1 = require("@xyo-network/logger");
const bleno_descriptor_1 = require("./bleno-descriptor");
// uuid: string;
//         properties?: ReadonlyArray<Property> | null;
//         secure?: ReadonlyArray<Property> | null;
//         value?: Buffer | null;
//         descriptors?: ReadonlyArray<Descriptor> | null;
//         onIndicate?: (() => void) | null;
//         onNotify?: (() => void) | null;
//         onReadRequest?: ((
//             offset: number,
//             callback: (result: number, data?: Buffer) => void
//         ) => void) | null;
//         onSubscribe?: ((maxValueSize: number, updateValueCallback: any) => void) | null;
//         onUnsubscribe?: (() => void) | null;
//         onWriteRequest?: ((
//             data: Buffer,
//             offset: number,
//             withoutResponse: boolean,
//             callback: (result: number) => void
//         ) => void) | null;
class BlenoCharacteristic {
    get uuid() {
        return this.characteristic.uuid;
    }
    get permissions() {
        // todo find way to get permissions
        return [];
    }
    // value: (Buffer | undefined) = Buffer.alloc(2)
    get value() {
        const value = this.characteristic.value;
        if (value) {
            return value;
        }
        return undefined;
    }
    set value(value) {
        if (value) {
            this.characteristic.value = value;
        }
        else {
            this.characteristic.value = null;
        }
    }
    get descriptors() {
        const descs = [];
        this.characteristic.descriptors.forEach((desc) => {
            descs.push(new bleno_descriptor_1.BlenoDescriptor(desc));
        });
        return descs;
    }
    constructor(uuid, properties) {
        this.logger = new logger_1.XyoLogger(false, false);
        this.listenersMap = new Map();
        this.onSubscribe = (_maxValueSize, updateValueCallback) => {
            this.logger.info("onSubscribe");
            this.notifyChangedCallback = updateValueCallback;
            for (const [_, value] of this.listenersMap) {
                const callback = value.onSubscribe;
                if (callback) {
                    callback();
                }
            }
        };
        this.onUnsubscribe = () => {
            this.logger.info("onUnsubscribe");
            this.notifyChangedCallback = undefined;
            for (const [_, value] of this.listenersMap) {
                const callback = value.onUnsubscribe;
                if (callback) {
                    callback();
                }
            }
        };
        this.onWriteRequest = (data, _offset, _withoutResponse, callback) => __awaiter(this, void 0, void 0, function* () {
            this.logger.info("onWriteRequest");
            for (const [_, value] of this.listenersMap) {
                const handle = value.onWrite;
                if (handle) {
                    const canWrite = yield handle(data);
                    if (canWrite) {
                        this.characteristic.value = data;
                        callback(bleno_1.Characteristic.RESULT_SUCCESS);
                    }
                    else {
                        callback(bleno_1.Characteristic.RESULT_UNLIKELY_ERROR);
                    }
                    return;
                }
            }
            callback(bleno_1.Characteristic.RESULT_UNLIKELY_ERROR);
        });
        this.onReadRequest = (_offset, callback) => {
            this.logger.info("onReadRequest");
            for (const [_, value] of this.listenersMap) {
                const handle = value.onRead;
                if (handle) {
                    handle();
                }
            }
            const value = this.characteristic.value;
            if (value) {
                callback(bleno_1.Characteristic.RESULT_SUCCESS, value);
                return;
            }
            callback(bleno_1.Characteristic.RESULT_SUCCESS);
        };
        const options = {
            uuid,
            properties: properties,
            onWriteRequest: this.onWriteRequest,
            onSubscribe: this.onSubscribe,
            onReadRequest: this.onReadRequest,
            onUnsubscribe: this.onUnsubscribe
        };
        this.characteristic = new bleno_1.Characteristic(options);
    }
    notifyChanged() {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.info("notifyChanged");
            const value = this.value;
            if (this.notifyChangedCallback && value) {
                this.notifyChangedCallback(value);
            }
        });
    }
    addListener(key, listener) {
        this.listenersMap.set(key, listener);
    }
    removeListener(key) {
        this.listenersMap.delete(key);
    }
}
exports.BlenoCharacteristic = BlenoCharacteristic;
//# sourceMappingURL=bleno-characteristic.js.map