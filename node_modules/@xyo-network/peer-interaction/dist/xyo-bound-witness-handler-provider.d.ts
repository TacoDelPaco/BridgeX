import { XyoBase } from '@xyo-network/base';
import { IXyoBoundWitness } from '@xyo-network/bound-witness';
import { CatalogueItem, IXyoNetworkPipe } from '@xyo-network/network';
import { IXyoOriginChainRepository } from '@xyo-network/origin-chain';
import { IXyoBoundWitnessHandlerProvider, IXyoBoundWitnessInteractionFactory, IXyoBoundWitnessPayloadProvider, IXyoBoundWitnessSuccessListener } from './@types';
export declare class XyoBoundWitnessHandlerProvider extends XyoBase implements IXyoBoundWitnessHandlerProvider {
    private readonly originStateRepository;
    private readonly boundWitnessPayloadProvider;
    private readonly boundWitnessSuccessListener;
    private readonly boundWitnessInteractionFactory;
    constructor(originStateRepository: IXyoOriginChainRepository, boundWitnessPayloadProvider: IXyoBoundWitnessPayloadProvider, boundWitnessSuccessListener: IXyoBoundWitnessSuccessListener, boundWitnessInteractionFactory: IXyoBoundWitnessInteractionFactory);
    handle(networkPipe: IXyoNetworkPipe, didInit: boolean, choice: CatalogueItem): Promise<IXyoBoundWitness>;
    private tryGetMutex;
}
//# sourceMappingURL=xyo-bound-witness-handler-provider.d.ts.map