"use strict";
/*
 * @Author: XY | The Findables Company <ryanxyo>
 * @Date:   Tuesday, 20th November 2018 4:43:55 pm
 * @Email:  developer@xyfindables.com
 * @Filename: xyo-bound-witness-handler-provider.ts
 * @Last modified by: ryanxyo
 * @Last modified time: Wednesday, 6th March 2019 4:42:51 pm
 * @License: All Rights Reserved
 * @Copyright: Copyright XY | The Findables Company
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = require("@xyo-network/base");
const errors_1 = require("@xyo-network/errors");
class XyoBoundWitnessHandlerProvider extends base_1.XyoBase {
    constructor(originStateRepository, boundWitnessPayloadProvider, boundWitnessSuccessListener, boundWitnessInteractionFactory) {
        super();
        this.originStateRepository = originStateRepository;
        this.boundWitnessPayloadProvider = boundWitnessPayloadProvider;
        this.boundWitnessSuccessListener = boundWitnessSuccessListener;
        this.boundWitnessInteractionFactory = boundWitnessInteractionFactory;
    }
    handle(networkPipe, didInit, choice) {
        return __awaiter(this, void 0, void 0, function* () {
            const mutex = yield this.tryGetMutex(0);
            try {
                const [payload, signers] = yield Promise.all([
                    this.boundWitnessPayloadProvider.getPayload(this.originStateRepository, choice),
                    this.originStateRepository.getSigners()
                ]);
                const interaction = this.boundWitnessInteractionFactory.newInstance(signers, payload);
                const boundWitness = yield interaction.run(networkPipe, didInit);
                yield this.boundWitnessSuccessListener.onBoundWitnessSuccess(boundWitness, mutex, choice);
                return boundWitness;
            }
            finally {
                yield this.originStateRepository.releaseMutex(mutex);
            }
        });
    }
    tryGetMutex(currentTry) {
        return __awaiter(this, void 0, void 0, function* () {
            const mutex = yield this.originStateRepository.acquireMutex();
            if (mutex)
                return mutex;
            if (currentTry === 3)
                throw new errors_1.XyoError(`Could not acquire mutex for origin chain`);
            return new Promise((resolve, reject) => {
                base_1.XyoBase.timeout(() => {
                    this.tryGetMutex(currentTry + 1).then(resolve).catch(reject);
                }, 100 * (currentTry + 1)); // linear back-off
            });
        });
    }
}
exports.XyoBoundWitnessHandlerProvider = XyoBoundWitnessHandlerProvider;
//# sourceMappingURL=xyo-bound-witness-handler-provider.js.map