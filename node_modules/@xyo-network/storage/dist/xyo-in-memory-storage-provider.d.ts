/// <reference types="node" />
import { XyoError } from '@xyo-network/errors';
import { IXyoStorageProvider } from './@types';
/**
 * The In-Memory Storage Provider implements the IStorageProvider
 * interface. It only provide persistance at the process level and
 * does not persist beyond the lifetime of the application
 */
export declare class XyoInMemoryStorageProvider implements IXyoStorageProvider {
    readonly data: {
        [s: string]: Buffer;
    };
    constructor(data?: {
        [s: string]: Buffer;
    });
    /**
     * Attempts to save value `value` for key `key`
     *
     * @param key The location identifer
     * @param value The value which to store
     * @returns Will return if the value is stored successfully
     */
    write(key: Buffer, value: Buffer): Promise<XyoError | undefined>;
    /**
     * Attempts to retrieve a value corresponding to the location identifier `key`
     * @param key The location identifer
     * @return Will return the value if it can be located, `undefined` otherwise
     */
    read(key: Buffer): Promise<Buffer | undefined>;
    /**
     * Returns a list of the all they `keys` or location identifiers in storage
     */
    getAllKeys(): Promise<Buffer[]>;
    /**
     * Will attempt to remove a value for location identifier `key`
     * @param key
     * @return Will return true if the key existed and was removed successfully, false otherwise
     */
    delete(key: Buffer): Promise<void>;
    /**
     * Queries the storage provider as to whether there is a key/value
     * in storage
     * @param key The location identifier to query against
     * @returns Returns true if value exists for key `key`
     */
    containsKey(key: Buffer): Promise<boolean>;
}
//# sourceMappingURL=xyo-in-memory-storage-provider.d.ts.map