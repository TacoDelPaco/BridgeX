"use strict";
/*
 * @Author: XY | The Findables Company <ryanxyo>
 * @Date:   Tuesday, 20th November 2018 1:11:43 pm
 * @Email:  developer@xyfindables.com
 * @Filename: xyo-in-memory-storage-provider.ts
 * @Last modified by: ryanxyo
 * @Last modified time: Friday, 22nd February 2019 2:18:02 pm
 * @License: All Rights Reserved
 * @Copyright: Copyright XY | The Findables Company
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * The In-Memory Storage Provider implements the IStorageProvider
 * interface. It only provide persistance at the process level and
 * does not persist beyond the lifetime of the application
 */
class XyoInMemoryStorageProvider {
    constructor(data = {}) {
        this.data = data;
    }
    /**
     * Attempts to save value `value` for key `key`
     *
     * @param key The location identifer
     * @param value The value which to store
     * @returns Will return if the value is stored successfully
     */
    write(key, value) {
        return __awaiter(this, void 0, void 0, function* () {
            this.data[key.toString()] = value;
            return;
        });
    }
    /**
     * Attempts to retrieve a value corresponding to the location identifier `key`
     * @param key The location identifer
     * @return Will return the value if it can be located, `undefined` otherwise
     */
    read(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = this.data[key.toString()];
            if (!result) {
                return undefined;
            }
            return result;
        });
    }
    /**
     * Returns a list of the all they `keys` or location identifiers in storage
     */
    getAllKeys() {
        return __awaiter(this, void 0, void 0, function* () {
            return Object.keys(this.data).map((key) => {
                return Buffer.from(key);
            });
        });
    }
    /**
     * Will attempt to remove a value for location identifier `key`
     * @param key
     * @return Will return true if the key existed and was removed successfully, false otherwise
     */
    delete(key) {
        return __awaiter(this, void 0, void 0, function* () {
            delete this.data[key.toString()];
        });
    }
    /**
     * Queries the storage provider as to whether there is a key/value
     * in storage
     * @param key The location identifier to query against
     * @returns Returns true if value exists for key `key`
     */
    containsKey(key) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.data[key.toString()] !== undefined;
        });
    }
}
exports.XyoInMemoryStorageProvider = XyoInMemoryStorageProvider;
//# sourceMappingURL=xyo-in-memory-storage-provider.js.map