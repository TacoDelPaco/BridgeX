"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.XyoLocalFileStorageProvider = void 0;
const xyo_in_memory_storage_provider_1 = require("./xyo-in-memory-storage-provider");
const fs_1 = require("fs");
const base_1 = require("@xyo-network/base");
/**
 * Providers a very simple StorageProvider implementation over a file-system.
 */
class XyoLocalFileStorageProvider extends base_1.XyoBase {
    /**
     * Creates an instance of XyoLocalFileStorageProvider.
     * @param {string} dataFile The file that should hold the data
     * @memberof XyoLocalFileStorageProvider
     */
    constructor(dataFile) {
        super();
        this.dataFile = dataFile;
        this.delegate = new xyo_in_memory_storage_provider_1.XyoInMemoryStorageProvider(getOrCreateDb(dataFile));
    }
    read(key) {
        return this.delegate.read(key);
    }
    getAllKeys() {
        return this.delegate.getAllKeys();
    }
    containsKey(key) {
        return this.delegate.containsKey(key);
    }
    write(key, value) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.delegate.write(key, value);
            yield persist(this.dataFile, this.delegate.data);
            return;
        });
    }
    delete(key) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.delegate.delete(key);
            yield persist(this.dataFile, this.delegate.data);
        });
    }
}
exports.XyoLocalFileStorageProvider = XyoLocalFileStorageProvider;
function getOrCreateDb(dataFile) {
    const exists = (0, fs_1.existsSync)(dataFile);
    if (exists) {
        const fileContents = (0, fs_1.readFileSync)(dataFile, 'utf8');
        const json = JSON.parse(fileContents);
        return Object.keys(json).reduce((memo, k) => {
            memo[k] = Buffer.from(json[k]);
            return memo;
        }, {});
    }
    (0, fs_1.writeFileSync)(dataFile, base_1.XyoBase.stringify({}), 'utf8');
    return {};
}
function persist(dataFile, data) {
    const transform = Object.keys(data).reduce((memo, key) => {
        memo[key] = data[key].toString();
        return memo;
    }, {});
    (0, fs_1.writeFileSync)(dataFile, base_1.XyoBase.stringify(transform), 'utf8');
}
//# sourceMappingURL=xyo-local-file-storage-provider.js.map