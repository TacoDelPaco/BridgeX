"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.XyoBridgeConfigurationEndpoint = void 0;
var origin_chain_1 = require("@xyo-network/origin-chain");
var bs58_1 = require("bs58");
var PAYMENT_KEY_KEY = "PAYMENT_KEY_KEY";
var npmPackage = require("../package.json");
var XyoBridgeConfigurationEndpoint = /** @class */ (function () {
    function XyoBridgeConfigurationEndpoint(passwordStore, archivistQueue, archivistStore, chainRepo, store, bridge) {
        var _this = this;
        this.setDefaultArchivist = function (id) {
            return _this.archivistStore.setDefaultArchivistForBridge(id);
        };
        this.getDefaultArchivist = function () {
            return _this.archivistStore.getDefaultArchivistForBridge();
        };
        this.getAttachedArchivists = function () {
            return _this.archivistStore.getAttachedArchivistsForBridge();
        };
        this.attachArchivist = function (dns, port) {
            return _this.archivistStore.attachArchivistToBridge(dns, port);
        };
        this.detachArchivist = function (id) {
            return _this.archivistStore.detachArchivistForBridge(id);
        };
        this.updatePin = function (oldPassword, newPassword) { return __awaiter(_this, void 0, void 0, function () {
            var oldPasswordBuffer, newPasswordBuffer, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        oldPasswordBuffer = Buffer.from(oldPassword);
                        newPasswordBuffer = Buffer.from(newPassword);
                        return [4 /*yield*/, this.passwordStore.changePassword(oldPasswordBuffer, newPasswordBuffer)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result];
                }
            });
        }); };
        this.isConfigured = function () { return __awaiter(_this, void 0, void 0, function () {
            var passwordNow, passwordDefault;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.passwordStore.getPassword()];
                    case 1:
                        passwordNow = _a.sent();
                        return [4 /*yield*/, this.passwordStore.hashPassword((Buffer.from("xyxyo")))];
                    case 2:
                        passwordDefault = _a.sent();
                        return [2 /*return*/, !!Buffer.compare(passwordNow, passwordDefault)];
                }
            });
        }); };
        this.paymentKeyHeuristicsCreator = function (key) {
            return function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, key];
                });
            }); };
        };
        // the key must be a hex value
        this.setPaymentKey = function (key) { return __awaiter(_this, void 0, void 0, function () {
            var encodedKey, paymentKey, provider;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        encodedKey = Buffer.from(key, "hex");
                        paymentKey = new origin_chain_1.XyoPaymentKey(encodedKey);
                        provider = this.paymentKeyHeuristicsCreator(paymentKey);
                        this.bridge.payloadProvider.removeHeuristicsProvider("PAYMENT_KEY", true);
                        this.bridge.payloadProvider.addHeuristicsProvider("PAYMENT_KEY", true, provider);
                        return [4 /*yield*/, this.storePaymentKey(encodedKey)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, key];
                }
            });
        }); };
        this.getPaymentKey = function () { return __awaiter(_this, void 0, void 0, function () {
            var key;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getPaymentKeyFromDisk()];
                    case 1:
                        key = _a.sent();
                        if (key) {
                            return [2 /*return*/, key.toString("hex")];
                        }
                        return [2 /*return*/, "No key set"];
                }
            });
        }); };
        this.getPublicKey = function () { return __awaiter(_this, void 0, void 0, function () {
            var signer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.chainRepo.getGenesisSigner()];
                    case 1:
                        signer = _a.sent();
                        if (signer) {
                            return [2 /*return*/, bs58_1.default.encode(signer.publicKey.serialize())];
                        }
                        return [2 /*return*/, ""];
                }
            });
        }); };
        this.verifyPin = function (pin) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.passwordStore.hashAndCheckRightPassword(Buffer.from(pin))];
            });
        }); };
        this.storePaymentKey = function (paymentKey) { return __awaiter(_this, void 0, void 0, function () {
            var key;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = Buffer.from(PAYMENT_KEY_KEY);
                        return [4 /*yield*/, this.store.write(key, paymentKey)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        this.getPaymentKeyFromDisk = function () { return __awaiter(_this, void 0, void 0, function () {
            var key, hasKey;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = Buffer.from(PAYMENT_KEY_KEY);
                        return [4 /*yield*/, this.store.containsKey(key)];
                    case 1:
                        hasKey = _a.sent();
                        if (hasKey) {
                            return [2 /*return*/, this.store.read(key)];
                        }
                        return [2 /*return*/, undefined];
                }
            });
        }); };
        this.passwordStore = passwordStore;
        this.archivistQueue = archivistQueue;
        this.archivistStore = archivistStore;
        this.chainRepo = chainRepo;
        this.store = store;
        this.bridge = bridge;
    }
    XyoBridgeConfigurationEndpoint.prototype.forceUpdate = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, execAsync('sudo apt-get update')];
                    case 1:
                        _a.sent();
                        execAsync('sudo unattended-upgrades')
                            .then(function (d) { return console.log(d); })
                            .catch(function (e) { return console.log(e); });
                        return [2 /*return*/, true];
                }
            });
        });
    };
    XyoBridgeConfigurationEndpoint.prototype.checkForUpdates = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, execAsync('sudo apt-get update')];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, true];
                }
            });
        });
    };
    XyoBridgeConfigurationEndpoint.prototype.factoryReset = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, execAsync('sudo rm -rf /var/opt/bridge-store && sudo reboot')];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    XyoBridgeConfigurationEndpoint.prototype.lastResort = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                execAsync("sudo sh -c 'curl -L https://s3.amazonaws.com/xyo-bridge-images/last-resort.sh | sh'")
                    .then(function (d) { return console.log('Last resort', d); })
                    .catch(function (e) { return console.log('ERROR', e); });
                return [2 /*return*/, true];
            });
        });
    };
    XyoBridgeConfigurationEndpoint.prototype.tailLog = function (pathname, n) {
        if (n === void 0) { n = 5; }
        return __awaiter(this, void 0, void 0, function () {
            var stdOut, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, execAsync("tail -".concat(n, " ").concat(pathname))];
                    case 1:
                        stdOut = _a.sent();
                        return [2 /*return*/, stdOut];
                    case 2:
                        e_1 = _a.sent();
                        return [2 /*return*/, e_1.message];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    XyoBridgeConfigurationEndpoint.prototype.getAptPackageVersion = function () {
        return __awaiter(this, void 0, void 0, function () {
            var updateOut, latest, current;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, execAsync('sudo apt policy xyo-bridge')];
                    case 1:
                        updateOut = _a.sent();
                        latest = (updateOut.match(/Candidate: (.*)/) || ['', ''])[0];
                        current = (updateOut.match(/Installed: (.*)/) || ['', ''])[0];
                        return [2 /*return*/, {
                                latest: latest || '',
                                current: current || ''
                            }];
                }
            });
        });
    };
    XyoBridgeConfigurationEndpoint.prototype.getNpmPackageVersion = function () {
        return __awaiter(this, void 0, void 0, function () {
            var updateOut, _a, _b, versions, latest, current;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _b = (_a = JSON).parse;
                        return [4 /*yield*/, execAsync('npm show @xyo-network/bridge.pi time --json')];
                    case 1:
                        updateOut = _b.apply(_a, [_c.sent()]);
                        versions = Object.keys(updateOut);
                        latest = versions.length ? versions[versions.length - 1] : '';
                        current = npmPackage.version;
                        return [2 /*return*/, { latest: latest, current: current }];
                }
            });
        });
    };
    return XyoBridgeConfigurationEndpoint;
}());
exports.XyoBridgeConfigurationEndpoint = XyoBridgeConfigurationEndpoint;
var execAsync = function (cmd) {
    var exec = require('child_process').exec;
    return new Promise(function (res, rej) {
        exec(cmd, { maxBuffer: 1024 * 1000 }, function (e, stdout, _stderr) {
            if (e)
                rej(e);
            else
                res(stdout);
        });
    });
};
//# sourceMappingURL=xyo-configuration-endpoints.js.map