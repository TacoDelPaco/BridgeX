import { IArchivist } from '@xyo-network/bridge-configuration'
// import { startBleServices, NetworkService } from '@xyo-network/bridge-ble'
import { IXyoTCPNetworkAddress } from '@xyo-network/network.tcp'
import { IXyoStorageProvider } from '@xyo-network/storage'
import { XyoBridgeArchivistQueue } from './xyo-bridge-archivist-queue'

const ARCHIVIST_STORAGE_KEY = "ARCHIVIST_STORAGE_KEY"

export class XyoArchivistStore {
    archivistQueue: XyoBridgeArchivistQueue
    store: IXyoStorageProvider

    constructor (archivistQueue: XyoBridgeArchivistQueue, store: IXyoStorageProvider) {
        this.archivistQueue = archivistQueue
        this.store = store
    }

    getAttachedArchivistsForBridge = async (): Promise<IArchivist[]> => {
        const returnArchivists: IArchivist[] = []
        const allArchivists = this.archivistQueue.activeArchivists
      
        for (const archivist of allArchivists) {
          const archivistId = `${archivist.host}:${archivist.port}`
      
          returnArchivists.push({
            port: archivist.port,
            dns: archivist.host,
            id: archivistId,
          })
        }
        return returnArchivists
      }

    detachArchivistForBridge = async (id: string): Promise<IArchivist> => {
        const allArchivists = this.archivistQueue.activeArchivists
      
        for (const archivist of allArchivists) {
          const archivistId = `${archivist.host}:${archivist.port}`
      
          if (id === archivistId) {
            const archivistToRemove: IArchivist = {
              port: archivist.port,
              dns: archivist.host,
              id: archivistId,
            }
      
            await this.removeArchivist(archivist)
      
            return archivistToRemove
          }
        }
      
        throw Error("No archivist found!")
      }
      
    attachArchivistToBridge = async (dns: string, port: number): Promise<IArchivist> => {
        const archivistToAdd: IArchivist = {
          port,
          dns,
          id: `${dns}:${port}`,
        }
      
        const tcp: IXyoTCPNetworkAddress = {
          port,
          host: dns,
        }
      
        await this.addArchivist(tcp)
      
        return archivistToAdd
      }

    getDefaultArchivistForBridge = async (): Promise<IArchivist> => {
        if (this.archivistQueue.activeArchivists.length > 0) {
          return this.archivistQueue.activeArchivists[0]
        }
      
        throw Error("No archivists!")
      }
      
    setDefaultArchivistForBridge = async (id: string): Promise<IArchivist> => {
        const allArchivists = this.archivistQueue.activeArchivists
      
        for (const archivist of allArchivists) {
          const archivistId = `${archivist.host}:${archivist.port}`
      
          if (id === archivistId) {
            const archivistToRemove: IArchivist = {
              port: archivist.port,
              dns: archivist.host,
              id: archivistId,
            }
      
            await this.removeArchivist(archivist)
            this.archivistQueue.activeArchivists.unshift(archivist)
            await this.storeArchivists(this.archivistQueue.activeArchivists)
      
            return archivistToRemove
          }
        }
      
        throw Error("No archivist found!")
      }


    addArchivist = async (archivist: IXyoTCPNetworkAddress) => {
        this.archivistQueue.activeArchivists.push(archivist)
        await this.storeArchivists(this.archivistQueue.activeArchivists)
      }
      
    removeArchivist = async (archivistToRemove: IXyoTCPNetworkAddress) => {
        const newArchivists: IXyoTCPNetworkAddress[] = []
      
        this.archivistQueue.activeArchivists.forEach((archivist) => {
          if (archivist.port !== archivistToRemove.port && archivistToRemove.host !== archivist.host) {
            newArchivists.push(archivist)
          }
        })
      
        this.archivistQueue.activeArchivists = newArchivists
      
        await this.storeArchivists(newArchivists)
      }
      
    restoreArchivists = async (constArchivists: IXyoTCPNetworkAddress[]): Promise<IXyoTCPNetworkAddress[]> => {
        const archivistsInStorage = await this.getArchivists()
        return archivistsInStorage.concat(constArchivists)
      }
      
      
    storeArchivists = async (archivists: IXyoTCPNetworkAddress[]) => {
        const bufferArchivists = Buffer.from(JSON.stringify(archivists))
        const key = Buffer.from(ARCHIVIST_STORAGE_KEY)
        await this.store.write(key, bufferArchivists)
      }
      
    getArchivists = async (): Promise<IXyoTCPNetworkAddress[]> => {
        const key = Buffer.from(ARCHIVIST_STORAGE_KEY)
        const hasKey = await this.store.containsKey(key)
      
        if (hasKey) {
          const bufferArchivists = await this.store.read(key)
      
          if (bufferArchivists) {
            const stringArchivists = bufferArchivists.toString('utf8')
            return JSON.parse(stringArchivists) as IXyoTCPNetworkAddress[]
          }
        }
      
        return [] as IXyoTCPNetworkAddress[]
      }

}
