"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.XyoArchivistStore = void 0;
var ARCHIVIST_STORAGE_KEY = "ARCHIVIST_STORAGE_KEY";
var XyoArchivistStore = /** @class */ (function () {
    function XyoArchivistStore(archivistQueue, store) {
        var _this = this;
        this.getAttachedArchivistsForBridge = function () { return __awaiter(_this, void 0, void 0, function () {
            var returnArchivists, allArchivists, _i, allArchivists_1, archivist, archivistId;
            return __generator(this, function (_a) {
                returnArchivists = [];
                allArchivists = this.archivistQueue.activeArchivists;
                for (_i = 0, allArchivists_1 = allArchivists; _i < allArchivists_1.length; _i++) {
                    archivist = allArchivists_1[_i];
                    archivistId = "".concat(archivist.host, ":").concat(archivist.port);
                    returnArchivists.push({
                        port: archivist.port,
                        dns: archivist.host,
                        id: archivistId,
                    });
                }
                return [2 /*return*/, returnArchivists];
            });
        }); };
        this.detachArchivistForBridge = function (id) { return __awaiter(_this, void 0, void 0, function () {
            var allArchivists, _i, allArchivists_2, archivist, archivistId, archivistToRemove;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        allArchivists = this.archivistQueue.activeArchivists;
                        _i = 0, allArchivists_2 = allArchivists;
                        _a.label = 1;
                    case 1:
                        if (!(_i < allArchivists_2.length)) return [3 /*break*/, 4];
                        archivist = allArchivists_2[_i];
                        archivistId = "".concat(archivist.host, ":").concat(archivist.port);
                        if (!(id === archivistId)) return [3 /*break*/, 3];
                        archivistToRemove = {
                            port: archivist.port,
                            dns: archivist.host,
                            id: archivistId,
                        };
                        return [4 /*yield*/, this.removeArchivist(archivist)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, archivistToRemove];
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: throw Error("No archivist found!");
                }
            });
        }); };
        this.attachArchivistToBridge = function (dns, port) { return __awaiter(_this, void 0, void 0, function () {
            var archivistToAdd, tcp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        archivistToAdd = {
                            port: port,
                            dns: dns,
                            id: "".concat(dns, ":").concat(port),
                        };
                        tcp = {
                            port: port,
                            host: dns,
                        };
                        return [4 /*yield*/, this.addArchivist(tcp)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, archivistToAdd];
                }
            });
        }); };
        this.getDefaultArchivistForBridge = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.archivistQueue.activeArchivists.length > 0) {
                    return [2 /*return*/, this.archivistQueue.activeArchivists[0]];
                }
                throw Error("No archivists!");
            });
        }); };
        this.setDefaultArchivistForBridge = function (id) { return __awaiter(_this, void 0, void 0, function () {
            var allArchivists, _i, allArchivists_3, archivist, archivistId, archivistToRemove;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        allArchivists = this.archivistQueue.activeArchivists;
                        _i = 0, allArchivists_3 = allArchivists;
                        _a.label = 1;
                    case 1:
                        if (!(_i < allArchivists_3.length)) return [3 /*break*/, 5];
                        archivist = allArchivists_3[_i];
                        archivistId = "".concat(archivist.host, ":").concat(archivist.port);
                        if (!(id === archivistId)) return [3 /*break*/, 4];
                        archivistToRemove = {
                            port: archivist.port,
                            dns: archivist.host,
                            id: archivistId,
                        };
                        return [4 /*yield*/, this.removeArchivist(archivist)];
                    case 2:
                        _a.sent();
                        this.archivistQueue.activeArchivists.unshift(archivist);
                        return [4 /*yield*/, this.storeArchivists(this.archivistQueue.activeArchivists)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, archivistToRemove];
                    case 4:
                        _i++;
                        return [3 /*break*/, 1];
                    case 5: throw Error("No archivist found!");
                }
            });
        }); };
        this.addArchivist = function (archivist) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.archivistQueue.activeArchivists.push(archivist);
                        return [4 /*yield*/, this.storeArchivists(this.archivistQueue.activeArchivists)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        this.removeArchivist = function (archivistToRemove) { return __awaiter(_this, void 0, void 0, function () {
            var newArchivists;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        newArchivists = [];
                        this.archivistQueue.activeArchivists.forEach(function (archivist) {
                            if (archivist.port !== archivistToRemove.port && archivistToRemove.host !== archivist.host) {
                                newArchivists.push(archivist);
                            }
                        });
                        this.archivistQueue.activeArchivists = newArchivists;
                        return [4 /*yield*/, this.storeArchivists(newArchivists)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        this.restoreArchivists = function (constArchivists) { return __awaiter(_this, void 0, void 0, function () {
            var archivistsInStorage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getArchivists()];
                    case 1:
                        archivistsInStorage = _a.sent();
                        return [2 /*return*/, archivistsInStorage.concat(constArchivists)];
                }
            });
        }); };
        this.storeArchivists = function (archivists) { return __awaiter(_this, void 0, void 0, function () {
            var bufferArchivists, key;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        bufferArchivists = Buffer.from(JSON.stringify(archivists));
                        key = Buffer.from(ARCHIVIST_STORAGE_KEY);
                        return [4 /*yield*/, this.store.write(key, bufferArchivists)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        this.getArchivists = function () { return __awaiter(_this, void 0, void 0, function () {
            var key, hasKey, bufferArchivists, stringArchivists;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = Buffer.from(ARCHIVIST_STORAGE_KEY);
                        return [4 /*yield*/, this.store.containsKey(key)];
                    case 1:
                        hasKey = _a.sent();
                        if (!hasKey) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.store.read(key)];
                    case 2:
                        bufferArchivists = _a.sent();
                        if (bufferArchivists) {
                            stringArchivists = bufferArchivists.toString('utf8');
                            return [2 /*return*/, JSON.parse(stringArchivists)];
                        }
                        _a.label = 3;
                    case 3: return [2 /*return*/, []];
                }
            });
        }); };
        this.archivistQueue = archivistQueue;
        this.store = store;
    }
    return XyoArchivistStore;
}());
exports.XyoArchivistStore = XyoArchivistStore;
//# sourceMappingURL=xyo-archivist-store.js.map