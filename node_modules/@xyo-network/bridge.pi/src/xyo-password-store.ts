import { IXyoHashProvider } from '@xyo-network/hashing'
import { IXyoStorageProvider } from '@xyo-network/storage'

const STORAGE_PASSWORD_KEY = "STORAGE_PASSWORD_KEY"
const BRIDGE_DEFAULT_PASSWORD = "xyxyo"

export class XyoPasswordStore {
    hasher: IXyoHashProvider
    store: IXyoStorageProvider

    constructor(hasher: IXyoHashProvider, store: IXyoStorageProvider) {
        this.hasher = hasher
        this.store = store
    }
    
    storeNewPassword = async (password: Buffer) => {
        const key = Buffer.from(STORAGE_PASSWORD_KEY)
        await this.store.write(key, password)
    }
      
    getPassword = async (): Promise<Buffer> => {
        const key = Buffer.from(STORAGE_PASSWORD_KEY)
        const hasKey = await this.store.containsKey(key)
      
        if (hasKey) {
            const inStore = await this.store.read(key)
      
            if (inStore) {
                return inStore
            }
        }
      
        return this.hashPassword(Buffer.from(BRIDGE_DEFAULT_PASSWORD))
    }
      
    hashAndCheckRightPassword = async (password: Buffer,) => {
        const hashOfPassword = await this.hashPassword(password)
        return this.checkIfRightPassword(hashOfPassword)
    }
      
    checkIfRightPassword = async (password: Buffer) => {
        const rightPassword = await this.getPassword()
        return !Buffer.compare(rightPassword, password)
    }
      
    hashPassword = async (password: Buffer) => {
        const hashedPassword = await this.hasher.createHash(password)
        return hashedPassword.serialize()
    }

    changePassword = async (password: Buffer, newPassword: Buffer): Promise<boolean> => {
        if (await this.hashAndCheckRightPassword(password)) {
            this.storeNewPassword(await this.hashPassword(newPassword))
            return true
        }

        return false
    }
}
