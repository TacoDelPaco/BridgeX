"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const STORAGE_PASSWORD_KEY = "STORAGE_PASSWORD_KEY";
const BRIDGE_DEFAULT_PASSWORD = "xyxyo";
class XyoPasswordStore {
    constructor(hasher, store) {
        this.storeNewPassword = (password) => __awaiter(this, void 0, void 0, function* () {
            const key = Buffer.from(STORAGE_PASSWORD_KEY);
            yield this.store.write(key, password);
        });
        this.getPassword = () => __awaiter(this, void 0, void 0, function* () {
            const key = Buffer.from(STORAGE_PASSWORD_KEY);
            const hasKey = yield this.store.containsKey(key);
            if (hasKey) {
                const inStore = yield this.store.read(key);
                if (inStore) {
                    return inStore;
                }
            }
            return this.hashPassword(Buffer.from(BRIDGE_DEFAULT_PASSWORD));
        });
        this.hashAndCheckRightPassword = (password) => __awaiter(this, void 0, void 0, function* () {
            const hashOfPassword = yield this.hashPassword(password);
            return this.checkIfRightPassword(hashOfPassword);
        });
        this.checkIfRightPassword = (password) => __awaiter(this, void 0, void 0, function* () {
            const rightPassword = yield this.getPassword();
            return !Buffer.compare(rightPassword, password);
        });
        this.hashPassword = (password) => __awaiter(this, void 0, void 0, function* () {
            const hashedPassword = yield this.hasher.createHash(password);
            return hashedPassword.serialize();
        });
        this.changePassword = (password, newPassword) => __awaiter(this, void 0, void 0, function* () {
            if (yield this.hashAndCheckRightPassword(password)) {
                this.storeNewPassword(yield this.hashPassword(newPassword));
                return true;
            }
            return false;
        });
        this.hasher = hasher;
        this.store = store;
    }
}
exports.XyoPasswordStore = XyoPasswordStore;
//# sourceMappingURL=xyo-password-store.js.map