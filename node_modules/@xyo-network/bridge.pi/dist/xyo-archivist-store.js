"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.XyoArchivistStore = void 0;
const ARCHIVIST_STORAGE_KEY = "ARCHIVIST_STORAGE_KEY";
class XyoArchivistStore {
    constructor(archivistQueue, store) {
        this.getAttachedArchivistsForBridge = () => __awaiter(this, void 0, void 0, function* () {
            const returnArchivists = [];
            const allArchivists = this.archivistQueue.activeArchivists;
            for (const archivist of allArchivists) {
                const archivistId = `${archivist.host}:${archivist.port}`;
                returnArchivists.push({
                    port: archivist.port,
                    dns: archivist.host,
                    id: archivistId,
                });
            }
            return returnArchivists;
        });
        this.detachArchivistForBridge = (id) => __awaiter(this, void 0, void 0, function* () {
            const allArchivists = this.archivistQueue.activeArchivists;
            for (const archivist of allArchivists) {
                const archivistId = `${archivist.host}:${archivist.port}`;
                if (id === archivistId) {
                    const archivistToRemove = {
                        port: archivist.port,
                        dns: archivist.host,
                        id: archivistId,
                    };
                    yield this.removeArchivist(archivist);
                    return archivistToRemove;
                }
            }
            throw Error("No archivist found!");
        });
        this.attachArchivistToBridge = (dns, port) => __awaiter(this, void 0, void 0, function* () {
            const archivistToAdd = {
                port,
                dns,
                id: `${dns}:${port}`,
            };
            const tcp = {
                port,
                host: dns,
            };
            yield this.addArchivist(tcp);
            return archivistToAdd;
        });
        this.getDefaultArchivistForBridge = () => __awaiter(this, void 0, void 0, function* () {
            if (this.archivistQueue.activeArchivists.length > 0) {
                return this.archivistQueue.activeArchivists[0];
            }
            throw Error("No archivists!");
        });
        this.setDefaultArchivistForBridge = (id) => __awaiter(this, void 0, void 0, function* () {
            const allArchivists = this.archivistQueue.activeArchivists;
            for (const archivist of allArchivists) {
                const archivistId = `${archivist.host}:${archivist.port}`;
                if (id === archivistId) {
                    const archivistToRemove = {
                        port: archivist.port,
                        dns: archivist.host,
                        id: archivistId,
                    };
                    yield this.removeArchivist(archivist);
                    this.archivistQueue.activeArchivists.unshift(archivist);
                    yield this.storeArchivists(this.archivistQueue.activeArchivists);
                    return archivistToRemove;
                }
            }
            throw Error("No archivist found!");
        });
        this.addArchivist = (archivist) => __awaiter(this, void 0, void 0, function* () {
            this.archivistQueue.activeArchivists.push(archivist);
            yield this.storeArchivists(this.archivistQueue.activeArchivists);
        });
        this.removeArchivist = (archivistToRemove) => __awaiter(this, void 0, void 0, function* () {
            const newArchivists = [];
            this.archivistQueue.activeArchivists.forEach((archivist) => {
                if (archivist.port !== archivistToRemove.port && archivistToRemove.host !== archivist.host) {
                    newArchivists.push(archivist);
                }
            });
            this.archivistQueue.activeArchivists = newArchivists;
            yield this.storeArchivists(newArchivists);
        });
        this.restoreArchivists = (constArchivists) => __awaiter(this, void 0, void 0, function* () {
            const archivistsInStorage = yield this.getArchivists();
            return archivistsInStorage.concat(constArchivists);
        });
        this.storeArchivists = (archivists) => __awaiter(this, void 0, void 0, function* () {
            const bufferArchivists = Buffer.from(JSON.stringify(archivists));
            const key = Buffer.from(ARCHIVIST_STORAGE_KEY);
            yield this.store.write(key, bufferArchivists);
        });
        this.getArchivists = () => __awaiter(this, void 0, void 0, function* () {
            const key = Buffer.from(ARCHIVIST_STORAGE_KEY);
            const hasKey = yield this.store.containsKey(key);
            if (hasKey) {
                const bufferArchivists = yield this.store.read(key);
                if (bufferArchivists) {
                    const stringArchivists = bufferArchivists.toString('utf8');
                    return JSON.parse(stringArchivists);
                }
            }
            return [];
        });
        this.archivistQueue = archivistQueue;
        this.store = store;
    }
}
exports.XyoArchivistStore = XyoArchivistStore;
//# sourceMappingURL=xyo-archivist-store.js.map