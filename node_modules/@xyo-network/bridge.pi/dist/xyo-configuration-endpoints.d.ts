/// <reference types="node" />
import { IBridgeConfigurationManager, IArchivist } from '@xyo-network/bridge-configuration';
import { XyoPasswordStore } from './xyo-password-store';
import { IXyoStorageProvider } from '@xyo-network/storage';
import { IXyoSerializableObject } from '@xyo-network/serialization';
import { XyoBridgeArchivistQueue } from './xyo-bridge-archivist-queue';
import { XyoArchivistStore } from './xyo-archivist-store';
import { IXyoOriginChainRepository, XyoPaymentKey } from '@xyo-network/origin-chain';
import { XyoBridge } from '@xyo-network/bridge-core';
export declare class XyoBridgeConfigurationEndpoint implements IBridgeConfigurationManager {
    passwordStore: XyoPasswordStore;
    archivistQueue: XyoBridgeArchivistQueue;
    archivistStore: XyoArchivistStore;
    chainRepo: IXyoOriginChainRepository;
    store: IXyoStorageProvider;
    bridge: XyoBridge;
    constructor(passwordStore: XyoPasswordStore, archivistQueue: XyoBridgeArchivistQueue, archivistStore: XyoArchivistStore, chainRepo: IXyoOriginChainRepository, store: IXyoStorageProvider, bridge: XyoBridge);
    setDefaultArchivist: (id: string) => Promise<IArchivist>;
    getDefaultArchivist: () => Promise<IArchivist>;
    getAttachedArchivists: () => Promise<IArchivist[]>;
    attachArchivist: (dns: string, port: number) => Promise<IArchivist>;
    detachArchivist: (id: string) => Promise<IArchivist>;
    updatePin: (oldPassword: string, newPassword: string) => Promise<boolean>;
    isConfigured: () => Promise<boolean>;
    paymentKeyHeuristicsCreator: (key: XyoPaymentKey) => (() => Promise<IXyoSerializableObject>);
    setPaymentKey: (key: string) => Promise<string>;
    getPaymentKey: () => Promise<string>;
    getPublicKey: () => Promise<string>;
    verifyPin: (pin: string) => Promise<boolean>;
    storePaymentKey: (paymentKey: Buffer) => Promise<void>;
    getPaymentKeyFromDisk: () => Promise<Buffer | undefined>;
    forceUpdate(): Promise<boolean>;
    checkForUpdates(): Promise<boolean>;
    factoryReset(): Promise<void>;
    lastResort(): Promise<boolean>;
    tailLog(pathname: string, n?: number): Promise<any>;
    getAptPackageVersion(): Promise<{
        latest: string;
        current: string;
    }>;
    getNpmPackageVersion(): Promise<{
        latest: string;
        current: any;
    }>;
}
//# sourceMappingURL=xyo-configuration-endpoints.d.ts.map