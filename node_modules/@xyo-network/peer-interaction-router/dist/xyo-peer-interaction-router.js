"use strict";
/*
 * @Author: XY | The Findables Company <ryanxyo>
 * @Date:   Wednesday, 21st November 2018 10:54:00 am
 * @Email:  developer@xyfindables.com
 * @Filename: xyo-peer-interaction-router.ts
 * @Last modified by: ryanxyo
 * @Last modified time: Wednesday, 21st November 2018 11:19:03 am
 * @License: All Rights Reserved
 * @Copyright: Copyright XY | The Findables Company
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.XyoPeerInteractionRouter = void 0;
const base_1 = require("@xyo-network/base");
/**
 * A simple router to register handlers by route category.
 *
 * Uses `connect-like` or `express-like` like API to mount handlers.
 *
 * ```javascript
 *  router.use(category, handler)
 * ```
 */
class XyoPeerInteractionRouter extends base_1.XyoBase {
    /**
     * Creates an instance of XyoPeerInteractionRouter.
     * @param {IXyoCatalogueResolver} [catalogueResolver] If a catalogue resolver is supplied, it will be
     * used as a delegate to decide which category to choose in the event of a negotiation
     *
     * @memberof XyoPeerInteractionRouter
     */
    constructor(catalogueResolver) {
        super();
        this.catalogueResolver = catalogueResolver;
        this.handlersByCategory = {};
    }
    /**
     * Registers a handler for a particular category
     *
     * @param {CatalogueItem} catalogueItem
     * @param {handlerFactoryFn} handlerFactory
     * @memberof XyoPeerInteractionRouter
     */
    use(catalogueItem, handlerFactory) {
        this.handlersByCategory[catalogueItem] = handlerFactory;
    }
    /**
     * Resolves a handler a based on a catalogue item.
     *
     * @param {CatalogueItem} catalogueItem
     * @returns {(IXyoBoundWitnessHandlerProvider | undefined)}
     * @memberof XyoPeerInteractionRouter
     */
    getHandler(catalogueItem) {
        const handlerFn = this.handlersByCategory[catalogueItem];
        if (!handlerFn) {
            return undefined;
        }
        return handlerFn();
    }
    /**
     * Resolves to a category when multiple category options are available
     *
     * @param {CatalogueItem[]} catalogueItems
     * @returns {(CatalogueItem | undefined)}
     * @memberof XyoPeerInteractionRouter
     */
    resolveCategory(catalogueItems) {
        if (this.catalogueResolver) {
            return this.catalogueResolver.resolveCategory(catalogueItems);
        }
        return (catalogueItems && catalogueItems.length > 0 && catalogueItems[0]) || undefined;
    }
}
exports.XyoPeerInteractionRouter = XyoPeerInteractionRouter;
//# sourceMappingURL=xyo-peer-interaction-router.js.map