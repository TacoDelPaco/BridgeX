"use strict";
/*
 * @Author: XY | The Findables Company <ryanxyo>
 * @Date:   Monday, 17th December 2018 11:15:22 am
 * @Email:  developer@xyfindables.com
 * @Filename: index.ts
 * @Last modified by: ryanxyo
 * @Last modified time: Wednesday, 13th March 2019 2:55:16 pm
 * @License: All Rights Reserved
 * @Copyright: Copyright XY | The Findables Company
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializer = void 0;
const hashing_1 = require("@xyo-network/hashing");
const signing_1 = require("@xyo-network/signing");
const signing_ecdsa_1 = require("@xyo-network/signing.ecdsa");
const signing_rsa_1 = require("@xyo-network/signing.rsa");
const origin_chain_1 = require("@xyo-network/origin-chain");
const bound_witness_1 = require("@xyo-network/bound-witness");
const serialization_1 = require("@xyo-network/serialization");
const serialization_schema_1 = require("@xyo-network/serialization-schema");
const heuristics_common_1 = require("@xyo-network/heuristics-common");
function createSerializer() {
    const serializationService = new serialization_1.XyoSerializationService(serialization_schema_1.schema);
    serializationService.addDeserializer(signing_ecdsa_1.XyoEcdsaSignature.deserializer);
    serializationService.addDeserializer(signing_1.XyoStubSignature);
    serializationService.addDeserializer(signing_1.XyoStubPublicKey);
    serializationService.addDeserializer(hashing_1.XyoStubHash);
    serializationService.addDeserializer(signing_ecdsa_1.XyoEcdsaSecp256k1UnCompressedPublicKey.deserializer);
    serializationService.addDeserializer(origin_chain_1.XyoIndex.deserializer);
    serializationService.addDeserializer(origin_chain_1.XyoNextPublicKey.deserializer);
    serializationService.addDeserializer(origin_chain_1.XyoBridgeHashSet.deserializer);
    serializationService.addDeserializer(origin_chain_1.XyoPreviousHash.deserializer);
    serializationService.addDeserializer(heuristics_common_1.rssiSerializationProvider.deserializer);
    serializationService.addDeserializer(heuristics_common_1.XyoUnixTime.deserializer);
    serializationService.addDeserializer(heuristics_common_1.latitudeSerializationProvider.deserializer);
    serializationService.addDeserializer(heuristics_common_1.longitudeSerializationProvider.deserializer);
    serializationService.addDeserializer(heuristics_common_1.XyoGps.deserializer);
    serializationService.addDeserializer(signing_rsa_1.XyoRsaPublicKey);
    serializationService.addDeserializer(signing_rsa_1.rsaWithSha256SignatureDeserializer);
    serializationService.addDeserializer(hashing_1.sha256HashDeserializer);
    serializationService.addDeserializer(hashing_1.sha3HashDeserializer);
    serializationService.addDeserializer(bound_witness_1.XyoKeySet.deserializer);
    serializationService.addDeserializer(bound_witness_1.XyoSignatureSet.deserializer);
    serializationService.addDeserializer(bound_witness_1.XyoFetter.deserializer);
    serializationService.addDeserializer(bound_witness_1.XyoWitness.deserializer);
    serializationService.addDeserializer(bound_witness_1.XyoFetterSet.deserializer);
    serializationService.addDeserializer(bound_witness_1.XyoWitnessSet.deserializer);
    serializationService.addDeserializer(bound_witness_1.XyoBoundWitnessFragment.deserializer);
    serializationService.addDeserializer(bound_witness_1.XyoBoundWitness.deserializer);
    serializationService.addDeserializer(origin_chain_1.XyoBridgeBlockSet.deserializer);
    serializationService.addDeserializer(signing_1.XyoStubSigner.deserializer);
    serializationService.addDeserializer(signing_rsa_1.XyoRsaShaSigner.deserializer);
    serializationService.addDeserializer(signing_ecdsa_1.XyoEcdsaSecp256k1Signer.deserializer);
    serializationService.addDeserializer(heuristics_common_1.XyoJSONBlob.deserializer);
    return serializationService;
}
exports.serializer = createSerializer();
//# sourceMappingURL=index.js.map