"use strict";
/*
 * @Author: XY | The Findables Company <ryanxyo>
 * @Date:   Friday, 7th December 2018 1:23:15 pm
 * @Email:  developer@xyfindables.com
 * @Filename: index.ts
 * @Last modified by: ryanxyo
 * @Last modified time: Wednesday, 6th March 2019 4:42:51 pm
 * @License: All Rights Reserved
 * @Copyright: Copyright XY | The Findables Company
 */
Object.defineProperty(exports, "__esModule", { value: true });
const serialization_1 = require("@xyo-network/serialization");
const buffer_utils_1 = require("@xyo-network/buffer-utils");
const errors_1 = require("@xyo-network/errors");
class XyoSerializableNumber extends serialization_1.XyoBaseSerializable {
    constructor(number, schema, schemaObjectId, numberType) {
        super(schema);
        this.number = number;
        this.schemaObjectId = schemaObjectId;
        this.numberType = numberType;
    }
    getData() {
        if (this.numberType === 'unsigned-integer') {
            return buffer_utils_1.unsignedIntegerToBuffer(this.number);
        }
        if (this.numberType === 'signed-integer') {
            return buffer_utils_1.signedIntegerToBuffer(this.number);
        }
        if (this.numberType === 'float') {
            return buffer_utils_1.floatToBuffer(this.number);
        }
        if (this.numberType === 'double') {
            return buffer_utils_1.doubleToBuffer(this.number);
        }
        throw new errors_1.XyoError(`Unsupported number typed ${this.numberType || 'undefined'}`);
    }
    getReadableValue() {
        return this.number;
    }
}
exports.XyoSerializableNumber = XyoSerializableNumber;
// tslint:disable-next-line:max-classes-per-file
class XyoNumberDeserializer {
    constructor(schemaObjectId, numberType) {
        this.schemaObjectId = schemaObjectId;
        this.numberType = numberType;
    }
    deserialize(data, serializationService) {
        const parseResult = serializationService.parse(data);
        let number;
        if (this.numberType === 'unsigned-integer') {
            number = buffer_utils_1.readIntegerFromBuffer(parseResult.dataBytes, parseResult.dataBytes.length, false, 0);
        }
        else if (this.numberType === 'signed-integer') {
            number = buffer_utils_1.readIntegerFromBuffer(parseResult.dataBytes, parseResult.dataBytes.length, true, 0);
        }
        else if (this.numberType === 'float') {
            number = buffer_utils_1.readFloatFromBuffer(parseResult.dataBytes, 0);
        }
        else if (this.numberType === 'double') {
            number = buffer_utils_1.readDoubleFromBuffer(parseResult.dataBytes, 0);
        }
        else {
            throw new errors_1.XyoError(`Unsupported number typed ${this.numberType || 'undefined'}`);
        }
        return new XyoSerializableNumber(number, serializationService.schema, this.schemaObjectId, this.numberType);
    }
}
exports.XyoNumberDeserializer = XyoNumberDeserializer;
function getNumberSerializer(schemaObjectId, numberType, schema) {
    const deserializer = new XyoNumberDeserializer(schemaObjectId, numberType);
    return {
        deserializer,
        newInstance: (number) => {
            return new XyoSerializableNumber(number, schema, schemaObjectId, numberType);
        }
    };
}
function getUnsignedIntegerSerializer(schema, schemaObjectId) {
    return getNumberSerializer(schemaObjectId, 'unsigned-integer', schema);
}
exports.getUnsignedIntegerSerializer = getUnsignedIntegerSerializer;
function getSignedIntegerSerializer(schema, schemaObjectId) {
    return getNumberSerializer(schemaObjectId, 'signed-integer', schema);
}
exports.getSignedIntegerSerializer = getSignedIntegerSerializer;
function getFloatSerializer(schema, schemaObjectId) {
    return getNumberSerializer(schemaObjectId, 'float', schema);
}
exports.getFloatSerializer = getFloatSerializer;
function getDoubleSerializer(schema, schemaObjectId) {
    return getNumberSerializer(schemaObjectId, 'double', schema);
}
exports.getDoubleSerializer = getDoubleSerializer;
//# sourceMappingURL=index.js.map