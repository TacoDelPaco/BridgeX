/// <reference types="node" />
import { XyoSerializableNumber } from '@xyo-network/heuristics';
import { XyoBaseSerializable, IXyoDeserializer } from '@xyo-network/serialization';
export declare const rssiSerializationProvider: {
    deserializer: import("@xyo-network/heuristics").XyoNumberDeserializer;
    newInstance: (number: number) => XyoSerializableNumber;
};
export declare const latitudeSerializationProvider: {
    deserializer: import("@xyo-network/heuristics").XyoNumberDeserializer;
    newInstance: (number: number) => XyoSerializableNumber;
};
export declare const longitudeSerializationProvider: {
    deserializer: import("@xyo-network/heuristics").XyoNumberDeserializer;
    newInstance: (number: number) => XyoSerializableNumber;
};
export declare class XyoUnixTime extends XyoBaseSerializable {
    private readonly date;
    static deserializer: IXyoDeserializer<XyoUnixTime>;
    schemaObjectId: number;
    constructor(date: Date);
    getData(): Buffer;
    getReadableValue(): string;
}
export declare class XyoGps extends XyoBaseSerializable {
    readonly latitude: number;
    readonly longitude: number;
    static deserializer: IXyoDeserializer<XyoGps>;
    readonly schemaObjectId: number;
    constructor(latitude: number, longitude: number);
    getData(): XyoSerializableNumber[];
    getReadableValue(): {
        latitude: number;
        longitude: number;
    };
}
export declare class XyoJSONBlob extends XyoBaseSerializable {
    readonly jsonStr: string;
    static deserializer: IXyoDeserializer<XyoJSONBlob>;
    readonly schemaObjectId: number;
    constructor(jsonStr: string);
    getData(): Buffer;
    getReadableValue(): any;
    getJSON(): any;
}
//# sourceMappingURL=index.d.ts.map