"use strict";
/*
 * @Author: XY | The Findables Company <ryanxyo>
 * @Date:   Thursday, 29th November 2018 4:23:34 pm
 * @Email:  developer@xyfindables.com
 * @Filename: xyo-mock-network-pipe.ts
 * @Last modified by: ryanxyo
 * @Last modified time: Tuesday, 11th December 2018 9:34:57 am
 * @License: All Rights Reserved
 * @Copyright: Copyright XY | The Findables Company
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.XyoMockNetworkPipe = void 0;
class XyoMockNetworkPipe {
    constructor(intercepts, expectedMessages) {
        this.intercepts = intercepts;
        this.expectedMessages = expectedMessages;
        this.networkHeuristics = [];
        this.sendCount = 0;
        // @ts-ignore
        this.peer = {};
    }
    onPeerDisconnect(callback) {
        // tslint:disable-next-line:no-empty
        return () => { };
    }
    send(data, awaitResponse) {
        return __awaiter(this, void 0, void 0, function* () {
            const expected = this.expectedMessages.length > this.sendCount ? this.expectedMessages[this.sendCount] : undefined;
            if (expected) {
                expect(expected.equals(data)).toBe(true);
            }
            const returnMsg = (this.intercepts[this.sendCount] && this.intercepts[this.sendCount](data, awaitResponse)) || Buffer.alloc(0);
            this.sendCount += 1;
            return returnMsg;
        });
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            return;
        });
    }
}
exports.XyoMockNetworkPipe = XyoMockNetworkPipe;
//# sourceMappingURL=xyo-mock-network-pipe.js.map