/// <reference types="node" />
import { IXyoNetworkProcedureCatalogue } from './@types';
import { CatalogueItem } from './catalogue-item';
export { IXyoNetworkPeer, IXyoNetworkPipe, IXyoNetworkProcedureCatalogue, IXyoNetworkProvider } from './@types';
export { CatalogueItem } from './catalogue-item';
export { XyoMockNetworkPipe } from './xyo-mock-network-pipe';
/**
 * Some very important numbers that factor into the catalogue negotiation protocol
 */
/** The current number of bytes that encode the length if the catalogue */
export declare const CATALOGUE_LENGTH_IN_BYTES = 4;
/** This number of bytes allowed to encode how big the catalogue can be */
export declare const CATALOGUE_SIZE_OF_SIZE_BYTES = 1;
/**
 * When a payload is passed it is padded with the length of bytes of the payload.
 * It gets 4 bytes to do so
 */
export declare const CATALOGUE_SIZE_OF_PAYLOAD_BYTES = 4;
/**
 * A utility function for translating a buffer to a list of catalogues items
 * that another node is willing to do.
 *
 * @param buffer The data buffer to read and translate
 */
export declare function bufferToCatalogueItems(buffer: Buffer): CatalogueItem[];
export declare function flipChoice(choice: CatalogueItem): CatalogueItem;
/** Returns a number, which is feature-mask representing CatalogueItems */
export declare function catalogueItemsToMask(catalogueItems: CatalogueItem[]): number;
export declare class XyoNetworkProcedureCatalogue implements IXyoNetworkProcedureCatalogue {
    private catalogue;
    canDo(catalogueItem: CatalogueItem): boolean;
    getCurrentCatalogue(): CatalogueItem[];
    setCatalogue(catalogue: CatalogueItem[]): void;
}
//# sourceMappingURL=index.d.ts.map