"use strict";
/*
 * @Author: XY | The Findables Company <ryanxyo>
 * @Date:   Tuesday, 20th November 2018 3:35:36 pm
 * @Email:  developer@xyfindables.com
 * @Filename: rsa-signature.ts
 * @Last modified by: ryanxyo
 * @Last modified time: Wednesday, 12th December 2018 1:54:50 pm
 * @License: All Rights Reserved
 * @Copyright: Copyright XY | The Findables Company
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.XyoRsaSignature = void 0;
const serialization_1 = require("@xyo-network/serialization");
const serialization_schema_1 = require("@xyo-network/serialization-schema");
/**
 * An RSA signature
 */
class XyoRsaSignature extends serialization_1.XyoBaseSerializable {
    constructor(rawSignature, verifySign, schemaObjectId) {
        super(serialization_schema_1.schema);
        this.rawSignature = rawSignature;
        this.verifySign = verifySign;
        this.schemaObjectId = schemaObjectId;
    }
    getData() {
        return this.rawSignature;
    }
    /**
     * Returns the binary-representation of the signature
     */
    get encodedSignature() {
        return this.rawSignature;
    }
    /**
     * Verifies that this signature is valid
     *
     * @param data The data that was signed
     * @param publicKey The public key associated with the crypto key-pair
     */
    verify(data, publicKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.verifySign(this, data, publicKey);
        });
    }
    getReadableValue() {
        return this.encodedSignature.toString('hex');
    }
}
exports.XyoRsaSignature = XyoRsaSignature;
//# sourceMappingURL=rsa-signature.js.map