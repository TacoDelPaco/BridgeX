"use strict";
/*
 * @Author: XY | The Findables Company <ryanxyo>
 * @Date:   Tuesday, 20th November 2018 3:29:32 pm
 * @Email:  developer@xyfindables.com
 * @Filename: xyo-rsa-sha-signer.ts
 * @Last modified by: ryanxyo
 * @Last modified time: Thursday, 13th December 2018 10:42:49 am
 * @License: All Rights Reserved
 * @Copyright: Copyright XY | The Findables Company
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.XyoRsaShaSigner = void 0;
const serialization_schema_1 = require("@xyo-network/serialization-schema");
const xyo_rsa_public_key_1 = require("./xyo-rsa-public-key");
const rsa_signature_1 = require("./rsa-signature");
const serialization_1 = require("@xyo-network/serialization");
/**
 * A service for signing using RSASha. This particular class
 * encapsulates a crypto key-pair
 */
class XyoRsaShaSigner extends serialization_1.XyoBaseSerializable {
    constructor(getSignature, getModulus, getPrivateKey, verifySign, rsaSignatureSchemaId) {
        super(serialization_schema_1.schema);
        this.getSignature = getSignature;
        this.getModulus = getModulus;
        this.getPrivateKey = getPrivateKey;
        this.verifySign = verifySign;
        this.rsaSignatureSchemaId = rsaSignatureSchemaId;
        this.schemaObjectId = serialization_schema_1.schema.rsaSigner.id;
    }
    /**
     * Signs a piece of data
     *
     * @param data An arbitrary data blob
     */
    signData(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const rawSignature = this.getSignature(data);
            return new rsa_signature_1.XyoRsaSignature(rawSignature, this.verifySign.bind(this), this.rsaSignatureSchemaId);
        });
    }
    /**
     * Returns the publicKey for this crypto-key-pair. In RSA
     * this is just the modulus
     */
    get publicKey() {
        const modulus = this.getModulus();
        return new xyo_rsa_public_key_1.XyoRsaPublicKey(modulus);
    }
    get privateKey() {
        return this.getPrivateKey();
    }
    getReadableValue() {
        return this.privateKey;
    }
    getData() {
        return Buffer.from(this.privateKey);
    }
}
exports.XyoRsaShaSigner = XyoRsaShaSigner;
//# sourceMappingURL=xyo-rsa-sha-signer.js.map