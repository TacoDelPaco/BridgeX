/// <reference types="node" />
import { XyoBaseSerializable } from '@xyo-network/serialization';
import { IXyoPublicKey, IXyoSignature } from '@xyo-network/signing';
/**
 * An RSA signature
 */
export declare class XyoRsaSignature extends XyoBaseSerializable implements IXyoSignature {
    readonly rawSignature: Buffer;
    readonly verifySign: (signature: IXyoSignature, data: Buffer, publicKey: IXyoPublicKey) => Promise<boolean>;
    readonly schemaObjectId: number;
    constructor(rawSignature: Buffer, verifySign: (signature: IXyoSignature, data: Buffer, publicKey: IXyoPublicKey) => Promise<boolean>, schemaObjectId: number);
    getData(): Buffer;
    /**
     * Returns the binary-representation of the signature
     */
    get encodedSignature(): Buffer;
    /**
     * Verifies that this signature is valid
     *
     * @param data The data that was signed
     * @param publicKey The public key associated with the crypto key-pair
     */
    verify(data: Buffer, publicKey: IXyoPublicKey): Promise<boolean>;
    getReadableValue(): string;
}
//# sourceMappingURL=rsa-signature.d.ts.map