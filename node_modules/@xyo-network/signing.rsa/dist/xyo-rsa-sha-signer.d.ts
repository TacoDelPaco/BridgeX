/// <reference types="node" />
import { IXyoDeserializer, XyoBaseSerializable } from '@xyo-network/serialization';
import { IXyoPublicKey, IXyoSignature, IXyoSigner } from '@xyo-network/signing';
import { XyoRsaPublicKey } from './xyo-rsa-public-key';
/**
 * A service for signing using RSASha. This particular class
 * encapsulates a crypto key-pair
 */
export declare class XyoRsaShaSigner extends XyoBaseSerializable implements IXyoSigner {
    readonly getSignature: (data: Buffer) => Buffer;
    readonly getModulus: () => Buffer;
    readonly getPrivateKey: () => string;
    readonly verifySign: (signature: IXyoSignature, data: Buffer, publicKey: IXyoPublicKey) => Promise<boolean>;
    private readonly rsaSignatureSchemaId;
    static deserializer: IXyoDeserializer<XyoRsaShaSigner>;
    readonly schemaObjectId: number;
    constructor(getSignature: (data: Buffer) => Buffer, getModulus: () => Buffer, getPrivateKey: () => string, verifySign: (signature: IXyoSignature, data: Buffer, publicKey: IXyoPublicKey) => Promise<boolean>, rsaSignatureSchemaId: number);
    /**
     * Signs a piece of data
     *
     * @param data An arbitrary data blob
     */
    signData(data: Buffer): Promise<IXyoSignature>;
    /**
     * Returns the publicKey for this crypto-key-pair. In RSA
     * this is just the modulus
     */
    get publicKey(): XyoRsaPublicKey;
    get privateKey(): string;
    getReadableValue(): string;
    getData(): Buffer;
}
//# sourceMappingURL=xyo-rsa-sha-signer.d.ts.map