"use strict";
/*
 * @Author: XY | The Findables Company <ryanxyo>
 * @Date:   Tuesday, 20th November 2018 3:26:17 pm
 * @Email:  developer@xyfindables.com
 * @Filename: xyo-rsa-sha
 * @Last modified by: ryanxyo
 * @Last modified time: Monday, 26th November 2018 3:37:31 pm
 * @License: All Rights Reserved
 * @Copyright: Copyright XY | The Findables Company
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.XyoRsaShaSignerProvider = void 0;
const node_rsa_1 = __importDefault(require("node-rsa"));
const xyo_rsa_sha_signer_1 = require("./xyo-rsa-sha-signer");
const base_1 = require("@xyo-network/base");
/**
 * A service for providing RSA-SHA-256 signing services
 */
class XyoRsaShaSignerProvider extends base_1.XyoBase {
    constructor(signingScheme, rsaSignatureObjectSchemaId) {
        super();
        this.signingScheme = signingScheme;
        this.rsaSignatureObjectSchemaId = rsaSignatureObjectSchemaId;
    }
    /**
     * Returns a new instance of an rsa-signer
     */
    newInstance(fromPrivateKey) {
        let key;
        if (fromPrivateKey) {
            key = new node_rsa_1.default(fromPrivateKey, 'pkcs8-private-pem');
            key.setOptions({ signingScheme: this.signingScheme });
        }
        else {
            key = new node_rsa_1.default({ b: 2048 });
            key.setOptions({ signingScheme: this.signingScheme });
        }
        return new xyo_rsa_sha_signer_1.XyoRsaShaSigner(
        // getSignature
        (data) => key.sign(data), 
        // public key
        () => key.exportKey('components-public').n, 
        // private key
        () => key.exportKey('pkcs8-private-pem'), 
        // verify signature
        this.verifySign.bind(this), 
        // The id of the schema
        this.rsaSignatureObjectSchemaId);
    }
    /**
     * Verifies a a signature given the data that was signed, and a public key
     *
     * @param signature The signature to verify
     * @param data The data that was signed
     * @param publicKey The corresponding publicKey of public cryptography key-pair
     */
    verifySign(signature, data, publicKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const rsaPubKey = publicKey;
            const key = new node_rsa_1.default();
            key.setOptions({ signingScheme: this.signingScheme });
            key.importKey({
                n: rsaPubKey.modulus,
                e: rsaPubKey.publicExponent
            });
            return key.verify(data, signature.encodedSignature);
        });
    }
}
exports.XyoRsaShaSignerProvider = XyoRsaShaSignerProvider;
//# sourceMappingURL=xyo-rsa-sha-signer-provider.js.map