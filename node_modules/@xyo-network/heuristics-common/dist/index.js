"use strict";
/*
 * @Author: XY | The Findables Company <ryanxyo>
 * @Date:   Friday, 7th December 2018 1:23:15 pm
 * @Email:  developer@xyfindables.com
 * @Filename: index.ts
 * @Last modified by: ryanxyo
 * @Last modified time: Monday, 4th March 2019 10:47:10 am
 * @License: All Rights Reserved
 * @Copyright: Copyright XY | The Findables Company
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.XyoJSONBlob = exports.XyoGps = exports.XyoUnixTime = exports.longitudeSerializationProvider = exports.latitudeSerializationProvider = exports.rssiSerializationProvider = void 0;
const buffer_utils_1 = require("@xyo-network/buffer-utils");
const heuristics_1 = require("@xyo-network/heuristics");
const serialization_1 = require("@xyo-network/serialization");
const serialization_schema_1 = require("@xyo-network/serialization-schema");
exports.rssiSerializationProvider = (0, heuristics_1.getSignedIntegerSerializer)(serialization_schema_1.schema, serialization_schema_1.schema.rssi.id);
exports.latitudeSerializationProvider = (0, heuristics_1.getDoubleSerializer)(serialization_schema_1.schema, serialization_schema_1.schema.latitude.id);
exports.longitudeSerializationProvider = (0, heuristics_1.getDoubleSerializer)(serialization_schema_1.schema, serialization_schema_1.schema.longitude.id);
class XyoUnixTime extends serialization_1.XyoBaseSerializable {
    constructor(date) {
        super(serialization_schema_1.schema);
        this.date = date;
        this.schemaObjectId = serialization_schema_1.schema.time.id;
    }
    getData() {
        return (0, buffer_utils_1.writeIntegerToBuffer)(this.date.valueOf(), 8, false);
    }
    getReadableValue() {
        return this.date.toISOString();
    }
}
exports.XyoUnixTime = XyoUnixTime;
class XyoUnixTimeDeserializer {
    constructor() {
        this.schemaObjectId = serialization_schema_1.schema.time.id;
    }
    deserialize(data, serializationService) {
        const parseResult = serializationService.parse(data);
        const resultingNumber = (0, buffer_utils_1.readIntegerFromBuffer)(parseResult.dataBytes, 8, false);
        return new XyoUnixTime(new Date(resultingNumber));
    }
}
XyoUnixTime.deserializer = new XyoUnixTimeDeserializer();
class XyoGps extends serialization_1.XyoBaseSerializable {
    constructor(latitude, longitude) {
        super(serialization_schema_1.schema);
        this.latitude = latitude;
        this.longitude = longitude;
        this.schemaObjectId = serialization_schema_1.schema.gps.id;
    }
    getData() {
        return [
            exports.latitudeSerializationProvider.newInstance(this.latitude),
            exports.longitudeSerializationProvider.newInstance(this.longitude)
        ];
    }
    getReadableValue() {
        return {
            latitude: this.latitude,
            longitude: this.longitude
        };
    }
}
exports.XyoGps = XyoGps;
class XyoGpsDeserializer {
    constructor() {
        this.schemaObjectId = serialization_schema_1.schema.gps.id;
    }
    deserialize(data, serializationService) {
        const parseResult = serializationService.parse(data);
        const parseQuery = new serialization_1.ParseQuery(parseResult);
        return new XyoGps(serializationService
            .deserialize(parseQuery.getChildAt(0).readData(true))
            .hydrate().number, serializationService.deserialize(parseQuery.getChildAt(1).readData(true))
            .hydrate().number);
    }
}
XyoGps.deserializer = new XyoGpsDeserializer();
class XyoJSONBlob extends serialization_1.XyoBaseSerializable {
    constructor(jsonStr) {
        super(serialization_schema_1.schema);
        this.jsonStr = jsonStr;
        this.schemaObjectId = serialization_schema_1.schema.jsonBlob.id;
    }
    getData() {
        return Buffer.from(this.jsonStr);
    }
    getReadableValue() {
        return this.getJSON();
    }
    getJSON() {
        return JSON.parse(this.jsonStr);
    }
}
exports.XyoJSONBlob = XyoJSONBlob;
class XyoJSONBlobDeserializer {
    constructor() {
        this.schemaObjectId = serialization_schema_1.schema.jsonBlob.id;
    }
    deserialize(data, serializationService) {
        const parseResult = serializationService.parse(data);
        return new XyoJSONBlob(parseResult.dataBytes.toString());
    }
}
XyoJSONBlob.deserializer = new XyoJSONBlobDeserializer();
//# sourceMappingURL=index.js.map