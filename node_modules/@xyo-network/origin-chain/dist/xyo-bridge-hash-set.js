"use strict";
/*
 * @Author: XY | The Findables Company <ryanxyo>
 * @Date:   Monday, 10th December 2018 9:19:54 am
 * @Email:  developer@xyfindables.com
 * @Filename: xyo-bridge-hash-set.ts
 * @Last modified by: ryanxyo
 * @Last modified time: Tuesday, 5th February 2019 10:11:51 am
 * @License: All Rights Reserved
 * @Copyright: Copyright XY | The Findables Company
 */
Object.defineProperty(exports, "__esModule", { value: true });
const serialization_1 = require("@xyo-network/serialization");
const serialization_schema_1 = require("@xyo-network/serialization-schema");
class XyoBridgeHashSet extends serialization_1.XyoBaseSerializable {
    constructor(hashSet) {
        super(serialization_schema_1.schema);
        this.hashSet = hashSet;
        this.schemaObjectId = serialization_schema_1.schema.bridgeHashSet.id;
    }
    getData() {
        return this.hashSet;
    }
    getReadableValue() {
        return this.hashSet.map(hash => hash.getReadableValue());
    }
}
exports.XyoBridgeHashSet = XyoBridgeHashSet;
// tslint:disable-next-line:max-classes-per-file
class XyoBridgeHashSetDeserializer {
    constructor() {
        this.schemaObjectId = serialization_schema_1.schema.bridgeHashSet.id;
    }
    deserialize(data, serializationService) {
        const parseResult = serializationService.parse(data);
        const query = new serialization_1.ParseQuery(parseResult);
        return new XyoBridgeHashSet(query.mapChildren(hash => serializationService.deserialize(hash.readData(true)).hydrate()));
    }
}
XyoBridgeHashSet.deserializer = new XyoBridgeHashSetDeserializer();
//# sourceMappingURL=xyo-bridge-hash-set.js.map