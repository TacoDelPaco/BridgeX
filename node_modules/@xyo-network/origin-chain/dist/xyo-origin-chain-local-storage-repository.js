"use strict";
/*
 * @Author: XY | The Findables Company <ryanxyo>
 * @Date:   Thursday, 13th December 2018 9:58:27 am
 * @Email:  developer@xyfindables.com
 * @Filename: xyo-origin-chain-local-storage-repository.ts
 * @Last modified by: ryanxyo
 * @Last modified time: Wednesday, 6th March 2019 1:52:49 pm
 * @License: All Rights Reserved
 * @Copyright: Copyright XY | The Findables Company
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const xyo_origin_chain_in_memory_repository_1 = require("./xyo-origin-chain-in-memory-repository");
const base_1 = require("@xyo-network/base");
class XyoOriginChainLocalStorageRepository extends base_1.XyoBase {
    constructor(storageProvider, originBlockResolver, serializationService) {
        super();
        this.storageProvider = storageProvider;
        this.originBlockResolver = originBlockResolver;
        this.serializationService = serializationService;
    }
    acquireMutex() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getOrCreateInMemoryDelegate()).acquireMutex();
        });
    }
    releaseMutex(mutex) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getOrCreateInMemoryDelegate()).releaseMutex(mutex);
        });
    }
    canAcquireMutex() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getOrCreateInMemoryDelegate()).canAcquireMutex();
        });
    }
    isBlockInOriginChain(block, hash) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getOrCreateInMemoryDelegate()).isBlockInOriginChain(block, hash);
        });
    }
    publicKeyBelongsToOriginChain(publicKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getOrCreateInMemoryDelegate()).publicKeyBelongsToOriginChain(publicKey);
        });
    }
    getAllPublicKeysForOriginChain() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getOrCreateInMemoryDelegate()).getAllPublicKeysForOriginChain();
        });
    }
    getOriginChainHashes() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getOrCreateInMemoryDelegate()).getOriginChainHashes();
        });
    }
    getInteractionWithPublicKey(publicKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getOrCreateInMemoryDelegate()).getInteractionWithPublicKey(publicKey);
        });
    }
    createGenesisBlock() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getOrCreateInMemoryDelegate()).createGenesisBlock();
        });
    }
    getIndex() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getOrCreateInMemoryDelegate()).getIndex();
        });
    }
    getPreviousHash() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getOrCreateInMemoryDelegate()).getPreviousHash();
        });
    }
    getGenesisSigner() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getOrCreateInMemoryDelegate()).getGenesisSigner();
        });
    }
    getSigners() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getOrCreateInMemoryDelegate()).getSigners();
        });
    }
    addSigner(signer) {
        return __awaiter(this, void 0, void 0, function* () {
            const delegate = yield this.getOrCreateInMemoryDelegate();
            yield delegate.addSigner(signer);
            yield this.saveOriginChainState(delegate);
        });
    }
    removeOldestSigner() {
        return __awaiter(this, void 0, void 0, function* () {
            const delegate = yield this.getOrCreateInMemoryDelegate();
            yield delegate.removeOldestSigner();
            yield this.saveOriginChainState(delegate);
        });
    }
    getNextPublicKey() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getOrCreateInMemoryDelegate()).getNextPublicKey();
        });
    }
    getWaitingSigners() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getOrCreateInMemoryDelegate()).getWaitingSigners();
        });
    }
    updateOriginChainState(hash, block) {
        return __awaiter(this, void 0, void 0, function* () {
            const delegate = yield this.getOrCreateInMemoryDelegate();
            yield delegate.updateOriginChainState(hash, block);
            yield this.saveOriginChainState(delegate);
            return;
        });
    }
    setCurrentSigners(signers) {
        return __awaiter(this, void 0, void 0, function* () {
            const delegate = yield this.getOrCreateInMemoryDelegate();
            yield delegate.setCurrentSigners(signers);
            const currentIndex = yield delegate.getIndex();
            if (currentIndex === 0 && signers.length > 0) {
                delegate.genesisSigner = signers[0];
            }
            yield this.saveOriginChainState(delegate);
            return;
        });
    }
    getOrCreateInMemoryDelegate() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.inMemoryDelegate) {
                return this.inMemoryDelegate;
            }
            try {
                const stored = yield this.storageProvider.read(Buffer.from('current-state'));
                if (stored) {
                    this.inMemoryDelegate = this.deserializeOriginChainState(stored.toString());
                    return this.inMemoryDelegate;
                }
            }
            catch (err) {
                // expected error if does not exist
            }
            this.inMemoryDelegate = new xyo_origin_chain_in_memory_repository_1.XyoOriginChainStateInMemoryRepository(0, [], [], this.originBlockResolver, [], undefined, [], this.serializationService);
            yield this.saveOriginChainState(this.inMemoryDelegate);
            return this.inMemoryDelegate;
        });
    }
    saveOriginChainState(originState) {
        return __awaiter(this, void 0, void 0, function* () {
            const jsonString = yield this.serializeOriginChainState(originState);
            try {
                yield this.storageProvider.delete(Buffer.from('current-state'));
            }
            catch (err) {
                // expected error
            }
            yield this.storageProvider.write(Buffer.from('current-state'), Buffer.from(jsonString));
        });
    }
    deserializeOriginChainState(jsonString) {
        const obj = JSON.parse(jsonString);
        const index = obj.index;
        const signers = obj.signers.map((signer) => {
            return this.serializationService
                .deserialize(Buffer.from(signer, 'hex'))
                .hydrate();
        });
        const waitingSigners = obj.waitingSigners.map((signer) => {
            return this.serializationService
                .deserialize(Buffer.from(signer, 'hex'))
                .hydrate();
        });
        const hashes = obj.hashes.map(h => this.serializationService
            .deserialize(Buffer.from(h, 'hex'))
            .hydrate());
        const publicKeys = obj.publicKeys.map(pk => this.serializationService
            .deserialize(Buffer.from(pk, 'hex'))
            .hydrate());
        const nextPublicKey = obj.nextPublicKey ?
            this.serializationService
                .deserialize(Buffer.from(obj.nextPublicKey, 'hex'))
                .hydrate() :
            undefined;
        const genesisSigner = obj.genesisSigner ?
            this.serializationService
                .deserialize(Buffer.from(obj.genesisSigner, 'hex'))
                .hydrate() :
            undefined;
        return new xyo_origin_chain_in_memory_repository_1.XyoOriginChainStateInMemoryRepository(index, hashes, publicKeys, this.originBlockResolver, signers, (nextPublicKey && nextPublicKey.publicKey) || undefined, waitingSigners, this.serializationService, genesisSigner);
    }
    serializeOriginChainState(originChainState) {
        return __awaiter(this, void 0, void 0, function* () {
            const index = yield originChainState.getIndex();
            const nextPublicKey = yield originChainState.getNextPublicKey();
            const hashes = yield originChainState.getOriginChainHashes();
            const publicKeys = yield originChainState.getAllPublicKeysForOriginChain();
            const signers = yield originChainState.getSigners();
            const waitingSigners = yield originChainState.getWaitingSigners();
            const genesisSigner = yield originChainState.getGenesisSigner();
            const payload = {
                index,
                publicKeys: publicKeys.map(pk => pk.serializeHex()),
                signers: signers.map((signer) => {
                    return signer.serializeHex();
                }),
                waitingSigners: waitingSigners.map((signer) => {
                    return signer.serializeHex();
                }),
                nextPublicKey: null,
                hashes: hashes.map(h => h.serializeHex()),
                genesisSigner: genesisSigner && genesisSigner.serializeHex() || null
            };
            if (nextPublicKey) {
                payload.nextPublicKey = nextPublicKey.serializeHex();
            }
            return JSON.stringify(payload);
        });
    }
}
exports.XyoOriginChainLocalStorageRepository = XyoOriginChainLocalStorageRepository;
//# sourceMappingURL=xyo-origin-chain-local-storage-repository.js.map