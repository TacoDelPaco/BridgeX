/// <reference types="node" />
import { XyoBase } from '@xyo-network/base';
import { IXyoBoundWitness } from '@xyo-network/bound-witness';
import { IXyoHash } from '@xyo-network/hashing';
import { IXyoSerializationService } from '@xyo-network/serialization';
import { IXyoPublicKey, IXyoSigner } from '@xyo-network/signing';
import { IBlockInOriginChainResult, IXyoOriginChainMutex, IXyoOriginChainRepository } from './@types';
/**
 * Encapsulates the values that go into an origin-chain managements
 */
export declare class XyoOriginChainStateInMemoryRepository extends XyoBase implements IXyoOriginChainRepository {
    private readonly originChainHashes;
    private readonly originBlockResolver;
    private readonly currentSigners;
    private nextPublicKey;
    private readonly waitingSigners;
    private readonly serializationService;
    genesisSigner?: IXyoSigner | undefined;
    /** The index of the block in the origin chain */
    private idx;
    private interactionsByPublicKeyData;
    private publicKeyIndex;
    private hashIndex;
    private mutex;
    constructor(index: number, originChainHashes: IXyoHash[], allPublicKeys: IXyoPublicKey[], originBlockResolver: {
        getOriginBlockByHash(hash: Buffer): Promise<IXyoBoundWitness | undefined>;
    }, currentSigners: IXyoSigner[], nextPublicKey: IXyoPublicKey | undefined, waitingSigners: IXyoSigner[], serializationService: IXyoSerializationService, genesisSigner?: IXyoSigner | undefined);
    getOriginChainHashes(): Promise<IXyoHash[]>;
    getAllPublicKeysForOriginChain(): Promise<IXyoPublicKey[]>;
    acquireMutex(): Promise<IXyoOriginChainMutex | undefined>;
    releaseMutex(mutex: IXyoOriginChainMutex): Promise<void>;
    canAcquireMutex(): Promise<boolean>;
    /**
     * The index, or number of the blocks in the origin chain
     */
    private get index();
    /**
     * Gets the previous hash value for the origin chain
     */
    private get previousHash();
    getIndex(): Promise<number>;
    createGenesisBlock(): Promise<IXyoBoundWitness>;
    getPreviousHash(): Promise<IXyoHash | undefined>;
    getNextPublicKey(): Promise<IXyoPublicKey | undefined>;
    getWaitingSigners(): Promise<IXyoSigner[]>;
    updateOriginChainState(hash: IXyoHash, block: IXyoBoundWitness): Promise<void>;
    /**
     * A list of signers that will be used in signing bound witnesses
     */
    getSigners(): Promise<IXyoSigner[]>;
    /**
     * Adds a signer to be used in the next bound-witness interaction.
     */
    addSigner(signer: IXyoSigner): Promise<void>;
    /**
     * Set the current signers
     * @param signers A collection of signers to set for the current block
     */
    setCurrentSigners(signers: IXyoSigner[]): Promise<void>;
    /**
     * Removes the oldest signer for the list of signers such that
     * the signer removed will not be used in signing bound witnesses
     * in the future
     */
    removeOldestSigner(): Promise<void>;
    getGenesisSigner(): Promise<IXyoSigner | undefined>;
    getInteractionWithPublicKey(publicKey: IXyoPublicKey): Promise<IXyoHash[]>;
    isBlockInOriginChain(block: IXyoBoundWitness, hash: IXyoHash): Promise<IBlockInOriginChainResult>;
    publicKeyBelongsToOriginChain(publicKey: IXyoPublicKey): Promise<boolean>;
    /**
     * Sets the state so that the chain is ready for a new origin block
     */
    private newOriginBlock;
    /**
     * Adds the next waiting signer to the list of signers to be used in signing bound witnesses
     */
    private addWaitingSigner;
    private getOrInitializeInteractionsData;
    private addBlocksToInteractionData;
    private addBlockToInteractionData;
    private getPartyOfChildBlock;
}
//# sourceMappingURL=xyo-origin-chain-in-memory-repository.d.ts.map