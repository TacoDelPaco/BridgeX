/// <reference types="node" />
import { XyoBase } from '@xyo-network/base';
import { IXyoHashProvider } from '@xyo-network/hashing';
import { IXyoSerializableObject } from '@xyo-network/serialization';
import { IXyoStorageProvider } from '@xyo-network/storage';
import { IContentAddress, IXyoContentAddressableService } from './@types';
export { IContentAddress, IXyoContentAddressableService } from './@types';
/**
 * Provides local content addressable service. Additionally provides key and value
 * converters so keys and values can be processed before persistance. This may be useful
 * for testing so values are stored and retrieved in readable hexadecimal or useful for
 * encryption before persisting.
 *
 * @export
 * @class XyoLocalContentService
 * @extends {XyoBase}
 * @implements {IXyoContentAddressableService}
 */
export declare class XyoLocalContentService extends XyoBase implements IXyoContentAddressableService {
    private readonly hashProvider;
    private readonly storageProvider;
    private readonly keyConverter?;
    private readonly valConverter?;
    constructor(hashProvider: IXyoHashProvider, storageProvider: IXyoStorageProvider, keyConverter?: ((k: Buffer) => Buffer) | undefined, valConverter?: ((v: Buffer) => Buffer) | undefined);
    get(key: IContentAddress): Promise<Buffer | undefined>;
    add(value: IXyoSerializableObject | Buffer): Promise<string>;
}
export declare function contentAddressableToString(contentAddress: IContentAddress): string;
//# sourceMappingURL=index.d.ts.map