/// <reference types="node" />
import { XyoBase } from '@xyo-network/base';
import { IXyoNetworkPeer, IXyoNetworkPipe } from '@xyo-network/network';
import { IXyoSerializableObject } from "@xyo-network/serialization";
import { XyoTcpConnectionResult } from './xyo-tcp-connection-result';
/**
 * A communication pipe using tcp/ip stack
 */
export declare class XyoTcpNetworkPipe extends XyoBase implements IXyoNetworkPipe {
    private readonly connectionResult;
    networkHeuristics: IXyoSerializableObject[];
    /**
     * Any initiationData that may have been passed with the first part of the connection
     */
    initiationData: Buffer | undefined;
    /**
     * Returns the peer from the other end of the pipe
     */
    peer: IXyoNetworkPeer;
    /**
     * Creates an instance of a XyoTcpNetworkPipe
     *
     * @param connectionResult The resulting connection from the initial tcp/ip exchange
     */
    constructor(connectionResult: XyoTcpConnectionResult);
    /**
     * This allows a consumer to register a listener when a peer disconnects
     *
     * @param callback Will be called with `hasError` equal to true if an error occurred
     */
    onPeerDisconnect(callback: (hasError: boolean) => void): () => void;
    /**
     * Sends a message to a peer
     * @param message The message to send
     * @param awaitResponse If true, the promised being returned by this function will only resolve
     *                      once the other party sends a message back.
     * @returns Returns the message back from the other party wrapped in a promise. Will return `undefined`
     *          if no response is available
     */
    send(message: Buffer, awaitResponse?: boolean | undefined): Promise<Buffer | undefined>;
    /**
     * Closes the connection to the peer
     */
    close(): Promise<void>;
    /**
     * A helper function to add a size header to the buffer
     */
    private padBufferWithSize;
    /**
     * Returns a function that chunks data and resolves once a tcp message is chunked according
     * to the size provided in the tcp message header
     *
     * @param resolve A resolve function to be called once finished. Will resolve with the message as the first parameter.
     * @param reject A reject function if an error occurs
     */
    private onSendOnDataFn;
}
//# sourceMappingURL=xyo-tcp-network-pipe.d.ts.map