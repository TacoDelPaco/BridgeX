import { IXyoNetworkAddressProvider } from "./@types";
import { IXyoNetworkProvider, IXyoNetworkProcedureCatalogue, IXyoNetworkPipe } from "@xyo-network/network";
import { XyoBase } from "@xyo-network/base";
/**
 * This is not a production-ready TCP client. It was built to test the TCP server.
 * At any rate, it does reliably meet the tcp client functionality.
 */
export declare class XyoClientTcpNetwork extends XyoBase implements IXyoNetworkProvider {
    private readonly networkAddressProvider;
    /** A promise that gets called when stopping the run loop */
    private shouldStopPromise;
    /** True if looping, false otherwise */
    private isLooping;
    /**
     * Creates an instance of XyoClientTcpNetwork.
     *
     * @param {IXyoNetworkAddressProvider} networkAddressProvider Used to discover servers to try gain connections to
     * @memberof XyoClientTcpNetwork
     */
    constructor(networkAddressProvider: IXyoNetworkAddressProvider);
    /**
     * Attempts to find tcp-network servers compatible with `catalogue` passed in
     *
     * @param {IXyoNetworkProcedureCatalogue} catalogue A catalogue of items the consumer can perform
     *
     * @returns {Promise<IXyoNetworkPipe>} The promise will be resolve once a network-pipe is created, which may be never
     * @memberof XyoClientTcpNetwork
     */
    find(catalogue: IXyoNetworkProcedureCatalogue): Promise<IXyoNetworkPipe>;
    /** Stops the client-tcp-network from trying to find peers */
    stopServer(): Promise<void>;
    /** The primary looping function the client-tcp-network performs to try to find a peer */
    private loop;
    /** Try to establish a connection for a given networkAddress */
    private getConnection;
}
//# sourceMappingURL=xyo-client-tcp-network.d.ts.map