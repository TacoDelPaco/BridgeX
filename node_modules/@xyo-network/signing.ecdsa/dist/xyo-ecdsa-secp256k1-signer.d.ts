/// <reference types="node" />
import { IXyoSigner, IXyoSignature, IXyoPublicKey } from '@xyo-network/signing';
import { XyoEcdsaSecp256k1UnCompressedPublicKey } from './xyo-ecdsa-secp256k1-uncompressed-public-key';
import { XyoBaseSerializable, IXyoDeserializer } from '@xyo-network/serialization';
export declare class XyoEcdsaSecp256k1Signer extends XyoBaseSerializable implements IXyoSigner {
    private readonly verifySign;
    private readonly sign;
    private readonly getPublicXY;
    private readonly getPrivateKey;
    private readonly ecdsaSecp256k1UnCompressedPublicKeyObjectSchemaId;
    private readonly ecdsaSecp256k1SignatureObjectSchemaId;
    static deserializer: IXyoDeserializer<XyoEcdsaSecp256k1Signer>;
    readonly schemaObjectId: number;
    constructor(verifySign: (signature: IXyoSignature, data: Buffer, publicKey: IXyoPublicKey) => Promise<boolean>, sign: (data: Buffer) => Promise<Buffer>, getPublicXY: () => {
        x: Buffer;
        y: Buffer;
    }, getPrivateKey: () => string, ecdsaSecp256k1UnCompressedPublicKeyObjectSchemaId: number, ecdsaSecp256k1SignatureObjectSchemaId: number);
    getReadableValue(): string;
    getData(): Buffer;
    /**
     * Signs the data blob with private key
     *
     * @param data An arbitrary data-blob to sign
     */
    signData(data: Buffer): Promise<IXyoSignature>;
    /**
     * Returns the public key of this crypto key pair
     */
    get publicKey(): XyoEcdsaSecp256k1UnCompressedPublicKey;
    /**
     * Gets the private key of the crypto-pair
     *
     * @readonly
     * @type {string}
     * @memberof XyoEcdsaSecp256k1Signer
     */
    get privateKey(): string;
}
//# sourceMappingURL=xyo-ecdsa-secp256k1-signer.d.ts.map