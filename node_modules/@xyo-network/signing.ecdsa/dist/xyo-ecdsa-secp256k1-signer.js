"use strict";
/*
 * @Author: XY | The Findables Company <ryanxyo>
 * @Date:   Tuesday, 20th November 2018 2:08:19 pm
 * @Email:  developer@xyfindables.com
 * @Filename: xyo-ecdsa-secp256k1-signer.ts
 * @Last modified by: ryanxyo
 * @Last modified time: Thursday, 13th December 2018 10:37:26 am
 * @License: All Rights Reserved
 * @Copyright: Copyright XY | The Findables Company
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.XyoEcdsaSecp256k1Signer = void 0;
const xyo_ecdsa_secp256k1_uncompressed_public_key_1 = require("./xyo-ecdsa-secp256k1-uncompressed-public-key");
const xyo_ecdsa_signature_1 = require("./xyo-ecdsa-signature");
const serialization_1 = require("@xyo-network/serialization");
const serialization_schema_1 = require("@xyo-network/serialization-schema");
class XyoEcdsaSecp256k1Signer extends serialization_1.XyoBaseSerializable {
    constructor(verifySign, sign, getPublicXY, getPrivateKey, ecdsaSecp256k1UnCompressedPublicKeyObjectSchemaId, ecdsaSecp256k1SignatureObjectSchemaId) {
        super(serialization_schema_1.schema);
        this.verifySign = verifySign;
        this.sign = sign;
        this.getPublicXY = getPublicXY;
        this.getPrivateKey = getPrivateKey;
        this.ecdsaSecp256k1UnCompressedPublicKeyObjectSchemaId = ecdsaSecp256k1UnCompressedPublicKeyObjectSchemaId;
        this.ecdsaSecp256k1SignatureObjectSchemaId = ecdsaSecp256k1SignatureObjectSchemaId;
        this.schemaObjectId = serialization_schema_1.schema.ecdsaSecp256k1WithSha256Signer.id;
    }
    getReadableValue() {
        return this.privateKey;
    }
    getData() {
        return Buffer.from(this.privateKey);
    }
    /**
     * Signs the data blob with private key
     *
     * @param data An arbitrary data-blob to sign
     */
    signData(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const sig = yield this.sign(data);
            return new xyo_ecdsa_signature_1.XyoEcdsaSignature(sig, this.ecdsaSecp256k1SignatureObjectSchemaId, this.verifySign);
        });
    }
    /**
     * Returns the public key of this crypto key pair
     */
    get publicKey() {
        const { x, y } = this.getPublicXY();
        return new xyo_ecdsa_secp256k1_uncompressed_public_key_1.XyoEcdsaSecp256k1UnCompressedPublicKey(x, y, this.ecdsaSecp256k1UnCompressedPublicKeyObjectSchemaId);
    }
    /**
     * Gets the private key of the crypto-pair
     *
     * @readonly
     * @type {string}
     * @memberof XyoEcdsaSecp256k1Signer
     */
    get privateKey() {
        return this.getPrivateKey();
    }
}
exports.XyoEcdsaSecp256k1Signer = XyoEcdsaSecp256k1Signer;
//# sourceMappingURL=xyo-ecdsa-secp256k1-signer.js.map