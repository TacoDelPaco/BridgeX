/// <reference types="node" />
import { XyoBase } from '@xyo-network/base';
import { IXyoHashProvider } from '@xyo-network/hashing';
import { IXyoPublicKey, IXyoSignature, IXyoSignerProvider } from '@xyo-network/signing';
import { XyoEcdsaSecp256k1Signer } from './xyo-ecdsa-secp256k1-signer';
/**
 * A service for providing EcSecp256k signing services
 */
export declare class XyoEcdsaSecp256k1SignerProvider extends XyoBase implements IXyoSignerProvider {
    hashProvider: IXyoHashProvider | undefined;
    private readonly ecdsaSecp256k1UnCompressedPublicKeyObjectSchemaId;
    private readonly ecdsaSecp256k1SignatureObjectSchemaId;
    /**
     * Creates an instance of XyoEcdsaSecp256k1SignerProvider.
     * If a HashProvider is provided, that data will be hashed before being signed
     *
     * @param {IXyoHashProvider} [hashProvider] An optional HashProvider
     * @memberof XyoEcdsaSecp256k1SignerProvider
     */
    constructor(hashProvider: IXyoHashProvider | undefined, ecdsaSecp256k1UnCompressedPublicKeyObjectSchemaId: number, ecdsaSecp256k1SignatureObjectSchemaId: number);
    /**
     * Returns a new instance of a signer
     */
    newInstance(fromHexKey?: string): XyoEcdsaSecp256k1Signer;
    /**
     * Verifies a a signature given the data that was signed, and a public key
     *
     * @param signature The signature to verify
     * @param data The data that was signed
     * @param publicKey The corresponding publicKey of public cryptography key-pair
     */
    verifySign(signature: IXyoSignature, data: Buffer, publicKey: IXyoPublicKey): Promise<boolean>;
    private getSignFn;
    private getDataToSign;
    private buildDER;
}
//# sourceMappingURL=xyo-ecdsa-secp256k1-signer-provider.d.ts.map