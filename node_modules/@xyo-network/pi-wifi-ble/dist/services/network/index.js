"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bleno_1 = require("@abandonware/bleno");
const debug_1 = __importDefault(require("debug"));
const lodash_1 = require("lodash");
const notify_1 = require("../../characteristics/notify");
const read_1 = require("../../characteristics/read");
const write_1 = require("../../characteristics/write");
const uuids_1 = require("./uuids");
var NetworkStatus;
(function (NetworkStatus) {
    NetworkStatus["offline"] = "0";
    NetworkStatus["connecting"] = "1";
    NetworkStatus["connected"] = "2";
})(NetworkStatus || (NetworkStatus = {}));
class NetworkService extends bleno_1.PrimaryService {
    constructor(wifiManager, validatePin) {
        const writeConnect = new write_1.WriteJSONCharacteristic('connect', uuids_1.WRITE_CONNECT_UUID);
        const notifyStatus = new notify_1.NotifyStringCharacteristic('status', uuids_1.NOTIFY_STATUS_UUID);
        const notifySSID = new notify_1.NotifyStringCharacteristic('ssid', uuids_1.NOTIFY_SSID_UUID);
        const notifyIP = new notify_1.NotifyStringCharacteristic('ip', uuids_1.NOTIFY_IP_UUID);
        const readScan = new read_1.ReadStringCharacteristic('scan', uuids_1.READ_SCAN_UUID);
        super({
            uuid: uuids_1.NETWORK_SERVICE_UUID,
            characteristics: [
                writeConnect.characteristic,
                notifyStatus.characteristic,
                notifySSID.characteristic,
                notifyIP.characteristic,
                readScan.characteristic
            ]
        });
        this.wifiManager = wifiManager;
        this.writeConnect = writeConnect;
        this.notifyStatus = notifyStatus;
        this.notifySSID = notifySSID;
        this.notifyIP = notifyIP;
        this.readScan = readScan;
        this.readScan.awaitCurrentValue = this.awaitScan.bind(this);
        this.validatePin = validatePin;
        this.logger = (0, debug_1.default)('bleno:network');
        this.unsubscribe = () => null;
    }
    awaitScan() {
        return __awaiter(this, void 0, void 0, function* () {
            const networks = yield this.wifiManager.scan();
            const ssidList = (0, lodash_1.uniq)((0, lodash_1.map)(networks, network => (0, lodash_1.get)(network, 'ssid')).filter(lodash_1.identity));
            return ssidList.join(',');
        });
    }
    start() {
        const unsubscribeFromStatus = this.wifiManager.subscribe(status => this.updateStatus(status));
        const unsubscribeFromConnect = this.writeConnect.subscribe(arg => this.connect(arg));
        this.unsubscribe = (0, lodash_1.over)(unsubscribeFromStatus, unsubscribeFromConnect);
        this.logger('Network Service Started');
    }
    stop() {
        this.unsubscribe();
        this.logger('Network Service Stopped');
    }
    updateStatus({ ssid, ip }) {
        const status = ip ? NetworkStatus.connected : ssid ? NetworkStatus.connecting : NetworkStatus.offline;
        this.logger('Network Service Updated', `status=${status}`, `ssid=${ssid}`, `ip=${ip}`);
        this.notifyStatus.setCurrentValue(status);
        this.notifySSID.setCurrentValue(ssid);
        this.notifyIP.setCurrentValue(ip);
    }
    connect({ ssid, password }) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.updateStatus({ ssid, ip: '' });
                yield this.wifiManager.connect({ ssid, password });
                const status = yield this.wifiManager.getStatus();
                this.updateStatus(status);
            }
            catch (err) {
                if (err instanceof Error)
                    this.logger(err.message);
            }
        });
    }
}
exports.default = NetworkService;
//# sourceMappingURL=index.js.map