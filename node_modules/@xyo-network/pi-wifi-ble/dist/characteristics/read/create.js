"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createReadCharacteristic = void 0;
const bleno_1 = require("@abandonware/bleno");
const debug_1 = __importDefault(require("debug"));
const options_1 = require("./options");
const createReadCharacteristic = ({ uuid, name }, getCurrentValue, logger = (0, debug_1.default)('bleno:read')) => {
    const characteristic = new bleno_1.Characteristic((0, options_1.createReadOptions)({ uuid, name }, (offset, callback) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            logger(name, offset);
            const result = yield getCurrentValue();
            const str = typeof result === 'string' ? result : '';
            const buffer = Buffer.from(str);
            if (offset > buffer.length) {
                logger(name, 'invalid offset');
                callback(characteristic.RESULT_INVALID_OFFSET, null);
            }
            else {
                logger(name, result, offset);
                callback(characteristic.RESULT_SUCCESS, buffer.subarray(offset));
            }
        }
        catch (err) {
            logger(name, err);
            callback(characteristic.RESULT_UNLIKELY_ERROR);
        }
    })));
    return characteristic;
};
exports.createReadCharacteristic = createReadCharacteristic;
//# sourceMappingURL=create.js.map