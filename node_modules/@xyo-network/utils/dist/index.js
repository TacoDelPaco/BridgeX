"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.XyoPair = exports.fileExists = exports.base58 = exports.LifeCycleRunner = exports.XyoDaemon = exports.LifeCycleBuilder = exports.BaseLifeCyclable = exports.writeFile = exports.readFile = exports.createDirectoryIfNotExists = exports.BN = exports.CurrentValue = exports.Subscribe = exports.ProcessManager = void 0;
var process_manager_1 = require("./process-manager");
Object.defineProperty(exports, "ProcessManager", { enumerable: true, get: function () { return process_manager_1.ProcessManager; } });
var subscribe_1 = require("./subscribe");
Object.defineProperty(exports, "Subscribe", { enumerable: true, get: function () { return subscribe_1.Subscribe; } });
var value_1 = require("./value");
Object.defineProperty(exports, "CurrentValue", { enumerable: true, get: function () { return value_1.CurrentValue; } });
/// <reference path="./@types/bs58.d.ts" />
const bn_js_1 = __importDefault(require("bn.js"));
exports.BN = bn_js_1.default;
const bs58_1 = __importDefault(require("bs58"));
const base_1 = require("@xyo-network/base");
const errors_1 = require("@xyo-network/errors");
const events_1 = require("events");
const fs_1 = __importDefault(require("fs"));
const util_1 = require("util");
const mkdir = (0, util_1.promisify)(fs_1.default.mkdir);
const stat = (0, util_1.promisify)(fs_1.default.stat);
const path_1 = __importDefault(require("path"));
/**
 * Recursively builds directory from a path
 *
 * @export
 * @param {string} p
 */
function createDirectoryIfNotExists(p) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield stat(p);
        }
        catch (err) {
            if (err.code && err.code === 'ENOENT') {
                try {
                    yield mkdir(p, null);
                }
                catch (e2) {
                    if (e2.code !== 'ENOENT') {
                        throw e2;
                    }
                    const pathParts = path_1.default.parse(p);
                    if (pathParts.dir === pathParts.root) {
                        throw e2;
                    }
                    yield createDirectoryIfNotExists(pathParts.dir);
                    yield createDirectoryIfNotExists(p);
                }
            }
        }
    });
}
exports.createDirectoryIfNotExists = createDirectoryIfNotExists;
exports.readFile = (0, util_1.promisify)(fs_1.default.readFile);
exports.writeFile = (0, util_1.promisify)(fs_1.default.writeFile);
class BaseLifeCyclable extends base_1.XyoBase {
    constructor(partialImplementation) {
        super();
        this.partialImplementation = partialImplementation;
        this.eventEmitter = new events_1.EventEmitter();
    }
    preInitialize() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.partialImplementation && this.partialImplementation.onPreInitialize) {
                yield this.partialImplementation.onPreInitialize();
            }
            this.eventEmitter.emit('pre:initialized');
        });
    }
    initialize() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.partialImplementation && this.partialImplementation.onInitialize) {
                yield this.partialImplementation.onInitialize();
            }
            this.eventEmitter.emit('initialized');
        });
    }
    postInitialize() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.partialImplementation && this.partialImplementation.onPostInitialize) {
                yield this.partialImplementation.onPostInitialize();
            }
            this.eventEmitter.emit('post:initialized');
        });
    }
    preStart() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.partialImplementation && this.partialImplementation.onPreStart) {
                yield this.partialImplementation.onPreStart();
            }
            this.eventEmitter.emit('pre:started');
        });
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.partialImplementation && this.partialImplementation.onStart) {
                yield this.partialImplementation.onStart();
            }
            this.eventEmitter.emit('started');
        });
    }
    postStart() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.partialImplementation && this.partialImplementation.onPostStart) {
                yield this.partialImplementation.onPostStart();
            }
            this.eventEmitter.emit('post:started');
        });
    }
    preStop() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.partialImplementation && this.partialImplementation.onPreStop) {
                yield this.partialImplementation.onPreStop();
            }
            this.eventEmitter.emit('pre:stopped');
        });
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.partialImplementation && this.partialImplementation.onStop) {
                yield this.partialImplementation.onStop();
            }
            this.eventEmitter.emit('stopped');
        });
    }
    postStop() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.partialImplementation && this.partialImplementation.onPostStop) {
                yield this.partialImplementation.onPostStop();
            }
            this.eventEmitter.emit('post:stopped');
        });
    }
    on(event, listener) {
        this.eventEmitter.on(event, listener);
        return this;
    }
    once(event, listener) {
        this.eventEmitter.once(event, listener);
        return this;
    }
    off(event, listener) {
        this.eventEmitter.off(event, listener);
        return this;
    }
    removeAllListeners(event) {
        this.eventEmitter.removeAllListeners(event);
        return this;
    }
}
exports.BaseLifeCyclable = BaseLifeCyclable;
class LifeCycleBuilder {
    constructor() {
        this.builder = {};
    }
    onPreInitialize(fn) {
        this.builder.onPreInitialize = fn;
        return this;
    }
    onInitialize(fn) {
        this.builder.onInitialize = fn;
        return this;
    }
    onPostInitialize(fn) {
        this.builder.onPostInitialize = fn;
        return this;
    }
    onPreStart(fn) {
        this.builder.onPreStart = fn;
        return this;
    }
    onStart(fn) {
        this.builder.onStart = fn;
        return this;
    }
    onPostStart(fn) {
        this.builder.onPostStart = fn;
        return this;
    }
    onPreStop(fn) {
        this.builder.onPreStop = fn;
        return this;
    }
    onStop(fn) {
        this.builder.onStop = fn;
        return this;
    }
    onPostStop(fn) {
        this.builder.onPostStop = fn;
        return this;
    }
    build() {
        return new BaseLifeCyclable(this.builder);
    }
}
exports.LifeCycleBuilder = LifeCycleBuilder;
class XyoDaemon extends base_1.XyoBase {
    constructor() {
        super(...arguments);
        this.looping = false;
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            this.logInfo("Starting Daemon!");
            return this.runner(3000);
        });
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.unscheduleTimeout)
                this.unscheduleTimeout();
            this.unscheduleTimeout = undefined;
            return new Promise((resolve) => {
                if (!this.looping) {
                    return resolve();
                }
                this.resolveStopLoopingPromise = resolve;
            });
        });
    }
    delayRun(currentValue, errorOccurred) {
        return errorOccurred ? currentValue * 2 : 3000; // exponential back-off
    }
    shouldStop() {
        return this.resolveStopLoopingPromise !== undefined;
    }
    runner(timeout) {
        return __awaiter(this, void 0, void 0, function* () {
            this.looping = true;
            let errorOccurred = false;
            if (this.shouldStop()) {
                if (this.resolveStopLoopingPromise) {
                    this.resolveStopLoopingPromise();
                    this.resolveStopLoopingPromise = undefined;
                }
                this.looping = false;
                return;
            }
            try {
                const runReq = this.run();
                if (runReq !== undefined) {
                    yield runReq;
                }
            }
            catch (err) {
                this.logError(`There was an error in the block-producer loop`, err);
                errorOccurred = true;
            }
            if (this.shouldStop()) {
                if (this.resolveStopLoopingPromise) {
                    this.resolveStopLoopingPromise();
                    this.resolveStopLoopingPromise = undefined;
                }
                this.looping = false;
                return;
            }
            const delay = this.delayRun(timeout, errorOccurred);
            if (delay === undefined) {
                this.looping = false;
                return;
            }
            this.looping = false;
            this.unscheduleTimeout = base_1.XyoBase.timeout(() => this.runner(delay), delay);
        });
    }
}
exports.XyoDaemon = XyoDaemon;
class LifeCycleRunner {
    constructor(lifeCyclable) {
        this.lifeCyclable = lifeCyclable;
        this.state = undefined;
    }
    initialize() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.canInitialize()) {
                throw new errors_1.XyoError(`Already initialized, can not initialize again`);
            }
            this.state = null;
            yield this.lifeCyclable.preInitialize();
            this.state = 'pre:initialized';
            yield this.lifeCyclable.initialize();
            this.state = 'initialized';
            yield this.lifeCyclable.postInitialize();
            this.state = 'post:initialized';
        });
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.canStart()) {
                throw new errors_1.XyoError(`Not yet initialized, can not start`);
            }
            yield this.lifeCyclable.preStart();
            this.state = 'pre:started';
            yield this.lifeCyclable.start();
            this.state = 'started';
            yield this.lifeCyclable.postStart();
            this.state = 'post:started';
        });
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.canStop()) {
                throw new errors_1.XyoError(`Not yet started, can not stop`);
            }
            yield this.lifeCyclable.preStop();
            this.state = 'pre:stopped';
            yield this.lifeCyclable.stop();
            this.state = 'stopped';
            yield this.lifeCyclable.postStop();
            this.state = 'post:stopped';
        });
    }
    canInitialize() {
        return this.state === undefined;
    }
    canStart() {
        return this.state === 'post:initialized';
    }
    canStop() {
        return this.state === 'post:started';
    }
}
exports.LifeCycleRunner = LifeCycleRunner;
exports.base58 = {
    encode: (b) => bs58_1.default.encode(b),
    decode: (hex) => bs58_1.default.decode(hex)
};
function fileExists(pathToFile) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            try {
                fs_1.default.access(pathToFile, fs_1.default.constants.F_OK, (err) => {
                    resolve(!err);
                });
            }
            catch (ex) {
                reject(ex);
            }
        });
    });
}
exports.fileExists = fileExists;
class XyoPair {
    constructor(k, v) {
        this.k = k;
        this.v = v;
    }
}
exports.XyoPair = XyoPair;
//# sourceMappingURL=index.js.map