/// <reference types="node" />
/// <reference types="node" />
export { Callback, IFactory, IInitializable, ILifeCyclable, ILifeCycleEvent, IParameterizedFactory, IParameterizedProvider, IProvider, IRepoItem, IRunnable, IXyoProvider, IXyoProviderContainer, IXyoRepository, asyncPureFn, depScope, factoryFn, parameterizedFactoryFn, parameterizedProviderFn, providerFn, pureFn, unsubscribeFn } from './@types';
export { ProcessManager } from './process-manager';
export { Subscribe } from './subscribe';
export { CurrentValue } from './value';
export { BigNumber as BN };
import BigNumber from 'bn.js';
import { XyoBase } from '@xyo-network/base';
import { EventEmitter } from 'events';
import fs from 'fs';
import { ILifeCyclable, ILifeCycleEvent, asyncPureFn } from './@types';
/**
 * Recursively builds directory from a path
 *
 * @export
 * @param {string} p
 */
export declare function createDirectoryIfNotExists(p: string): Promise<void>;
export declare const readFile: typeof fs.readFile.__promisify__;
export declare const writeFile: typeof fs.writeFile.__promisify__;
export interface IXyoRunnable {
    type: 'daemon' | 'loop' | 'task';
    getSleepTime(): number;
    run(): Promise<void>;
    stop(): Promise<void>;
}
export declare class BaseLifeCyclable extends XyoBase implements ILifeCyclable {
    private readonly partialImplementation?;
    protected readonly eventEmitter: EventEmitter;
    constructor(partialImplementation?: Partial<ILifeCycleEvent> | undefined);
    preInitialize(): Promise<void>;
    initialize(): Promise<void>;
    postInitialize(): Promise<void>;
    preStart(): Promise<void>;
    start(): Promise<void>;
    postStart(): Promise<void>;
    preStop(): Promise<void>;
    stop(): Promise<void>;
    postStop(): Promise<void>;
    on(event: string, listener: (...args: unknown[]) => void): this;
    once(event: string, listener: (...args: unknown[]) => void): this;
    off(event: string, listener: (...args: unknown[]) => void): this;
    removeAllListeners(event: string | undefined): this;
}
export declare class LifeCycleBuilder {
    private readonly builder;
    onPreInitialize(fn: asyncPureFn<void>): this;
    onInitialize(fn: asyncPureFn<void>): this;
    onPostInitialize(fn: asyncPureFn<void>): this;
    onPreStart(fn: asyncPureFn<void>): this;
    onStart(fn: asyncPureFn<void>): this;
    onPostStart(fn: asyncPureFn<void>): this;
    onPreStop(fn: asyncPureFn<void>): this;
    onStop(fn: asyncPureFn<void>): this;
    onPostStop(fn: asyncPureFn<void>): this;
    build(): BaseLifeCyclable;
}
export declare abstract class XyoDaemon extends XyoBase {
    private resolveStopLoopingPromise?;
    private unscheduleTimeout;
    private looping;
    start(): Promise<void>;
    stop(): Promise<void>;
    protected abstract run(): Promise<void> | void;
    protected delayRun(currentValue: number, errorOccurred: boolean): number | undefined;
    protected shouldStop(): boolean;
    private runner;
}
export declare class LifeCycleRunner {
    readonly lifeCyclable: ILifeCyclable;
    state: undefined | null | 'pre:initialized' | 'initialized' | 'post:initialized' | 'pre:started' | 'started' | 'post:started' | 'pre:stopped' | 'stopped' | 'post:stopped';
    constructor(lifeCyclable: ILifeCyclable);
    initialize(): Promise<void>;
    start(): Promise<void>;
    stop(): Promise<void>;
    canInitialize(): boolean;
    canStart(): boolean;
    canStop(): boolean;
}
export declare const base58: {
    encode: (b: Buffer) => string;
    decode: (hex: string) => Buffer;
};
export declare function fileExists(pathToFile: string): Promise<boolean>;
export declare class XyoPair<K, V> {
    readonly k: K;
    readonly v: V;
    constructor(k: K, v: V);
}
//# sourceMappingURL=index.d.ts.map