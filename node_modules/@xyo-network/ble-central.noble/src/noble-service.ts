// import noble from '@s524797336/noble-mac'
import noble from '@abandonware/noble'
import { IXyoCharacteristic, IXyoService } from "@xyo-network/ble-central"
import { XyoLogger } from '@xyo-network/logger'
import { NobleCharacteristic } from './noble-characteristic'

export class NobleService implements IXyoService {
  public logger: XyoLogger = new XyoLogger(false, false)
  public service: noble.Service

  get uuid(): string {
    return this.service.uuid
  }

  get name(): string {
    return this.service.name
  }

  get type(): string {
    return this.service.type
  }

  get characteristics(): IXyoCharacteristic[] {
    const returnArray: IXyoCharacteristic[] = []

    this.service.characteristics.forEach((characteristic) => {
      returnArray.push(new NobleCharacteristic(characteristic))
    })

    return returnArray
  }

  constructor (service: noble.Service) {
    this.service = service
  }

  public discoverCharacteristics(): Promise<IXyoCharacteristic[]> {
    // eslint-disable-next-line no-async-promise-executor
    return new Promise((resolve, reject) => {
      this.logger.info(`Trying to discover characteristics for service with uuid: ${ this.service.uuid }`)

      try {
        this.logger.info(`Successfully discovered characteristics for service with uuid: ${ this.service.uuid }`)

        this.service.discoverCharacteristics([], (_error, characteristics) => {
          const returnArray: IXyoCharacteristic[] | PromiseLike<IXyoCharacteristic[]> | NobleCharacteristic[] = []

          characteristics.forEach((characteristic) => {
            returnArray.push(new NobleCharacteristic(characteristic))
          })

          resolve(returnArray)
        })

      } catch (e) {
        this.logger.error(`Error discovering characteristics for service with uuid: ${ this.service.uuid }`)
        reject(`discoverCharacteristics(): Error ${ e }`)
      }
    })
  }
}
