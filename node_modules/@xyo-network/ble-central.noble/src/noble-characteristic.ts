import noble from '@abandonware/noble'
import { IXyoCharacteristic, IXyoDescriptor } from "@xyo-network/ble-central"
import { XyoLogger } from '@xyo-network/logger'
import { NobleDescriptor } from './noble-descriptor'

export class NobleCharacteristic implements IXyoCharacteristic {

  get uuid(): string {
    return this.characteristic.uuid
  }

  get name(): string {
    return this.characteristic.name
  }

  get type(): string {
    return this.characteristic.type
  }

  get properties(): string[] {
    return this.characteristic.properties
  }

  get descriptors(): IXyoDescriptor[] {
    const returnArray: IXyoDescriptor[] = []
    this.characteristic.descriptors.forEach((descriptor) => {
      returnArray.push(new NobleDescriptor(descriptor))
    })

    return returnArray
  }

  public notifyListeners: ((data: Buffer, isNotification: boolean) => void)[] = []
  public logger: XyoLogger = new XyoLogger(false, false)
  public characteristic: noble.Characteristic

  constructor (characteristic: noble.Characteristic) {
    this.characteristic = characteristic
    this.characteristic.on("data", this.onNotify)
    this.characteristic.on("notify", this.onNotify)
    this.characteristic.on("broadcast", this.onNotify)
  }

  public read(): Promise<Buffer> {
    // eslint-disable-next-line no-async-promise-executor
    return new Promise(async (resolve, reject) => {
      this.logger.info(`Trying to read characteristic with uuid: ${ this.characteristic.uuid }`)

      try {
        this.logger.info(`Successfully read with uuid: ${ this.characteristic.uuid }`)
        const buffer = await this.characteristic.readAsync()
        resolve(buffer)
      } catch (e) {
        this.logger.error(`Error reading characteristic with uuid: ${ this.characteristic.uuid }`)
        reject(`read(): Error ${ e }`)
      }
    })
  }

  public write(value: Buffer): Promise<void> {
    // eslint-disable-next-line no-async-promise-executor
    return new Promise(async (resolve, reject) => {
      this.logger.info(`Trying to write to characteristic with uuid: ${ this.characteristic.uuid }`)

      // todo figure out what this true or false really does
      try {
        this.logger.info(`Successfully wrote to characteristic with uuid: : ${ this.characteristic.uuid }`)
        await this.characteristic.writeAsync(value, true)
        resolve()
      } catch (e) {
        this.logger.error(`Error writing to characteristic with uuid: ${ this.characteristic.uuid }`)
        reject(`write(): Error ${ e }`)
      }
    })
  }

  public discoverDescriptors(): Promise<IXyoDescriptor[]> {
    // eslint-disable-next-line no-async-promise-executor
    return new Promise((resolve, reject) => {
      this.logger.info(`Trying to subscribe to characteristic with uuid: ${ this.characteristic.uuid }`)

      try {
        this.logger.info(`Successfully subscribed to characteristic with uuid: ${ this.characteristic.uuid }`)
        this.characteristic.discoverDescriptors((_, descriptors) => {
          const returnArray: IXyoDescriptor[] = []
             
          for (const descriptor of descriptors) {
            returnArray.push(new NobleDescriptor(descriptor))
          }

          // descriptors.forEach((descriptor) => {
          //   returnArray.push(new NobleDescriptor(descriptor))
          // })
                
          resolve(returnArray)
        })
      } catch (e) {
        this.logger.error(`Error subscribing to characteristic with uuid: ${ this.characteristic.uuid }`)
        reject(`discoverDescriptors(): Error ${ e }`)
      }
    })
  }

  public subscribe(): Promise<void> {
    // eslint-disable-next-line no-async-promise-executor
    return new Promise(async (resolve, reject) => {
      this.logger.info(`Trying to subscribe to characteristic with uuid: ${ this.characteristic.uuid }`)

      try {
        this.logger.info(`Successfully subscribed to characteristic with uuid: ${ this.characteristic.uuid }`)
        await this.characteristic.subscribeAsync()
        resolve()
      } catch (e) {
        this.logger.error(`Error subscribing to characteristic with uuid: ${ this.characteristic.uuid }`)
        reject(`subscribe(): Error ${ e }`)
      }
    })
  }

  public unsubscribe(): Promise<void> {
    // eslint-disable-next-line no-async-promise-executor
    return new Promise(async (resolve, reject) => {
      this.logger.info(`Trying to unsubscribe from characteristic with uuid: ${ this.characteristic.uuid }`)

      try {
        this.logger.info(`Successfully unsubscribed to characteristic with uuid: ${ this.characteristic.uuid }`)
        await this.characteristic.unsubscribeAsync()
        resolve()
      } catch (e) {
        this.logger.error(`Error unsubscribing to characteristic with uuid: ${ this.characteristic.uuid }`)
        reject(`unsubscribe(): Error ${ e }`)
      }
    })
  }

  public on(_event: "notification", listener: (data: Buffer, isNotification: boolean) => void): this {
    this.logger.info("Notfied")
    this.notifyListeners.push(listener)
    return this
  }

  private onNotify = (data: Buffer, isNotification: boolean) => {
    this.logger.info(`Received notification on characteristic with UUID: ${ this.characteristic.uuid }`)
    this.notifyListeners.forEach((listener) => {
      listener(data, isNotification)
    })
  }
}
