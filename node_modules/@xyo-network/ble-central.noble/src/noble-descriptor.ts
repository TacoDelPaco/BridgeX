import noble from '@abandonware/noble'
import { IXyoDescriptor } from "@xyo-network/ble-central"
import { XyoLogger } from '@xyo-network/logger'

export class NobleDescriptor implements IXyoDescriptor {
  public logger: XyoLogger = new XyoLogger(false, false)
  public descriptor: noble.Descriptor

  constructor (descriptor: noble.Descriptor) {
    this.descriptor = descriptor
  }

  get uuid(): string {
    return this.descriptor.uuid
  }

  get name(): string {
    return this.descriptor.name
  }

  get type(): string {
    return this.descriptor.type
  }

  public readValue(): Promise<Buffer> {
    // eslint-disable-next-line no-async-promise-executor
    return new Promise(async (resolve, reject) => {
      this.logger.info(`Trying to read value on descriptor with uuid: ${ this.descriptor.uuid }`)

      try {
        this.logger.info(`Successfully read value of descriptor with uuid: ${ this.descriptor.uuid }`)
        const data = await this.descriptor.readValueAsync()
        resolve(data)
      } catch (e) {
        this.logger.error(`Error reading value of descriptor with uuid: ${ this.descriptor.uuid }`)
        reject(`readValueAsync(): Error ${ e }`)
      }
    })
  }

  public writeValue(value: Buffer): Promise<void> {
    // eslint-disable-next-line no-async-promise-executor
    return new Promise(async (resolve, reject) => {
      this.logger.info(`Trying to write value to descriptor with uuid: ${ this.descriptor.uuid }`)

      try {
        this.logger.info(`Successfully wrote value of descriptor with uuid: ${ this.descriptor.uuid }`)
        await this.descriptor.writeValueAsync(value)
        resolve()
      } catch (e) {
        this.logger.error(`Error writing value of descriptor with uuid: ${ this.descriptor.uuid }`)
        reject(`writeValueAsync(): Error ${ e }`)
      }
    })
  }
}
