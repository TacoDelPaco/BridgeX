import { IXyoBluetoothDevice, IXyoScan } from "@xyo-network/ble-central"
import { XyoLogger } from "@xyo-network/logger"
// import noble from '@s524797336/noble-mac'
import noble from '@abandonware/noble'
import { NobleDevice } from "./noble-device"

export class NobleScan implements IXyoScan {
  private logger = new XyoLogger(false, false)
  private inRangeDevices: Record<string, IXyoBluetoothDevice> = {}

  constructor () {
    noble.on("stateChange", async (state) => {
      this.stateChange(state)
      if (state === 'poweredOn')
        this.startScan()
    })
    noble.on("discover", async (peripheral) => {
      this.discover(peripheral)
    })
    setInterval(this.cleanDevices, 1_000)
  }

  public startScan(): Promise<void> {
    /** @type {Promise<void>} */
    return new Promise((resolve, reject) => {
      if (noble.state === "poweredOn") {

        const callback = () => {
          this.logger.info("Scanner stared successfully")
          noble.removeAllListeners('scanStart')
          resolve()
        }

        this.logger.info("Trying to start scanner")
        noble.on('scanStart', callback)
        noble.startScanningAsync()

        return
      }
      this.logger.error("Noble is not powered on")
      reject()
    })
  }

  public stopScan(): Promise<void> {
    /** @type {Promise<void>} */
    return new Promise((resolve) => {
      this.logger.info("Stopping noble scanner")
      noble.stopScanningAsync()
      noble.removeAllListeners('scanStop')
      resolve()
    })
  }

  public getDevices(): IXyoBluetoothDevice[] {
    const returnArray: IXyoBluetoothDevice[] = []

    for (const [ , value ] of Object.entries(this.inRangeDevices)) {
      returnArray.push(value)
    }
    return returnArray
  }

  private cleanDevices = () => {
    for (const id in this.inRangeDevices) {
      if (Date.now() - (this.inRangeDevices[ id ].lastSeen) > 5_000) {
        delete this.inRangeDevices[ id ]
      }
    }
  }

  private stateChange = (state: string) => {
    this.logger.info(`Noble state change: ${ state }`)
  }

  private discover = (peripheral: noble.Peripheral) => {
    const entered = !this.inRangeDevices[ peripheral.id ]

    if (entered) {
      this.inRangeDevices[ peripheral.id ] = new NobleDevice(peripheral)
    }
    this.inRangeDevices[ peripheral.id ].lastSeen = Date.now()
  }
}
