"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NobleDevice = void 0;
const logger_1 = require("@xyo-network/logger");
const noble_advertisement_1 = require("./noble-advertisement");
const noble_service_1 = require("./noble-service");
class NobleDevice {
    get id() {
        return this.device.id;
    }
    get uuid() {
        return this.device.uuid;
    }
    get connectable() {
        return this.device.connectable;
    }
    get advertisement() {
        return new noble_advertisement_1.NobleAdvertisement(this.device.advertisement);
    }
    get rssi() {
        return this.device.rssi;
    }
    get services() {
        const returnArray = [];
        this.device.services.forEach((service) => {
            returnArray.push(new noble_service_1.NobleService(service));
        });
        return returnArray;
    }
    get state() {
        return this.device.state;
    }
    constructor(device) {
        this.logger = new logger_1.XyoLogger(false, false);
        this.lastSeen = Date.now();
        this.device = device;
    }
    connect() {
        return new Promise((resolve, reject) => {
            this.logger.info(`Trying to connect to device with id: ${this.device.id}`);
            const timeout = setTimeout((_e) => {
                reject(`NobleDevice.connect(): setTimeout() ${_e}`);
            }, 10000);
            this.device.connect((error) => {
                if (error == null) {
                    clearTimeout(timeout);
                    this.logger.info(`Connected to device with id: ${this.device.id}`);
                    resolve();
                }
                else {
                    clearTimeout(timeout);
                    this.logger.error(`Error connecting to device with id: ${this.device.id}`);
                    reject(`NobleDevice.connect(): ${error}`);
                }
            });
        });
    }
    disconnect() {
        return new Promise((resolve, reject) => {
            this.logger.info(`Trying to disconnect to device with id: ${this.device.id}`);
            this.device.disconnect(() => {
                this.logger.info(`Disconnected from device with id: ${this.device.id}`);
                resolve();
            });
            if (this.device.disconnect.prototype.error)
                reject();
        });
    }
    updateRssi() {
        return new Promise((resolve, reject) => {
            this.logger.info(`Trying to update device RSSI with id: ${this.device.id}`);
            this.device.updateRssi((error, rssi) => {
                if (error == null) {
                    this.logger.info(`Updated RSSI for device with id: ${this.device.id}`);
                    resolve(rssi);
                }
                else {
                    this.logger.error(`Error updating RSSI for device with id: ${this.device.id}`);
                    reject(error);
                }
            });
        });
    }
    discoverServicesForUuids(serviceUUIDs) {
        return new Promise((resolve, reject) => {
            this.logger.info(`Trying to discover services for device with id: ${this.device.id}`);
            this.device.discoverServices(serviceUUIDs, (error, services) => {
                if (error == null) {
                    this.logger.info(`Successfully discovered services for device with id: ${this.device.id}`);
                    const returnArray = [];
                    services.forEach((service) => {
                        returnArray.push(new noble_service_1.NobleService(service));
                    });
                    resolve(returnArray);
                }
                else {
                    this.logger.error(`Error discovering services for device with id: ${this.device.id}`);
                    reject(error);
                }
            });
        });
    }
    discoverServices() {
        return this.discoverServicesForUuids([]);
    }
}
exports.NobleDevice = NobleDevice;
//# sourceMappingURL=noble-device.js.map