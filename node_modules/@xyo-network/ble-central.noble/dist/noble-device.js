"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NobleDevice = void 0;
const logger_1 = require("@xyo-network/logger");
const noble_advertisement_1 = require("./noble-advertisement");
const noble_service_1 = require("./noble-service");
class NobleDevice {
    get id() {
        return this.device.id;
    }
    get uuid() {
        return this.device.uuid;
    }
    get connectable() {
        return this.device.connectable;
    }
    get advertisement() {
        return new noble_advertisement_1.NobleAdvertisement(this.device.advertisement);
    }
    get rssi() {
        return this.device.rssi;
    }
    get services() {
        const returnArray = [];
        this.device.services.forEach((service) => {
            returnArray.push(new noble_service_1.NobleService(service));
        });
        return returnArray;
    }
    get state() {
        return this.device.state;
    }
    constructor(device) {
        this.logger = new logger_1.XyoLogger(false, false);
        this.lastSeen = Date.now();
        this.device = device;
    }
    connect() {
        return __awaiter(this, void 0, void 0, function* () {
            // eslint-disable-next-line no-async-promise-executor
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                this.logger.info(`Trying to connect to device with id: ${this.device.id}`);
                const timeout = setTimeout(() => {
                    // this.device.cancelConnect()
                    reject(`NobleDevice.connect(): setTimeout()`);
                }, 10000);
                try {
                    yield this.device.connectAsync();
                    clearTimeout(timeout);
                    this.logger.info(`Connected to device with id: ${this.device.id}`);
                    resolve();
                }
                catch (_a) {
                    clearTimeout(timeout);
                    reject(`connect(): Error`);
                }
            }));
        });
    }
    disconnect() {
        // eslint-disable-next-line no-async-promise-executor
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            this.logger.info(`Trying to disconnect to device with id: ${this.device.id}`);
            try {
                yield this.device.disconnectAsync();
                this.logger.info(`Disconnected from device with id: ${this.device.id}`);
                resolve();
            }
            catch (_a) {
                reject(`disconnect(): Error`);
            }
        }));
    }
    updateRssi() {
        // eslint-disable-next-line no-async-promise-executor
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            this.logger.info(`Trying to update device RSSI with id: ${this.device.id}`);
            try {
                yield this.device.updateRssiAsync();
                this.logger.info(`Updated RSSI for device with id: ${this.device.id}`);
                resolve(this.rssi);
            }
            catch (_a) {
                this.logger.error(`Error updating RSSI for device with id: ${this.device.id}`);
                reject(`updateRssi(): Error`);
            }
        }));
    }
    discoverServicesForUuids(serviceUUIDs) {
        // eslint-disable-next-line no-async-promise-executor
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            this.logger.info(`Trying to discover services for device with id: ${this.device.id}`);
            try {
                this.logger.info(`Successfully discovered services for device with id: ${this.device.id}`);
                const services = yield this.device.discoverServicesAsync(serviceUUIDs);
                const returnArray = [];
                services.forEach((service) => {
                    returnArray.push(new noble_service_1.NobleService(service));
                });
                resolve(returnArray);
            }
            catch (_a) {
                reject(`discoverServicesAsync(): Error`);
            }
            /*
            this.device.discoverServices(serviceUUIDs, (error, services) => {
              if (error == null) {
                this.logger.info(`Successfully discovered services for device with id: ${ this.device.id }`)
                const returnArray: IXyoService[] | PromiseLike<IXyoService[]> | NobleService[] = []
      
                services.forEach((service) => {
                  returnArray.push(new NobleService(service))
                })
      
                resolve(returnArray)
              } else {
                this.logger.error(`Error discovering services for device with id: ${ this.device.id }`)
                reject(error)
              }
            })
            */
        }));
    }
    discoverServices() {
        this.logger.info(`Attempting to discover services...`);
        return this.discoverServicesForUuids([]);
    }
}
exports.NobleDevice = NobleDevice;
//# sourceMappingURL=noble-device.js.map