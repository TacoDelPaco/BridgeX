"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NobleDevice = void 0;
const logger_1 = require("@xyo-network/logger");
const noble_advertisement_1 = require("./noble-advertisement");
const noble_service_1 = require("./noble-service");
class NobleDevice {
    get id() {
        return this.device.id;
    }
    get uuid() {
        return this.device.uuid;
    }
    get connectable() {
        return this.device.connectable;
    }
    get advertisement() {
        return new noble_advertisement_1.NobleAdvertisement(this.device.advertisement);
    }
    get rssi() {
        return this.device.rssi;
    }
    get services() {
        const returnArray = [];
        this.device.services.forEach((service) => {
            returnArray.push(new noble_service_1.NobleService(service));
        });
        return returnArray;
    }
    get state() {
        return this.device.state;
    }
    constructor(device) {
        this.logger = new logger_1.XyoLogger(false, false);
        this.lastSeen = Date.now();
        this.device = device;
    }
    connect() {
        return __awaiter(this, void 0, void 0, function* () {
            // eslint-disable-next-line no-async-promise-executor
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                this.logger.info(`Trying to connect to device with id: ${this.device.id}`);
                const timeout = setTimeout(() => __awaiter(this, void 0, void 0, function* () {
                    // this.device.cancelConnect()
                    reject(`NobleDevice.connect(): setTimeout()`);
                }), 10000);
                try {
                    // noble.reset() // testing
                    yield this.device.connectAsync();
                    clearTimeout(timeout);
                    this.logger.info(`Connected to device with id: ${this.device.id}`);
                    resolve(undefined);
                }
                catch (_a) {
                    clearTimeout(timeout);
                    reject(`connect(): Error`);
                }
            }));
        });
    }
    disconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            // eslint-disable-next-line no-async-promise-executor
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                this.logger.info(`Trying to disconnect to device with id: ${this.device.id}`);
                try {
                    // noble.reset() // testing
                    yield this.device.disconnectAsync();
                    this.logger.info(`Disconnected from device with id: ${this.device.id}`);
                    resolve(undefined);
                }
                catch (_a) {
                    reject(`disconnect(): Error`);
                }
            }));
        });
    }
    updateRssi() {
        return __awaiter(this, void 0, void 0, function* () {
            // eslint-disable-next-line no-async-promise-executor
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                this.logger.info(`Trying to update device RSSI with id: ${this.device.id}`);
                try {
                    const rssi = this.device.updateRssiAsync();
                    this.logger.info(`Updated RSSI for device with id: ${this.device.id}`);
                    resolve(rssi);
                }
                catch (_a) {
                    this.logger.error(`Error updating RSSI for device with id: ${this.device.id}`);
                    reject(`updateRssi(): Error`);
                }
            }));
        });
    }
    discoverServicesForUuids(serviceUUIDs) {
        return __awaiter(this, void 0, void 0, function* () {
            // eslint-disable-next-line no-async-promise-executor
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                var _a, e_1, _b, _c;
                this.logger.info(`Trying to discover services for device with id: ${this.device.id}`);
                try {
                    this.logger.info(`Successfully discovered services for device with id: ${this.device.id}`);
                    const services = yield this.device.discoverServicesAsync(serviceUUIDs);
                    const returnArray = [];
                    try {
                        for (var _d = true, services_1 = __asyncValues(services), services_1_1; services_1_1 = yield services_1.next(), _a = services_1_1.done, !_a; _d = true) {
                            _c = services_1_1.value;
                            _d = false;
                            const service = _c;
                            returnArray.push(new noble_service_1.NobleService(service));
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (!_d && !_a && (_b = services_1.return)) yield _b.call(services_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    // services.forEach((service: noble.Service) => {
                    //   returnArray.push(new NobleService(service))
                    // }
                    resolve(returnArray);
                }
                catch (_e) {
                    reject(`discoverServices(): Error`);
                }
            }));
        });
    }
    // default no async/await
    discoverServices() {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.info(`Attempting to discover services...`);
            return yield this.discoverServicesForUuids([]);
        });
    }
}
exports.NobleDevice = NobleDevice;
//# sourceMappingURL=noble-device.js.map