"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NobleService = void 0;
const logger_1 = require("@xyo-network/logger");
const noble_characteristic_1 = require("./noble-characteristic");
class NobleService {
    get uuid() {
        return this.service.uuid;
    }
    get name() {
        return this.service.name;
    }
    get type() {
        return this.service.type;
    }
    get characteristics() {
        const returnArray = [];
        this.logger.info(`characteristics() called`);
        this.service.characteristics.forEach((characteristic) => {
            this.logger.info(`characteristics().forEach() called`);
            returnArray.push(new noble_characteristic_1.NobleCharacteristic(characteristic));
        });
        return returnArray;
    }
    constructor(service) {
        this.logger = new logger_1.XyoLogger(false, false);
        this.service = service;
    }
    discoverCharacteristics() {
        return __awaiter(this, void 0, void 0, function* () {
            // eslint-disable-next-line no-async-promise-executor
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                this.logger.info(`Trying to discover characteristics for service with uuid: ${this.service.uuid}`);
                try {
                    this.logger.info(`Successfully discovered characteristics for service with uuid: ${this.service.uuid}`);
                    const characteristics = yield this.service.discoverCharacteristicsAsync();
                    const returnArray = [];
                    for (const characteristic of characteristics) {
                        returnArray.push(new noble_characteristic_1.NobleCharacteristic(characteristic));
                    }
                    // characteristics.forEach((characteristic) => {
                    //   returnArray.push(new NobleCharacteristic(characteristic))
                    // })
                    resolve(returnArray);
                }
                catch (e) {
                    this.logger.error(`Error discovering characteristics for service with uuid: ${this.service.uuid}`);
                    reject(`discoverCharacteristics(): Error ${e}`);
                }
            }));
        });
    }
}
exports.NobleService = NobleService;
//# sourceMappingURL=noble-service.js.map