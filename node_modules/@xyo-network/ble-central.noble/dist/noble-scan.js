"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NobleScan = void 0;
const logger_1 = require("@xyo-network/logger");
// import noble from '@s524797336/noble-mac'
const noble_1 = __importDefault(require("@abandonware/noble"));
const noble_device_1 = require("./noble-device");
class NobleScan {
    constructor() {
        this.logger = new logger_1.XyoLogger(false, false);
        this.inRangeDevices = {};
        this.cleanDevices = () => {
            for (const id in this.inRangeDevices) {
                if (Date.now() - (this.inRangeDevices[id].lastSeen) > 5000) {
                    delete this.inRangeDevices[id];
                }
            }
        };
        this.stateChange = (state) => {
            this.logger.info(`Noble state change: ${state}`);
        };
        this.discover = (peripheral) => {
            const entered = !this.inRangeDevices[peripheral.id];
            if (entered) {
                this.inRangeDevices[peripheral.id] = new noble_device_1.NobleDevice(peripheral);
            }
            this.inRangeDevices[peripheral.id].lastSeen = Date.now();
        };
        noble_1.default.on("stateChange", (state) => __awaiter(this, void 0, void 0, function* () {
            this.stateChange(state);
            if (state === 'poweredOn')
                this.startScan();
        }));
        noble_1.default.on("discover", (peripheral) => __awaiter(this, void 0, void 0, function* () {
            this.discover(peripheral);
        }));
        setInterval(this.cleanDevices, 1000);
    }
    startScan() {
        return __awaiter(this, void 0, void 0, function* () {
            /** @type {Promise<void>} */
            return new Promise((resolve, reject) => {
                if (noble_1.default.state === "poweredOn") {
                    const callback = () => {
                        this.logger.info("Scanner stared successfully");
                        noble_1.default.removeAllListeners('scanStart');
                        resolve();
                    };
                    this.logger.info("Trying to start scanner");
                    noble_1.default.on('scanStart', callback);
                    return noble_1.default.startScanningAsync();
                }
                this.logger.error("Noble is not powered on");
                reject();
            });
        });
    }
    stopScan() {
        return __awaiter(this, void 0, void 0, function* () {
            /** @type {Promise<void>} */
            return new Promise((resolve) => {
                this.logger.info("Stopping noble scanner");
                noble_1.default.stopScanningAsync();
                noble_1.default.removeAllListeners('scanStop');
                resolve();
            });
        });
    }
    getDevices() {
        const returnArray = [];
        for (const [, value] of Object.entries(this.inRangeDevices)) {
            returnArray.push(value);
        }
        return returnArray;
    }
}
exports.NobleScan = NobleScan;
//# sourceMappingURL=noble-scan.js.map