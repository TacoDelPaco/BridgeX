"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NobleCharacteristic = void 0;
const logger_1 = require("@xyo-network/logger");
const noble_descriptor_1 = require("./noble-descriptor");
class NobleCharacteristic {
    get uuid() {
        return this.characteristic.uuid;
    }
    get name() {
        return this.characteristic.name;
    }
    get type() {
        return this.characteristic.type;
    }
    get properties() {
        return this.characteristic.properties;
    }
    get descriptors() {
        const returnArray = [];
        this.characteristic.descriptors.forEach((descriptor) => {
            returnArray.push(new noble_descriptor_1.NobleDescriptor(descriptor));
        });
        return returnArray;
    }
    constructor(characteristic) {
        // tslint:disable-next-line:prefer-array-literal
        this.notifyListeners = [];
        this.logger = new logger_1.XyoLogger(false, false);
        this.onNotify = (data, isNotification) => {
            this.logger.info(`Received notification on characteristic with UUID: ${this.characteristic.uuid}`);
            this.notifyListeners.forEach((listener) => {
                listener(data, isNotification);
            });
        };
        this.characteristic = characteristic;
        this.characteristic.on("data", this.onNotify);
        this.characteristic.on("notify", this.onNotify);
        this.characteristic.on("broadcast", this.onNotify);
    }
    read() {
        return new Promise((resolve, reject) => {
            this.logger.info(`Trying to read characteristic with uuid: ${this.characteristic.uuid}`);
            this.characteristic.read((error, buffer) => {
                if (error == null) {
                    this.logger.info(`Successfully read with uuid: ${this.characteristic.uuid}`);
                    resolve(buffer);
                }
                else {
                    this.logger.error(`Error reading characteristic with uuid: ${this.characteristic.uuid}`);
                    reject(error);
                }
            });
        });
    }
    write(value) {
        return new Promise((resolve, reject) => {
            this.logger.info(`Trying to write to characteristic with uuid: ${this.characteristic.uuid}`);
            // todo figure out what this true or false really does
            this.characteristic.write(value, true, (error) => {
                if (error == null) {
                    this.logger.info(`Successfully wrote to characteristic with uuid: : ${this.characteristic.uuid}`);
                    resolve();
                }
                else {
                    this.logger.error(`Error writing to characteristic with uuid: ${this.characteristic.uuid}`);
                    reject(error);
                }
            });
        });
    }
    discoverDescriptors() {
        return new Promise((resolve, reject) => {
            this.logger.info(`Trying to discover descriptors on characteristic with uuid: ${this.characteristic.uuid}`);
            this.characteristic.discoverDescriptors((error, descriptors) => {
                if (error == null) {
                    this.logger.info(`Successfully discovered descriptors on characteristic: ${this.characteristic.uuid}`);
                    const returnArray = [];
                    descriptors.forEach((descriptor) => {
                        returnArray.push(new noble_descriptor_1.NobleDescriptor(descriptor));
                    });
                    resolve(returnArray);
                }
                else {
                    this.logger.error(`Error discovering descriptors on characteristic: ${this.characteristic.uuid}`);
                    reject(error);
                }
            });
        });
    }
    subscribe() {
        return new Promise((resolve, reject) => {
            this.logger.info(`Trying to subscribe to characteristic with uuid: ${this.characteristic.uuid}`);
            this.characteristic.subscribe((error) => {
                if (error == null) {
                    this.logger.info(`Successfully subscribed to characteristic with uuid: ${this.characteristic.uuid}`);
                    resolve();
                }
                else {
                    this.logger.error(`Error subscribing to characteristic with uuid: ${this.characteristic.uuid}`);
                    reject(error);
                }
            });
        });
    }
    unsubscribe() {
        return new Promise((resolve, reject) => {
            this.logger.info(`Trying to unsubscribe from characteristic with uuid: ${this.characteristic.uuid}`);
            this.characteristic.unsubscribe((error) => {
                if (error == null) {
                    this.logger.info(`Successfully unsubscribed from characteristic with uuid: ${this.characteristic.uuid}`);
                    resolve();
                }
                else {
                    this.logger.error(`Error unsubscribing from characteristic with uuid: : ${this.characteristic.uuid}`);
                    reject(error);
                }
            });
        });
    }
    on(_event, listener) {
        this.logger.info("Notfied");
        this.notifyListeners.push(listener);
        return this;
    }
}
exports.NobleCharacteristic = NobleCharacteristic;
//# sourceMappingURL=noble-characteristic.js.map