"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NobleCharacteristic = void 0;
const logger_1 = require("@xyo-network/logger");
const noble_descriptor_1 = require("./noble-descriptor");
class NobleCharacteristic {
    get uuid() {
        return this.characteristic.uuid;
    }
    get name() {
        return this.characteristic.name;
    }
    get type() {
        return this.characteristic.type;
    }
    get properties() {
        return this.characteristic.properties;
    }
    get descriptors() {
        const returnArray = [];
        this.characteristic.descriptors.forEach((descriptor) => {
            returnArray.push(new noble_descriptor_1.NobleDescriptor(descriptor));
        });
        return returnArray;
    }
    constructor(characteristic) {
        this.notifyListeners = [];
        this.logger = new logger_1.XyoLogger(false, false);
        this.onNotify = (data, isNotification) => {
            this.logger.info(`Received notification on characteristic with UUID: ${this.characteristic.uuid}`);
            this.notifyListeners.forEach((listener) => {
                listener(data, isNotification);
            });
        };
        this.characteristic = characteristic;
        this.characteristic.on("data", this.onNotify);
        this.characteristic.on("notify", this.onNotify);
        this.characteristic.on("broadcast", this.onNotify);
    }
    read() {
        // eslint-disable-next-line no-async-promise-executor
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            this.logger.info(`Trying to read characteristic with uuid: ${this.characteristic.uuid}`);
            try {
                this.logger.info(`Successfully read with uuid: ${this.characteristic.uuid}`);
                const buffer = yield this.characteristic.readAsync();
                resolve(buffer);
            }
            catch (e) {
                this.logger.error(`Error reading characteristic with uuid: ${this.characteristic.uuid}`);
                reject(`read(): Error ${e}`);
            }
        }));
    }
    write(value) {
        // eslint-disable-next-line no-async-promise-executor
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            this.logger.info(`Trying to write to characteristic with uuid: ${this.characteristic.uuid}`);
            // todo figure out what this true or false really does
            try {
                this.logger.info(`Successfully wrote to characteristic with uuid: : ${this.characteristic.uuid}`);
                yield this.characteristic.writeAsync(value, true);
                resolve();
            }
            catch (e) {
                this.logger.error(`Error writing to characteristic with uuid: ${this.characteristic.uuid}`);
                reject(`write(): Error ${e}`);
            }
        }));
    }
    discoverDescriptors() {
        // eslint-disable-next-line no-async-promise-executor
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            this.logger.info(`Trying to subscribe to characteristic with uuid: ${this.characteristic.uuid}`);
            try {
                this.logger.info(`Successfully subscribed to characteristic with uuid: ${this.characteristic.uuid}`);
                this.characteristic.discoverDescriptors((_, descriptors) => {
                    const returnArray = [];
                    for (const descriptor of descriptors) {
                        returnArray.push(new noble_descriptor_1.NobleDescriptor(descriptor));
                    }
                    // descriptors.forEach((descriptor) => {
                    //   returnArray.push(new NobleDescriptor(descriptor))
                    // })
                    resolve(returnArray);
                });
            }
            catch (e) {
                this.logger.error(`Error subscribing to characteristic with uuid: ${this.characteristic.uuid}`);
                reject(`discoverDescriptors(): Error ${e}`);
            }
        }));
    }
    subscribe() {
        // eslint-disable-next-line no-async-promise-executor
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            this.logger.info(`Trying to subscribe to characteristic with uuid: ${this.characteristic.uuid}`);
            try {
                this.logger.info(`Successfully subscribed to characteristic with uuid: ${this.characteristic.uuid}`);
                yield this.characteristic.subscribeAsync();
                resolve();
            }
            catch (e) {
                this.logger.error(`Error subscribing to characteristic with uuid: ${this.characteristic.uuid}`);
                reject(`subscribe(): Error ${e}`);
            }
        }));
    }
    unsubscribe() {
        // eslint-disable-next-line no-async-promise-executor
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            this.logger.info(`Trying to unsubscribe from characteristic with uuid: ${this.characteristic.uuid}`);
            try {
                this.logger.info(`Successfully unsubscribed to characteristic with uuid: ${this.characteristic.uuid}`);
                yield this.characteristic.unsubscribeAsync();
                resolve();
            }
            catch (e) {
                this.logger.error(`Error unsubscribing to characteristic with uuid: ${this.characteristic.uuid}`);
                reject(`unsubscribe(): Error ${e}`);
            }
        }));
    }
    on(_event, listener) {
        this.logger.info("Notfied");
        this.notifyListeners.push(listener);
        return this;
    }
}
exports.NobleCharacteristic = NobleCharacteristic;
//# sourceMappingURL=noble-characteristic.js.map