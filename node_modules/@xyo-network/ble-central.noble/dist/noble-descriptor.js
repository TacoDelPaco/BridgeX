"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("@xyo-network/logger");
class NobleDescriptor {
    constructor(descriptor) {
        this.logger = new logger_1.XyoLogger(false, false);
        this.descriptor = descriptor;
    }
    get uuid() {
        return this.descriptor.uuid;
    }
    get name() {
        return this.descriptor.name;
    }
    get type() {
        return this.descriptor.type;
    }
    readValue() {
        return new Promise((resolve, reject) => {
            this.logger.info(`Trying to read value on descriptor with uuid: ${this.descriptor.uuid}`);
            this.descriptor.readValue((error, data) => {
                if (error == null) {
                    this.logger.info(`Successfully read value of descriptor with uuid: ${this.descriptor.uuid}`);
                    resolve(data);
                }
                else {
                    this.logger.error(`Error reading value of descriptor with uuid: ${this.descriptor.uuid}`);
                    reject(error);
                }
            });
        });
    }
    writeValue(value) {
        return new Promise((resolve, reject) => {
            this.logger.info(`Trying to write value to descriptor with uuid: ${this.descriptor.uuid}`);
            this.descriptor.writeValue(value, (error) => {
                if (error == null) {
                    this.logger.info(`Successfully wrote value to descriptor with uuid: ${this.descriptor.uuid}`);
                    resolve();
                }
                else {
                    this.logger.info(`Error writing value to descriptor with uuid: ${this.descriptor.uuid}`);
                    reject(error);
                }
            });
        });
    }
}
exports.NobleDescriptor = NobleDescriptor;
//# sourceMappingURL=noble-descriptor.js.map