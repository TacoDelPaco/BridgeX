"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NobleDescriptor = void 0;
const logger_1 = require("@xyo-network/logger");
class NobleDescriptor {
    constructor(descriptor) {
        this.logger = new logger_1.XyoLogger(false, false);
        this.descriptor = descriptor;
    }
    get uuid() {
        return this.descriptor.uuid;
    }
    get name() {
        return this.descriptor.name;
    }
    get type() {
        return this.descriptor.type;
    }
    readValue() {
        // eslint-disable-next-line no-async-promise-executor
        return new Promise((resolve, reject) => {
            this.logger.info(`Trying to read value on descriptor with uuid: ${this.descriptor.uuid}`);
            try {
                this.logger.info(`Successfully read value of descriptor with uuid: ${this.descriptor.uuid}`);
                this.descriptor.readValue((_, data) => {
                    resolve(data);
                });
            }
            catch (e) {
                this.logger.error(`Error reading value of descriptor with uuid: ${this.descriptor.uuid}`);
                reject(`readValue(): Error ${e}`);
            }
        });
    }
    writeValue(value) {
        // eslint-disable-next-line no-async-promise-executor
        return new Promise((resolve, reject) => {
            this.logger.info(`Trying to write value to descriptor with uuid: ${this.descriptor.uuid}`);
            try {
                this.logger.info(`Successfully wrote value of descriptor with uuid: ${this.descriptor.uuid}`);
                this.descriptor.writeValue(value);
                resolve();
            }
            catch (e) {
                this.logger.error(`Error writing value of descriptor with uuid: ${this.descriptor.uuid}`);
                reject(`writeValue(): Error ${e}`);
            }
        });
    }
}
exports.NobleDescriptor = NobleDescriptor;
//# sourceMappingURL=noble-descriptor.js.map