import { XyoBridgeOption, XyoBridgeQueue } from '@xyo-network/bridge-queue-repository';
import { IXyoNetworkProvider } from '@xyo-network/network';
import { XyoSimplePeerConnectionDelegate } from '@xyo-network/peer-connections';
import { XyoBoundWitnessPayloadProvider } from '@xyo-network/peer-interaction';
import { IXyoBridgeConfig } from './@types';
export declare class XyoBridge {
    private bridgeConfig;
    bridgeEveryN: number;
    networkDelegate: XyoSimplePeerConnectionDelegate;
    toNetworkDelegate: XyoSimplePeerConnectionDelegate;
    bridgeQueue: XyoBridgeQueue;
    bridgeOption: XyoBridgeOption;
    payloadProvider: XyoBoundWitnessPayloadProvider;
    private running;
    private networkCatResolver;
    private networkRouter;
    private boundWitnessValidator;
    private networkHandler;
    private success;
    private interactionFactoryRegular;
    private interactionFactoryGive;
    private interactionFactoryTake;
    private standardBoundWitnessHandlerProviderRegular;
    private standardBoundWitnessHandlerProviderTake;
    private standardBoundWitnessHandlerProviderGive;
    constructor(bridgeFromNetwork: IXyoNetworkProvider, bridgeToNetwork: IXyoNetworkProvider, bridgeConfig: IXyoBridgeConfig);
    mainBridgeLoop: () => Promise<void>;
    init(): Promise<void>;
    start(): void;
    stop(): void;
    private asyncLoop;
}
//# sourceMappingURL=xyo-bridge.d.ts.map