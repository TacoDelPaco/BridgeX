"use strict";
/*
 * @Author: XY | The Findables Company <ryanxyo>
 * @Date:   Wednesday, 21st November 2018 9:50:32 am
 * @Email:  developer@xyfindables.com
 * @Filename: xyo-bound-witness-server-interaction.ts
 * @Last modified by: ryanxyo
 * @Last modified time: Tuesday, 5th February 2019 2:37:22 pm
 * @License: All Rights Reserved
 * @Copyright: Copyright XY | The Findables Company
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.XyoBoundWitnessInteraction = void 0;
const base_1 = require("@xyo-network/base");
const xyo_bound_witness_client_interaction_1 = require("../client/xyo-bound-witness-client-interaction");
const xyo_bound_witness_server_interaction_1 = require("../server/xyo-bound-witness-server-interaction");
/**
 * An `XyoBoundWitnessInteraction` manages a "session"
 * between two networked nodes.
 */
// tslint:disable-next-line:max-line-length
class XyoBoundWitnessInteraction extends base_1.XyoBase {
    constructor(signers, payload, serializationService, catalogueItem) {
        super();
        this.signers = signers;
        this.payload = payload;
        this.serializationService = serializationService;
        this.catalogueItem = catalogueItem;
        this.clientHandler = new xyo_bound_witness_client_interaction_1.XyoBoundWitnessClientInteraction(signers, payload, serializationService, catalogueItem);
        this.serverHandler = new xyo_bound_witness_server_interaction_1.XyoBoundWitnessServerInteraction(signers, payload, serializationService, catalogueItem);
    }
    /**
     * Does a bound witness with another node
     */
    run(networkPipe, didInit) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    resolve(yield this.performInteraction(networkPipe, didInit));
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    performInteraction(networkPipe, didInit) {
        return __awaiter(this, void 0, void 0, function* () {
            if (didInit) {
                return this.clientHandler.run(networkPipe, didInit);
            }
            return this.serverHandler.run(networkPipe, didInit);
        });
    }
}
exports.XyoBoundWitnessInteraction = XyoBoundWitnessInteraction;
//# sourceMappingURL=xyo-bound-witness-interaction.js.map