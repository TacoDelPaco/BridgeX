import { CatalogueItem, IXyoNetworkPipe } from '@xyo-network/network';
import { IXyoBoundWitness, IXyoPayload } from '@xyo-network/bound-witness';
import { IXyoNodeInteraction } from '@xyo-network/peer-interaction';
import { XyoBase } from '@xyo-network/base';
import { IXyoSigner } from '@xyo-network/signing';
import { IXyoSerializationService } from '@xyo-network/serialization';
/**
 * An `XyoBoundWitnessInteraction` manages a "session"
 * between two networked nodes.
 */
export declare class XyoBoundWitnessInteraction extends XyoBase implements IXyoNodeInteraction<IXyoBoundWitness> {
    catalogueItem: CatalogueItem;
    private serverHandler;
    private clientHandler;
    constructor(signers: IXyoSigner[], payload: IXyoPayload, serializationService: IXyoSerializationService, catalogueItem: CatalogueItem);
    /**
     * Does a bound witness with another node
     */
    run(networkPipe: IXyoNetworkPipe, didInit: boolean): Promise<IXyoBoundWitness>;
    performInteraction(networkPipe: IXyoNetworkPipe, didInit: boolean): Promise<IXyoBoundWitness>;
}
//# sourceMappingURL=xyo-bound-witness-interaction.d.ts.map