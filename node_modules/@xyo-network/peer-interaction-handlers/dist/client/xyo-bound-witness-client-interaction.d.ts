import { CatalogueItem, IXyoNetworkPipe } from '@xyo-network/network';
import { IXyoBoundWitness, IXyoPayload } from '@xyo-network/bound-witness';
import { IXyoNodeInteraction } from '@xyo-network/peer-interaction';
import { XyoBase } from '@xyo-network/base';
import { IXyoSigner } from '@xyo-network/signing';
import { IXyoSerializationService } from '@xyo-network/serialization';
import { InnerBoundWitness } from '../xyo-inner-bound-witness';
/**
 * An `XyoBoundWitnessInteraction` manages a "session"
 * between two networked nodes.
 */
export declare class XyoBoundWitnessClientInteraction extends XyoBase implements IXyoNodeInteraction<IXyoBoundWitness> {
    private readonly signers;
    private readonly payload;
    private readonly serializationService;
    catalogueItem: CatalogueItem;
    constructor(signers: IXyoSigner[], payload: IXyoPayload, serializationService: IXyoSerializationService, catalogueItem: CatalogueItem);
    /**
     * Does a bound witness with another node
     */
    run(networkPipe: IXyoNetworkPipe, didInit: boolean): Promise<IXyoBoundWitness>;
    performInteraction(networkPipe: IXyoNetworkPipe): Promise<InnerBoundWitness>;
    private sendMessage;
}
//# sourceMappingURL=xyo-bound-witness-client-interaction.d.ts.map