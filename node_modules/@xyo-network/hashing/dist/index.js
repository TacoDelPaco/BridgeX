"use strict";
/*
 * @Author: XY | The Findables Company <ryanxyo>
 * @Date:   Tuesday, 20th November 2018 1:46:53 pm
 * @Email:  developer@xyfindables.com
 * @Filename: index.ts
 * @Last modified by: ryanxyo
 * @Last modified time: Wednesday, 6th March 2019 4:42:51 pm
 * @License: All Rights Reserved
 * @Copyright: Copyright XY | The Findables Company
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.sha3HashDeserializer = exports.sha256HashDeserializer = exports.getHashingProvider = exports.XyoStubHash = exports.XyoHash = void 0;
const errors_1 = require("@xyo-network/errors");
const xyo_native_base_hash_provider_1 = require("./xyo-native-base-hash-provider");
const serialization_schema_1 = require("@xyo-network/serialization-schema");
const xyo_hash_1 = require("./xyo-hash");
const xyo_sha3_hash_provider_1 = require("./xyo-sha3-hash-provider");
var xyo_hash_2 = require("./xyo-hash");
Object.defineProperty(exports, "XyoHash", { enumerable: true, get: function () { return xyo_hash_2.XyoHash; } });
var xyo_stub_hash_1 = require("./xyo-stub-hash");
Object.defineProperty(exports, "XyoStubHash", { enumerable: true, get: function () { return xyo_stub_hash_1.XyoStubHash; } });
/** A cache fro the hash-providers */
const hashProvidersByType = {};
/**
 * Gets a HashProvider given a hashType
 *
 * @export
 * @param {HASH_TYPE} hashType 'sha256'
 * @returns {IXyoHashProvider} An instance of a `IXyoHashProvider`
 */
function getHashingProvider(hashType) {
    if (['sha256', 'sha3'].indexOf(hashType) === -1) {
        throw new errors_1.XyoError(`Unsupported hash type ${hashType}`);
    }
    if (hashProvidersByType[hashType]) {
        return hashProvidersByType[hashType];
    }
    let hashProvider;
    switch (hashType) {
        case "sha256":
            hashProvider = new xyo_native_base_hash_provider_1.XyoNativeBaseHashProvider('sha256', serialization_schema_1.schema.sha256Hash.id);
            break;
        case "sha3":
            hashProvider = new xyo_sha3_hash_provider_1.XyoSha3HashProvider();
            break;
        default:
            throw new errors_1.XyoError(`This should never happen`);
    }
    hashProvidersByType[hashType] = hashProvider;
    return hashProvider;
}
exports.getHashingProvider = getHashingProvider;
class XyoSha256HashDeserializer {
    constructor() {
        this.schemaObjectId = serialization_schema_1.schema.sha256Hash.id;
    }
    deserialize(data, serializationService) {
        const parseResult = serializationService.parse(data);
        const hashProvider = getHashingProvider('sha256');
        return new xyo_hash_1.XyoHash(parseResult.data, hashProvider, this.schemaObjectId);
    }
}
// tslint:disable-next-line:max-classes-per-file
class XyoSha3HashDeserializer {
    constructor() {
        this.schemaObjectId = serialization_schema_1.schema.sha3Hash.id;
    }
    deserialize(data, serializationService) {
        const parseResult = serializationService.parse(data);
        const hashProvider = getHashingProvider('sha3');
        return new xyo_hash_1.XyoHash(parseResult.data, hashProvider, this.schemaObjectId);
    }
}
exports.sha256HashDeserializer = new XyoSha256HashDeserializer();
exports.sha3HashDeserializer = new XyoSha3HashDeserializer();
//# sourceMappingURL=index.js.map