"use strict";
/*
 * @Author: XY | The Findables Company <ryanxyo>
 * @Date:   Tuesday, 20th November 2018 1:43:51 pm
 * @Email:  developer@xyfindables.com
 * @Filename: xyo-native-base-hash-provider.ts
 * @Last modified by: ryanxyo
 * @Last modified time: Wednesday, 6th March 2019 4:44:38 pm
 * @License: All Rights Reserved
 * @Copyright: Copyright XY | The Findables Company
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.XyoNativeBaseHashProvider = void 0;
const crypto_1 = __importDefault(require("crypto"));
const errors_1 = require("@xyo-network/errors");
const xyo_hash_1 = require("./xyo-hash");
/**
 * A hash provider that wraps and utilizes the natives nodejs hash functionality
 */
class XyoNativeBaseHashProvider {
    /**
     * Creates a new instance of a XyoNativeBaseHashProvider
     * @param hashAlgorithm A natively supported hash algorithm. Any item from `crypto.getHashes()` should work
     * @param xyoHashClass A class reference to the type of XyoHash this is
     */
    constructor(hashAlgorithm, hashObjectSchemaId) {
        this.hashAlgorithm = hashAlgorithm;
        this.hashObjectSchemaId = hashObjectSchemaId;
    }
    /**
     * Creates a hash from the data provided
     * @param data An arbitrary buffer to hash
     */
    createHash(data) {
        try {
            const hash = crypto_1.default.createHash(this.hashAlgorithm);
            const hashPromise = new Promise((resolve, reject) => {
                hash.on('readable', () => {
                    const hashOfData = hash.read();
                    resolve(new xyo_hash_1.XyoHash(hashOfData, this, this.hashObjectSchemaId));
                });
            });
            hash.write(data);
            hash.end();
            return hashPromise;
        }
        catch (err) {
            throw new errors_1.XyoError(`Could not locate crypto hash-provider ${this.hashAlgorithm}. ${err}`);
        }
    }
    /**
     * Verifies the data passed hashes to the hash provides.
     * @param data The original data
     * @param hash The supposed hash of the original data
     */
    verifyHash(data, hash) {
        return __awaiter(this, void 0, void 0, function* () {
            const hashOfData = yield this.createHash(data);
            return hashOfData.getHash().equals(hash);
        });
    }
}
exports.XyoNativeBaseHashProvider = XyoNativeBaseHashProvider;
//# sourceMappingURL=xyo-native-base-hash-provider.js.map