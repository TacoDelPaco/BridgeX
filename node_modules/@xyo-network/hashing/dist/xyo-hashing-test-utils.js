"use strict";
/*
 * @Author: XY | The Findables Company <ryanxyo>
 * @Date:   Friday, 14th December 2018 12:07:16 pm
 * @Email:  developer@xyfindables.com
 * @Filename: xyo-hashing-test-utils.ts
 * @Last modified by: ryanxyo
 * @Last modified time: Friday, 14th December 2018 12:14:17 pm
 * @License: All Rights Reserved
 * @Copyright: Copyright XY | The Findables Company
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
function hashSpec(hashProvider, serializationService) {
    describe(hashProvider.constructor.name, () => {
        it(`Should verify correct hashes and not verify incorrect hashes`, () => __awaiter(this, void 0, void 0, function* () {
            const dataToHash = Buffer.from(`hello world`);
            const hash = yield hashProvider.createHash(dataToHash);
            const correctResult = yield hash.verifyHash(dataToHash);
            expect(correctResult).toBe(true);
            const incorrectResult = yield hash.verifyHash(Buffer.from('fee phi pho fum'));
            expect(incorrectResult).toBe(false);
        }));
        it(`Should have deterministic hashes`, () => __awaiter(this, void 0, void 0, function* () {
            const dataToHash = Buffer.from(`hello world`);
            const hash1 = yield hashProvider.createHash(dataToHash);
            const hash2 = yield hashProvider.createHash(dataToHash);
            expect(hash1.isEqual(hash2)).toBe(true);
        }));
        it(`XyoHashes should serialize/deserialize`, () => __awaiter(this, void 0, void 0, function* () {
            const dataToHash = Buffer.from(`hello world`);
            const hash1 = yield hashProvider.createHash(dataToHash);
            const serializedHash1 = hash1.serialize();
            const hash2 = serializationService.deserialize(serializedHash1);
            expect(hash1.isEqual(hash2)).toBe(true);
        }));
        it(`Should have different outputs for very-close inputs`, () => __awaiter(this, void 0, void 0, function* () {
            const dataToHash = Buffer.from(`hello world`);
            const hash1 = yield hashProvider.createHash(dataToHash);
            const dataToHash2 = Buffer.from(`Hello world`); // with capital H
            const hash2 = yield hashProvider.createHash(dataToHash2);
            expect(hash1.isEqual(hash2)).toBe(false);
        }));
    });
}
exports.hashSpec = hashSpec;
//# sourceMappingURL=xyo-hashing-test-utils.js.map