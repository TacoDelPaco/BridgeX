"use strict";
/*
 * @Author: XY | The Findables Company <ryanxyo>
 * @Date:   Monday, 19th November 2018 3:23:49 pm
 * @Email:  developer@xyfindables.com
 * @Filename: xyo-error.ts
 * @Last modified by: ryanxyo
 * @Last modified time: Wednesday, 6th March 2019 4:41:30 pm
 * @License: All Rights Reserved
 * @Copyright: Copyright XY | The Findables Company
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.XyoError = exports.XyoErrors = void 0;
const base_1 = require("@xyo-network/base");
/**
 * A list of supported error types
 */
var XyoErrors;
(function (XyoErrors) {
    XyoErrors[XyoErrors["CRITICAL"] = 1] = "CRITICAL";
    XyoErrors[XyoErrors["INVALID_PARAMETERS"] = 2] = "INVALID_PARAMETERS";
})(XyoErrors || (exports.XyoErrors = XyoErrors = {}));
/**
 * An XyoError wraps the native Error interface.
 * Errors in Xyo sdk should only throw these types
 * of errors
 */
class XyoError extends base_1.XyoBase {
    /**
     * Creates a new instance of an XyoError
     *
     * @param message A message for the error
     * @param code The type of XyoErrorType
     * @param fromOtherError Initial error, if it exists
     */
    constructor(message, code = XyoErrors.CRITICAL, fromOtherError) {
        super();
        this.message = message;
        this.code = code;
        this.isXyoError = true;
        this.name = 'XyoError';
        this.stack = (fromOtherError && fromOtherError.stack) || new Error().stack;
        this.logError(`An XyoError was thrown`, this);
    }
    toString() {
        return `XyoError: ${this.message}.${this.stack ? `\n${this.stack}` : ''}`;
    }
}
exports.XyoError = XyoError;
//# sourceMappingURL=xyo-error.js.map