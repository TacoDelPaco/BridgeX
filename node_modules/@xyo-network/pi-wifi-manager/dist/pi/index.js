"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-var-requires */
/* eslint-disable @typescript-eslint/no-explicit-any */
const utils_1 = require("@xyo-network/utils");
const debug_1 = __importDefault(require("debug"));
const lodash_1 = require("lodash");
const utils_2 = require("../utils");
class PiWifiManager extends utils_1.Subscribe {
    constructor() {
        super(...arguments);
        this.statusInterval = 10000;
        this.updating = false;
        this.logger = (0, debug_1.default)('wifi:pi');
        this.wifi = new (require('rpi-wifi-connection'))();
        this.updateStatus = () => __awaiter(this, void 0, void 0, function* () {
            if (this.updating) {
                this.logger('status update in progress');
                return;
            }
            try {
                const status = yield this.getStatus();
                this.setCurrentValue(status);
            }
            catch (e) {
                this.logger('status update error', e.message);
            }
        });
    }
    getStatus() {
        return __awaiter(this, void 0, void 0, function* () {
            const status = yield this.wifi.getStatus('wlan0');
            const ssid = (0, lodash_1.get)(status, 'ssid');
            const ip = (0, lodash_1.get)(status, 'ip') || (0, lodash_1.get)(status, 'ip_address') || (0, utils_2.getIp)();
            return { ssid, ip };
        });
    }
    connect({ ssid, password }) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.wifi.connect({ ssid, psk: password });
        });
    }
    getNetworks() {
        return __awaiter(this, void 0, void 0, function* () {
            const networks = yield this.wifi.getNetworks();
            return networks || [];
        });
    }
    disconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            const { ssid } = yield this.getStatus();
            if (!ssid)
                return false;
            const networks = yield this.getNetworks();
            for (const network of networks) {
                yield this.wifi.wpa_cli(`remove_network ${network.id}`, '^OK');
            }
            return true;
        });
    }
    scan() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.wifi.scan();
        });
    }
    subscribe(fn) {
        const unsubscribe = super.subscribe(fn);
        if (this.listenerCount() === 1) {
            this.startStatusListener();
        }
        return () => {
            unsubscribe();
            if (!this.hasSubscribers()) {
                this.stopStatusListener();
            }
        };
    }
    startStatusListener() {
        this.stopStatusListener();
        this.intervalId = setInterval(this.updateStatus, this.statusInterval);
        this.updateStatus();
    }
    stopStatusListener() {
        clearInterval(this.intervalId);
    }
}
exports.default = PiWifiManager;
//# sourceMappingURL=index.js.map