"use strict";
/*
 * @Author: XY | The Findables Company <ryanxyo>
 * @Date:   Monday, 10th December 2018 10:43:28 am
 * @Email:  developer@xyfindables.com
 * @Filename: xyo-fetter.ts
 * @Last modified by: ryanxyo
 * @Last modified time: Wednesday, 12th December 2018 1:50:19 pm
 * @License: All Rights Reserved
 * @Copyright: Copyright XY | The Findables Company
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.XyoFetter = void 0;
const serialization_1 = require("@xyo-network/serialization");
const serialization_schema_1 = require("@xyo-network/serialization-schema");
class XyoFetter extends serialization_1.XyoBaseSerializable {
    constructor(keySet, heuristics, origin) {
        super(serialization_schema_1.schema, origin);
        this.keySet = keySet;
        this.heuristics = heuristics;
        this.schemaObjectId = serialization_schema_1.schema.fetter.id;
    }
    getData() {
        return [
            this.keySet,
            ...this.heuristics
        ];
    }
    getReadableValue() {
        return {
            keySet: this.keySet.getReadableValue(),
            heuristics: this.heuristics.map((h) => {
                return {
                    name: h.getReadableName(),
                    value: h.getReadableValue()
                };
            })
        };
    }
}
exports.XyoFetter = XyoFetter;
// tslint:disable-next-line:max-classes-per-file
class XyoFetterDeserializer {
    constructor() {
        this.schemaObjectId = serialization_schema_1.schema.fetter.id;
    }
    deserialize(data, serializationService) {
        const parseResult = serializationService.parse(data);
        const query = new serialization_1.ParseQuery(parseResult);
        const keySetItem = query.getChildAt(0);
        const keySet = serializationService.deserialize(keySetItem.readData(true)).hydrate();
        const childrenCount = query.getChildrenCount();
        let childIndex = 1;
        const heuristics = [];
        while (childIndex < childrenCount) {
            const heuristicChild = query.getChildAt(childIndex);
            const heuristic = serializationService.deserialize(heuristicChild.readData(true)).hydrate();
            heuristics.push(heuristic);
            childIndex += 1;
        }
        return new XyoFetter(keySet, heuristics, data);
    }
}
XyoFetter.deserializer = new XyoFetterDeserializer();
//# sourceMappingURL=xyo-fetter.js.map