"use strict";
/*
 * @Author: XY | The Findables Company <ryanxyo>
 * @Date:   Monday, 10th December 2018 10:43:28 am
 * @Email:  developer@xyfindables.com
 * @Filename: xyo-witness.ts
 * @Last modified by: ryanxyo
 * @Last modified time: Wednesday, 12th December 2018 1:53:54 pm
 * @License: All Rights Reserved
 * @Copyright: Copyright XY | The Findables Company
 */
Object.defineProperty(exports, "__esModule", { value: true });
const serialization_1 = require("@xyo-network/serialization");
const serialization_schema_1 = require("@xyo-network/serialization-schema");
class XyoWitness extends serialization_1.XyoBaseSerializable {
    constructor(signatureSet, metadata) {
        super(serialization_schema_1.schema);
        this.signatureSet = signatureSet;
        this.metadata = metadata;
        this.schemaObjectId = serialization_schema_1.schema.witness.id;
    }
    getData() {
        return [
            this.signatureSet,
            ...this.metadata
        ];
    }
    getReadableValue() {
        return {
            signatureSet: this.signatureSet.signatures.map(signature => signature.getReadableValue()),
            metadata: this.metadata.map((metadataItem) => {
                return {
                    name: metadataItem.getReadableName(),
                    value: metadataItem.getReadableValue(),
                };
            }),
        };
    }
}
exports.XyoWitness = XyoWitness;
// tslint:disable-next-line:max-classes-per-file
class XyoWitnessDeserializer {
    constructor() {
        this.schemaObjectId = serialization_schema_1.schema.witness.id;
    }
    deserialize(data, serializationService) {
        const parseResult = serializationService.parse(data);
        const query = new serialization_1.ParseQuery(parseResult);
        const signatureSetItem = query.getChildAt(0);
        const signatureSet = serializationService
            .deserialize(signatureSetItem.readData(true))
            .hydrate();
        const childrenCount = query.getChildrenCount();
        let childIndex = 1;
        const metadata = [];
        while (childIndex < childrenCount) {
            const metadataChild = query.getChildAt(childIndex);
            const heuristic = serializationService.deserialize(metadataChild.readData(true)).hydrate();
            metadata.push(heuristic);
            childIndex += 1;
        }
        return new XyoWitness(signatureSet, metadata);
    }
}
XyoWitness.deserializer = new XyoWitnessDeserializer();
//# sourceMappingURL=xyo-witness.js.map