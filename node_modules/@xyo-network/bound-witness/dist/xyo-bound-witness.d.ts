/// <reference types="node" />
import { IXyoBoundWitness, FetterOrWitness, IXyoKeySet, IXyoSignatureSet, IXyoBoundWitnessParty } from "./@types";
import { XyoBaseSerializable, IXyoDeserializer, IXyoSerializableObject } from '@xyo-network/serialization';
export declare class XyoBoundWitness extends XyoBaseSerializable implements IXyoBoundWitness {
    readonly fetterWitnesses: FetterOrWitness[];
    private readonly respectSign?;
    get publicKeys(): IXyoKeySet[];
    get signatures(): IXyoSignatureSet[];
    get heuristics(): IXyoSerializableObject[][];
    get metadata(): IXyoSerializableObject[][];
    get numberOfParties(): number;
    get parties(): IXyoBoundWitnessParty[];
    private get fetterWitnessPairs();
    static deserializer: IXyoDeserializer<IXyoBoundWitness>;
    readonly schemaObjectId: number;
    constructor(fetterWitnesses: FetterOrWitness[], respectSign?: Buffer | undefined);
    stripMetaData(): IXyoBoundWitness;
    getHeuristicFromParty<T extends IXyoSerializableObject>(partyIndex: number, schemaObjectId: number): T | undefined;
    getMetaDataItemFromParty<T extends IXyoSerializableObject>(partyIndex: number, schemaObjectId: number): T | undefined;
    getSigningData(): Buffer;
    getData(): IXyoSerializableObject | IXyoSerializableObject[] | Buffer;
    getReadableValue(): {
        parties: {
            signing: {
                publicKey: {
                    type: string;
                    rawKey: any;
                };
                signature: {
                    type: string;
                    rawSignature: any;
                };
            }[];
            heuristics: {
                [s: string]: any;
            };
            metadata: {
                [s: string]: any;
            };
        }[];
    };
}
//# sourceMappingURL=xyo-bound-witness.d.ts.map