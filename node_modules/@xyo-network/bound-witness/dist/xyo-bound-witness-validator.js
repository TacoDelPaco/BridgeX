"use strict";
/*
 * @Author: XY | The Findables Company <ryanxyo>
 * @Date:   Tuesday, 20th November 2018 5:10:50 pm
 * @Email:  developer@xyfindables.com
 * @Filename: xyo-bound-witness-validator.ts
 * @Last modified by: ryanxyo
 * @Last modified time: Thursday, 7th March 2019 3:53:33 pm
 * @License: All Rights Reserved
 * @Copyright: Copyright XY | The Findables Company
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.XyoBoundWitnessValidator = void 0;
const base_1 = require("@xyo-network/base");
const errors_1 = require("@xyo-network/errors");
const serialization_schema_1 = require("@xyo-network/serialization-schema");
class XyoBoundWitnessValidator extends base_1.XyoBase {
    constructor(options) {
        super();
        this.options = options || {
            checkPartyLengths: true,
            checkIndexExists: true,
            checkCountOfSignaturesMatchPublicKeysCount: true,
            validateSignatures: true,
            validateHash: true
        };
    }
    setValidationOptions(validationOptions) {
        this.options = validationOptions;
    }
    validateBoundWitness(hash, originBlock) {
        return __awaiter(this, void 0, void 0, function* () {
            const signaturesLength = originBlock.signatures.length;
            const heuristicsLength = originBlock.heuristics.length;
            const metadataLength = originBlock.metadata.length;
            const keysLength = originBlock.publicKeys.length;
            const signingData = originBlock.getSigningData();
            if (this.options.validateHash && hash) {
                const validates = yield hash.verifyHash(signingData);
                if (!validates) {
                    throw new errors_1.XyoError(`Hash does not match signing data`, errors_1.XyoErrors.INVALID_PARAMETERS);
                }
            }
            if (this.options.checkPartyLengths &&
                (signaturesLength < 1 ||
                    signaturesLength !== heuristicsLength ||
                    signaturesLength !== metadataLength ||
                    signaturesLength !== keysLength)) {
                throw new errors_1.XyoError(`Party fields mismatch`, errors_1.XyoErrors.INVALID_PARAMETERS);
            }
            if (this.options.checkIndexExists) {
                originBlock.heuristics.forEach((heuristics, currentIndex) => {
                    const index = heuristics.find(heuristic => heuristic.schemaObjectId === serialization_schema_1.schema.index.id);
                    if (index === undefined) {
                        throw new errors_1.XyoError(`Each Party must have an index in their signed payload. Failed at index ${currentIndex}`, errors_1.XyoErrors.INVALID_PARAMETERS);
                    }
                });
            }
            yield originBlock.signatures.reduce((promiseChain, signatureSet, outerIndex) => __awaiter(this, void 0, void 0, function* () {
                yield promiseChain;
                if (this.options.checkCountOfSignaturesMatchPublicKeysCount &&
                    signatureSet.signatures.length !== originBlock.publicKeys[outerIndex].keys.length) {
                    throw new errors_1.XyoError(`There was a mismatch in keys and signatures length`, errors_1.XyoErrors.INVALID_PARAMETERS);
                }
                if (!this.options.validateSignatures) {
                    return;
                }
                return signatureSet.signatures.reduce((innerPromiseChain, innerSignature, innerIndex) => __awaiter(this, void 0, void 0, function* () {
                    yield innerPromiseChain;
                    const validates = yield innerSignature.verify(signingData, originBlock.publicKeys[outerIndex].keys[innerIndex]);
                    if (!validates) {
                        throw new errors_1.XyoError(`Could not validate signature at index [${outerIndex}][${innerIndex}]`, errors_1.XyoErrors.INVALID_PARAMETERS);
                    }
                }), Promise.resolve());
            }), Promise.resolve());
        });
    }
}
exports.XyoBoundWitnessValidator = XyoBoundWitnessValidator;
//# sourceMappingURL=xyo-bound-witness-validator.js.map